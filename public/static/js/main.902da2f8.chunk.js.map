{"version":3,"sources":["components/EditableTitle.module.css","components/FontSelector.module.css","components/SidebarText.module.css","components/image.svg","components/ImageField.module.css","components/ContentEditable.module.css","components/text.svg","components/SidebarGeneratePng.module.css","components/SidebarGeneratePdf.module.css","components/SidebarMeasurements.module.css","components/SidebarSettings.module.css","components/SidebarUpload.module.css","components/CardSets.module.css","components/FeatureList.module.css","components/screenshot.png","components/FieldController.module.css","actions.ts","requests.ts","utils.ts","types.ts","workerController.ts","storage.ts","fontLoader.tsx","constants.ts","sagas.ts","reducers.ts","store.ts","AboutPage.tsx","components/FieldController.tsx","components/ImageField.tsx","components/ContentEditable.tsx","components/TextField.tsx","components/Card.tsx","components/EditableTitle.tsx","components/KawaiiMessage.tsx","components/Loader.tsx","components/SidebarDetails.tsx","components/SidebarGeneratePng.tsx","components/PDFGenerator.tsx","components/SidebarGeneratePdf.tsx","components/ColorButton.tsx","components/SidebarImage.tsx","components/SidebarImportExport.tsx","components/SidebarMeasurements.tsx","components/SidebarSettings.tsx","components/FontSelector.tsx","components/SidebarText.tsx","components/SidebarUpload.tsx","components/Sidebar.tsx","components/CardSet.tsx","CardSetPage.tsx","ChangelogPage.tsx","ErrorBoundry.tsx","components/ConfirmedDelete.tsx","components/CardSets.tsx","GamePage.tsx","HelpPage.tsx","components/Login.tsx","LoginPage.tsx","components/FeatureList.tsx","components/Games.tsx","Main.tsx","selectors.ts","components/Logout.tsx","components/Navbar.tsx","NotFoundPage.tsx","components/SignUp.tsx","SignUpPage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Sidebar.module.css","components/Navbar.module.css","components/Loader.module.css","components/SidebarDetails.module.css","components/CardSet.module.css","components/pan.svg","components/zoom.svg","components/resize.svg","components/rotate.svg","components/Card.module.css","components/SidebarImage.module.css","components/ConfirmedDelete.module.css"],"names":["module","exports","SidebarState","messageDisplay","type","text","id","message","shortid","generate","gameSelectRequest","updateCardSets","gameCreatePngRequest","dpi","collectionType","collectionId","cardSetChangeActiveFieldName","name","cardSetChangeFieldPosition","cardId","fieldId","x","y","group","cardSetChangeFieldSize","width","height","cardSetChangeFieldAngle","angle","cardSetChangeActiveTextFieldAlign","align","cardSetChangeImage","imageInfo","cardSetChangeImageBase64","base64","cardSetActiveCardAndField","isBackActive","cardSetSetSidebarState","sidebarState","imageListRequest","filter","location","handleAxiosError","error","response","Error","data","request","console","log","getTokens","creds","axios","post","then","resp","catch","refreshToken","refreshTokenValue","config","headers","Authorization","accessToken","deleteAccessToken","token","delete","status","deleteRefreshToken","registerUser","getRequest","url","get","postRequest","postRequestFormDataCancelable","progressCallback","cancelToken","cancelCallback","onUploadProgress","isCancel","putRequest","put","deleteRequest","downloadBlob","blobURL","filename","resolve","tempLink","document","createElement","style","display","href","setAttribute","download","body","appendChild","click","removeChild","setTimeout","window","URL","revokeObjectURL","rotateVec","a","sinA","Math","sin","cosA","cos","rx","ry","calculateImageDimensions","imageFieldInfo","calculatedImageWidth","calculatedImageHeight","imageWidth","imageHeight","fit","zoom","UserError","reportError","StackTrace","fromError","stackframes","stringifiedStack","map","sf","toString","join","state","store","JSON","stringify","getState","stack","ImageType","generatePdfUsingWorker","pageWidth","pageHeight","topBottomMargin","leftRightMargin","verticalSpace","horizontalSpace","includeBleedingArea","cutMarksForScissors","cutMarksForGuillotine","cutMarksInMarginArea","cutMarksOnFrontSideOnly","Worker","Promise","reject","worker","addEventListener","event","postMessage","e","loadImage","img","Image","onload","onerror","src","prepareImageToDrawSpace","context","imageToDraw","ptpmm","save","translate","rotate","ax","ay","crop","rect","clip","fixWidthAndHeightInSvg","doc","XmlDocument","attr","viewBox","split","btoa","compressed","PNGGenerator","constructor","tasksQueue","this","push","generateCard","cardSetData","cardIdx","isBack","cardsetFolder","offscreenCanvas","calculatedWidth","round","calculatedHeight","getContext","fillStyle","fillRect","stopped","length","task","shift","SVG_PATH","scale","color","p","Path2D","fill","restore","IMAGE","SVG","undefined","cx","cy","dim","svgData","atob","image","drawImage","BLOCK_START","BLOCK_END","subType","delay","dataUrl","toDataURL","slice","file","padStart","generateGame","gameId","zip","cardsetsList","cardsets","cardsetInfo","generateCardset","cardsetId","parse","folder","cardsAllIds","entries","isTwoSided","generatePngUsingWorker","pngGenerator","JSZip","generateAsync","blob","createObjectURL","getImageAttribution","metadata","meta","source","attribution","retrieveGameAttributions","attributions","Set","fields","cardFields","fieldInfo","replace","add","start","value","indexOf","end","Array","from","saveTokens","localStorage","setItem","saveUsername","username","saveAccessToken","cleanTokens","removeItem","getTokenFromStorage","getItem","getRefreshTokenFromStorage","getUsernameFromStorage","loadFontsUsedInPlaceholders","fontsToLoad","fieldsAllIds","field","fontFamily","fontToLoad","fontVariant","WebFont","load","active","inactive","webFontsLoadPromise","google","families","putError","putInfo","putProgress","hideProgress","handleMessageDisplay","getToken","handleLoginRequest","handleLoginSuccess","logoutToken","logoutRefreshToken","handleLogoutRequest","handleSignupRequest","handleInitRequest","authorizedGetRequest","authorizedPostRequest","authorizedDeleteRequest","authorizedPostFormDataRequest","authorizedPutRequest","handleGameCreateRequest","handleGameDeleteRequest","handleGameRenameRequest","handleGameListRequest","handleGameSelectRequest","handleGameCreatePdfRequest","handleGameCreatePngRequest","handleGameGetAttributionsRequest","handleCardSetCreateRequest","handleCardSetDeleteRequest","handleCardSetRenameRequest","handleCardSetSelectRequest","handleCardSetUploadImage","handleCardSetDeleteImage","handleCardSetFitChange","handleCardSetChangeImage","handleCardSetChange","handleImageListRequest","rootSaga","call","messageId","action","validateToken","jwtDecode","exp","Date","getTime","withErrorIfMissing","getFreshToken","newToken","gamename","newName","allIds","games","g","byId","reduce","obj","progressId","select","cardsetname","version","cardSetId","loadImageInfo","naturalWidth","naturalHeight","err","processData","processedData","plId","placeholdersAllIds","Object","keys","placeholders","placeholder","images","global","texts","snappingDistance","cardsById","info","parsedData","ActionCreators","clearHistory","formData","FormData","set","append","progress","lengthComputable","loaded","total","abort","imageId","adjustSvg","preserveAspectRatio","walkChildren","node","children","child","cardset","present","activeFieldId","imageResp","svg","cardsToFix","applyToAllCards","f","closeHandler","preventDefault","returnValue","allowWindowClose","removeEventListener","encodeURIComponent","game","all","takeEvery","takeLatest","DefaultMessageState","messages","DefaultAuthState","isAuthenticated","user","DefaultSignUpState","signingup","DefaultGameState","activity","DefaultCardSetsState","DefaultCardSetState","activeCardId","textSettings","fontSize","lineHeight","activeSidebar","DefaultImageState","resizeFields","widthRatio","heightRatio","newFields","rotateRight","newCx","newCy","PI","rotateLeft","undoableCardset","undoable","assign","card","concat","isOnBack","newCard","index","count","fieldIndex","splice","locked","unshift","unclickable","maintainAspectRatio","resizeContent","fitImageWidth","fitImageHeight","min","max","oldZoom","nx","ny","ratio","testFieldInfo","textInfo","Measurements","Details","Text","ignoreInitialState","undoType","redoType","groupBy","startsWith","reducers","combineReducers","find","m","auth","signup","AboutPage","Component","render","FieldController","React","props","super","cDiv","panDiv","zoomDiv","resizeDiv","rotateDiv","originalBodyCursor","handleBrowserDragStart","stopPropagation","handleMouseDown","handleDragStart","handleMouseMove","handleMouseUp","handleTouchStart","touches","changedTouches","handleTouchMove","passive","handleTouchEnd","co","current","cursor","setState","startX","clientX","startY","clientY","handleDragMove","ctrlKey","disableSnapping","isLocked","ppmm","onDrag","handleComplete","isTouchEvent","activatedUsingTouch","handlePanMouseDown","handlePanStart","handlePanMouseMove","handlePanMouseUp","handlePanTouchStart","handlePanTouchMove","handlePanTouchEnd","panIcon","handlePanMove","onPan","handlePanComplete","handleZoomMouseDown","handleZoomStart","handleZoomMouseMove","handleZoomMouseUp","handleZoomTouchStart","handleZoomTouchMove","handleZoomTouchEnd","zoomIcon","handleZoomMove","onZoom","dx","dy","z","abs","newZoom","handleZoomComplete","handleResizeMouseDown","handleResizeStart","handleResizeMouseMove","handleResizeMouseUp","handleResizeTouchStart","handleResizeTouchMove","handleResizeTouchEnd","resizeIcon","handleResizeMove","onResize","newWidth","newHeight","handleResizeComplete","handleRotateMouseDown","handleRotateStart","handleRotateMouseMove","handleRotateMouseUp","handleRotateTouchStart","handleRotateTouchMove","handleRotateTouchEnd","rotateIcon","getBoundingClientRect","left","clientWidth","top","clientHeight","originalAngle","atan2","handleRotateMove","onRotate","newAngle","handleRotateComplete","createRef","componentDidMount","isActive","isActiveField","isUnclickable","ref","onDragStart","className","fieldcontroller","fieldcontrolleractivefield","fieldcontrolleractive","touchactivated","position","transform","pointerEvents","alt","controller","right","bottom","connect","ImageField","PureComponent","handleDrag","cardOnly","dispatch","handlePan","cardSetChangeFieldPan","handleZoom","cardSetChangeFieldZoom","handleResize","handleRotate","wasMoved","handleDragOver","dragIsOver","handleDragLeave","handleDrop","dataTransfer","getData","imagefilesPos","ii","substr","imageUrl","cardWidth","cardHeight","overflow","over","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","onDragOver","onDragLeave","onDrop","opacity","emptyImageImage","ContentEditable","editDiv","currentText","currentAlign","currentColor","currentFontFamily","currentFontVariant","currentFontSize","currentLineHeight","timeout","handleStart","handleMove","focus","onFocus","textValue","range","createRange","selectNodeContents","collapse","selection","getSelection","removeAllRanges","addRange","updateContent","timeoutInMiliseconds","innerHTML","imgUrlIdx","clearTimeout","cardSetChangeText","handleBlur","handleInput","handlePaste","clipboardData","s","execCommand","shouldComponentUpdate","nextProps","componentDidUpdate","isItalic","fontWeight","parseInt","content","contentEditable","onBlur","onInput","onPaste","textAlign","DEFAULT_FONT","fontStyle","outline","overflowWrap","dangerouslySetInnerHTML","__html","TextField","textFieldInfo","zIndex","emptyTextImage","Card","dimensions","handleFieldDeselect","target","getAttribute","fieldsIds","isActiveCard","widthWithBleeds","BLEED_WIDTH","heightWithBleeds","client","contentRect","measureRef","key","border","borderRadius","title","EditableTitle","titleIsEdited","handleClick","handleChange","onChange","input","onClick","autoFocus","Character","KawaiiMessage","character","mood","marginTop","marginBottom","padding","backgroundColor","grid","Ghost","size","Browser","marginLeft","Loader","fixed","small","loader","relative","SidebarDetails","handleRotateRightClick","handleRotateLeftClick","handleCloneCardClick","activeCard","handleRemoveCardClick","handleCountChange","handleUndoClick","handleRedoClick","visible","view","disabled","SidebarGeneratePng","handleDpiChange","handleGenerate","activeCardset","isCreatingPng","htmlFor","step","PDFGenerator","handleGeneratePdfClick","gameCreatePdfRequest","handlePageWidthChange","parseFloat","handlePageHeightChange","handleTopBottomMarginChange","handleLeftRightMarginChange","handleVerticalSpaceChange","handleHorizontalSpaceChange","handleIncludeBleedingAreaChange","checked","handleCutMarksForScissors","handleCutMarksForGuillotine","handleCutMarksInMarginArea","handleCutMarksOnFrontSideOnly","isCreatingPdf","withHelp","SidebarGeneratePdf","activeCardSetId","ColorButton","displayColorPicker","handleClose","disableAlpha","SidebarImage","handleAddImageClick","changeImage","activeFieldInfo","handleRemoveImageFromFieldClick","handleRemoveClick","handleNameChange","trim","handleFilterChange","handleImageSelect","imageName","handleRaise","handleLower","handleLockField","handleUnlockField","handleFitOptionChange","cardSetChangeFitForActiveField","handleOptionChange","handleColorChange","hex","handleRemoveColorClick","handleApplyToAllCardChange","handleChangeCrop","im","data-width","data-height","registerPlugin","FilePondPluginFileValidateType","SidebarImportExport","prepareImagePaths","activeGame","ending","md5","preparedImages","fieldsByCard","endsWith","handleExportJson","json","Blob","handleExportCsv","preparedFields","csvData","header","usedNames","dataRow","written","fieldIndo","csv","Papa","unparse","handleProcess","fieldName","reader","FileReader","readAsText","result","isGlobal","newCardsAllIds","newCardsById","row","cardSetImportData","handleRevert","uniqueFileId","server","process","revert","acceptedFileTypes","SidebarMeasurements","handlePrevField","activeField","prevField","idx","handleNextField","nextField","handleWidthChange","handleHeightChange","handleXChange","handleYChange","handleAngleChange","handleChangeUnclickable","SidebarSettings","cardSetChangeWidth","cardSetChangeHeight","handleIsTwoSidedChange","handleSnappingDistance","FontOptionComponent","isDisabled","Option","webfontsThumbs","options","webfonts","sort","fi","label","FontSelector","getFontStringForLoad","family","variant","stringForLoad","activeFontVariant","wf","cardSetChangeActiveTextFieldFontFamilyAndVariant","handleFontVariantChange","selectedOption","activeFont","handleFontSizeChange","handleLineHeightChange","selectedFontFamily","fontVariantOptions","fv","selectedFontVariant","activeFontSize","components","activeLineHeight","SidebarText","handleAddTextClick","handleSetTextAlignLeft","getRangeAt","rangeCount","collapsed","handleSetTextAlignCenter","handleSetTextAlignRight","handleSetTextBold","handleSetTextItalic","cardSetChangeActiveTextFieldColor","FilePondPluginFileValidateSize","SidebarUpload","CancelToken","cardSetUploadImage","cancel","cardSetDeleteImage","visibility","allowMultiple","allowFileSizeValidation","maxFileSize","SIDEBARS","Settings","icon","component","Upload","ImportExport","Png","Pdf","Sidebar","handleSidebar","sidebar","controls","sb","hidden","CardSet","keyDown","shiftKey","handleCreateCardClick","handleClickOutsideOfCard","handleCardSetNameChange","activeCardSet","cardSetRenameRequest","componentWillUnmount","cardsetview","gridTemplateColumns","createCard","CardSetPage","match","params","to","ChangelogPage","evt","reason","ErrorBoundary","hasError","componentDidCatch","ConfirmedDelete","deleteClicked","handleRemove","handleYes","onDelete","handleNo","question","button","answer","CardSets","cardSetName","handleGameNameChange","gameRenameRequest","handleCreateCardSetClick","handleCardSetDelete","cardSetDeleteRequest","handleGetAttributions","b","cardsetItems","GamePage","Login","password","handleUsernameChange","handlePasswordChange","handleSubmit","onLogin","onLoginFailure","onSubmit","LoginPage","loginRequest","msg","FeatureList","features","screenshot","Games","gameName","handleCreateGameClick","gameCreateRequest","handleGameDelete","gameDeleteRequest","gameItems","Main","getActiveGame","getActiveCardSet","Logout","onLogout","Navbar","menu","NotFoundPage","SignUp","passwordRepeat","handlePasswordRepeatChange","onSignUp","SignUpPage","signupRequest","App","isIE","exact","path","HelpPage","getFullYear","Boolean","hostname","sagaMiddleware","createSagaMiddleware","createStore","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","run","createAppStore","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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,IAChCiF,YRn1BkC,6BQm1BKjF,IACvCiF,YRn1BiC,4BQm1BKjF,IACtCiF,YRn1B0B,qBQm1BKjF,IAC/BiF,YRn1B2B,sBQm1BKjF,IAChCiF,YRn1BiC,4BQm1BKjF,IACtCiF,YRn1B8B,yBQm1BKjF,IACnCiF,YRn1B+B,0BQm1BKjF,IACpCiF,YRn1BwC,mCQm1BKjF,IAC7CiF,YRn1BmC,8BQm1BKjF,IACxCiF,YRn1BkC,6BQm1BKjF,IACvCiF,YRn1ByC,oCQm1BKjF,IAC9CiF,YRn1BkC,uBQm1BKjF,IACvCiF,YRn1B4C,uCQm1BKjF,IACjDiF,YRn1BiC,4BQm1BKjF,IACtCiF,YRn1BmC,8BQm1BKjF,IACxCiF,YRn1B2C,sCQm1BKjF,IAChDiF,YRn1B4C,uCQm1BKjF,IACjDiF,YRn1BmD,8CQm1BKjF,IACxDiF,YRn1B4B,uBQm1BKjF,IACjCiF,YRn1B6B,wBQm1BKjF,IAClCiF,YRn1BmC,8BQm1BKjF,IACxCiF,YRn1BwC,mCQm1BKjF,IAC7CiF,YRn1BqC,gCQm1BKjF,IAC1CiF,YRn1BgC,2BQm1BKjF,IACrCiF,YRn1BiC,4BQm1BKjF,IACtCiF,YRn1BiC,4BQm1BKjF,IACtCiF,YRn1BkC,6BQm1BKjF,IACvCiF,YRn1B8C,yCQm1BKjF,IACnDiF,YRn1B8C,yCQm1BKjF,IACnDiF,YRn1BoD,+CQm1BKjF,IACzDiF,YRn1BqD,gDQm1BKjF,IAC1DiF,YRl1BJ,2DQk1ByEjF,IACrEiF,YRl1BkD,6CQk1BKjF,IACvDiF,YRl1BoD,+CQk1BKjF,IACzDiF,YRl1B2B,sBQk1BKjF,IAChCiF,YRl1B4B,uBQk1BKjF,IACjCiF,YR70BwB,mBQ60BKjF,IAC7BiF,YRh4B2B,sBQg4BKjF,IAChCiF,YR10BoB,eQ00BKjF,IACzBiF,YR10BoB,eQ00BKjF,IAEzBiF,YR30B0B,qBQ20BKhF,IAE/BgF,YR56BoB,eQ46BKvG,MApE1B,wCC5wBA,MAQMwG,GAAoC,CAC7CC,SAAU,IAQDC,GAA8B,CACvCC,qBAAiBxM,EACjByM,KAAM,IAOGC,GAAkC,CAC3CC,WAAW,GAWFC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","file":"static/js/main.902da2f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableTitle_input__3HvKU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fontFamily\":\"FontSelector_fontFamily__YSuby\",\"fontVariant\":\"FontSelector_fontVariant__W_QVD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarText_view___yMYk\",\"disabled\":\"SidebarText_disabled__20GB3\"};","module.exports = __webpack_public_path__ + \"static/media/image.60f0926c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"over\":\"ImageField_over__2Iqde\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ContentEditable_content__3c8k1\"};","module.exports = __webpack_public_path__ + \"static/media/text.f7f9443c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarGeneratePng_view__30wAM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarGeneratePdf_view__2h68R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarMeasurements_view__YUCMn\",\"disabled\":\"SidebarMeasurements_disabled__1XmQO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarSettings_view__DE6Zn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarUpload_view__3RXxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsets\":\"CardSets_cardsets__36tA6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"features\":\"FeatureList_features__3SpsY\"};","module.exports = __webpack_public_path__ + \"static/media/screenshot.ec7615c5.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldcontroller\":\"FieldController_fieldcontroller__2AmlX\",\"fieldcontrolleractivefield\":\"FieldController_fieldcontrolleractivefield__2dvlw\",\"fieldcontrolleractive\":\"FieldController_fieldcontrolleractive__1s5_-\",\"controller\":\"FieldController_controller__1KI4G\",\"touchactivated\":\"FieldController_touchactivated__3GbbR\"};","import { CancelToken } from 'axios';\nimport { Dispatch as ReduxDispatch } from 'redux';\nimport shortid from 'shortid';\n\nimport {\n    CardSetsCollection,\n    CardType,\n    CardsCollection,\n    Credentials,\n    GamesCollection,\n    IdsArray,\n    ImageArray,\n    ImageInfo,\n    MessageType,\n    PlaceholdersCollection,\n    PlaceholdersImageInfoByCardCollection,\n    PlaceholdersTextInfoByCardCollection,\n    TextInfo,\n    FieldInfoByCardCollection,\n} from './types';\n\nexport const INIT_REQUEST = 'INIT_REQUEST';\nexport const MESSAGE_DISPLAY = 'MESSAGE_DISPLAY';\nexport const MESSAGE_HIDE = 'MESSAGE_HIDE';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const SIGNUP_REQUEST = 'SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAILURE = 'SIGNUP_FAILURE';\nexport const GAME_CREATE_REQUEST = 'GAME_CREATE_REQUEST';\nexport const GAME_CREATE_SUCCESS = 'GAME_CREATE_SUCCESS';\nexport const GAME_DELETE_REQUEST = 'GAME_DELETE_REQUEST';\nexport const GAME_RENAME_REQUEST = 'GAME_RENAME_REQUEST';\nexport const GAME_LIST_SUCCESS = 'GAME_LIST_SUCCESS';\nexport const GAME_LIST_REQUEST = 'GAME_LIST_REQUEST';\nexport const GAME_LIST_FAILURE = 'GAME_LIST_FAILURE';\nexport const GAME_LIST_RESET = 'GAME_LIST_RESET';\nexport const GAME_SELECT_REQUEST = 'GAME_SELECT_REQUEST';\nexport const GAME_SELECT_SUCCESS = 'GAME_SELECT_SUCCESS';\nexport const GAME_SELECT_FAILURE = 'GAME_SELECT_FAILURE';\nexport const GAME_CREATE_PDF_REQUEST = 'GAME_CREATE_PDF_REQUEST';\nexport const GAME_CREATE_PDF_SUCCESS = 'GAME_CREATE_PDF_SUCCESS';\nexport const GAME_CREATE_PDF_FAILURE = 'GAME_CREATE_PDF_FAILURE';\nexport const GAME_CREATE_PNG_REQUEST = 'GAME_CREATE_PNG_REQUEST';\nexport const GAME_CREATE_PNG_SUCCESS = 'GAME_CREATE_PNG_SUCCESS';\nexport const GAME_CREATE_PNG_FAILURE = 'GAME_CREATE_PNG_FAILURE';\nexport const GAME_GET_ATTRIBUTIONS_REQUEST = 'GAME_GET_ATTRIBUTIONS_REQUEST';\nexport const GAME_GET_ATTRIBUTIONS_SUCCESS = 'GAME_GET_ATTRIBUTIONS_SUCCESS';\nexport const GAME_GET_ATTRIBUTIONS_FAILURE = 'GAME_GET_ATTRIBUTIONS_FAILURE';\nexport const CARDSETS_SELECT_SUCCESS = 'CARDSETS_SELECT_SUCCESS';\nexport const CARDSET_CREATE_REQUEST = 'CARDSET_CREATE_REQUEST';\nexport const CARDSET_CREATE_SUCCESS = 'CARDSET_CREATE_SUCCESS';\nexport const CARDSET_CREATE_FAILURE = 'CARDSET_CREATE_FAILURE';\nexport const CARDSET_DELETE_REQUEST = 'CARDSET_DELETE_REQUEST';\nexport const CARDSET_RENAME_REQUEST = 'CARDSET_RENAME_REQUEST';\nexport const CARDSET_IMPORT_DATA = 'CARDSET_IMPORT_DATA';\nexport const CARDSET_LIST_SUCCESS = 'CARDSET_LIST_SUCCESS';\nexport const CARDSET_LIST_REQUEST = 'CARDSET_LIST_REQUEST';\nexport const CARDSET_LIST_FAILURE = 'CARDSET_LIST_FAILURE';\nexport const CARDSET_LIST_RESET = 'CARDSET_LIST_RESET';\nexport const CARDSET_SELECT_REQUEST = 'CARDSET_SELECT_REQUEST';\nexport const CARDSET_SELECT_SUCCESS = 'CARDSET_SELECT_SUCCESS';\nexport const CARDSET_CREATE_CARD = 'CARDSET_CREATE_CARD';\nexport const CARDSET_ROTATE_CARDS_RIGHT = 'CARDSET_ROTATE_CARDS_RIGHT';\nexport const CARDSET_ROTATE_CARDS_LEFT = 'CARDSET_ROTATE_CARDS_LEFT';\nexport const CARDSET_CLONE_CARD = 'CARDSET_CLONE_CARD';\nexport const CARDSET_REMOVE_CARD = 'CARDSET_REMOVE_CARD';\nexport const CARDSET_UPDATE_CARD_COUNT = 'CARDSET_UPDATE_CARD_COUNT';\nexport const CARDSET_ADD_TEXT_FIELD = 'CARDSET_ADD_TEXT_FIELD';\nexport const CARDSET_ADD_IMAGE_FIELD = 'CARDSET_ADD_IMAGE_FIELD';\nexport const CARDSET_CHANGE_ACTIVE_FIELD_NAME = 'CARDSET_CHANGE_ACTIVE_FIELD_NAME';\nexport const CARDSET_REMOVE_ACTIVE_FIELD = 'CARDSET_REMOVE_ACTIVE_FIELD';\nexport const CARDSET_RAISE_ACTIVE_FIELD = 'CARDSET_RAISE_ACTIVE_FIELD';\nexport const CARDSET_RAISE_ACTIVE_FIELD_TO_TOP = 'CARDSET_RAISE_ACTIVE_FIELD_TO_TOP';\nexport const CARDSET_LOWER_ACTIVE_FIELD = 'CARDSET_LOWER_ACTIVE';\nexport const CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM = 'CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM';\nexport const CARDSET_LOCK_ACTIVE_FIELD = 'CARDSET_LOCK_ACTIVE_FIELD';\nexport const CARDSET_UNLOCK_ACTIVE_FIELD = 'CARDSET_UNLOCK_ACTIVE_FIELD';\nexport const CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD = 'CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD';\nexport const CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD = 'CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD';\nexport const CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD = 'CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD';\nexport const CARDSET_CHANGE_WIDTH = 'CARDSET_CHANGE_WIDTH';\nexport const CARDSET_CHANGE_HEIGHT = 'CARDSET_CHANGE_HEIGHT';\nexport const CARDSET_CHANGE_IS_TWO_SIDED = 'CARDSET_CHANGE_IS_TWO_SIDED';\nexport const CARDSET_CHANGE_SNAPPING_DISTANCE = 'CARDSET_CHANGE_SNAPPING_DISTANCE';\nexport const CARDSET_CHANGE_FIELD_POSITION = 'CARDSET_CHANGE_FIELD_POSITION';\nexport const CARDSET_CHANGE_FIELD_PAN = 'CARDSET_CHANGE_FIELD_PAN';\nexport const CARDSET_CHANGE_FIELD_ZOOM = 'CARDSET_CHANGE_FIELD_ZOOM';\nexport const CARDSET_CHANGE_FIELD_SIZE = 'CARDSET_CHANGE_FIELD_SIZE';\nexport const CARDSET_CHANGE_FIELD_ANGLE = 'CARDSET_CHANGE_FIELD_ANGLE';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT =\n    'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE';\nexport const CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT = 'CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT';\nexport const CARDSET_CHANGE_TEXT = 'CARDSET_CHANGE_TEXT';\nexport const CARDSET_CHANGE_IMAGE = 'CARDSET_CHANGE_IMAGE';\nexport const CARDSET_CHANGE_IMAGE_BASE64 = 'CARDSET_CHANGE_IMAGE_BASE64';\nexport const CARDSET_SET_ACTIVE_CARD_AND_FIELD = 'CARDSET_SET_ACTIVE_CARD_AND_FIELD';\nexport const CARDSET_CHANGE_APPLY_TO_ALLCARDS = 'CARDSET_CHANGE_APPLY_TO_ALLCARDS';\nexport const CARDSET_SELECT_FAILURE = 'CARDSET_SELECT_FAILURE';\nexport const CARDSET_SET_SIDEBAR_STATE = 'CARDSET_SET_SIDEBAR_STATE';\nexport const CARDSET_SET_ZOOM = 'CARDSET_SET_ZOOM';\nexport const CARDSET_UPLOAD_IMAGE = 'CARDSET_UPLOAD_IMAGE';\nexport const CARDSET_UPLOAD_IMAGE_SUCCESS = 'CARDSET_UPLOAD_IMAGE_SUCCESS';\nexport const CARDSET_UPLOAD_IMAGE_FAILURE = 'CARDSET_UPLOAD_IMAGE_FAILURE';\nexport const CARDSET_DELETE_IMAGE = 'CARDSET_DELETE_IMAGE';\nexport const CARDSET_UNDO = 'CARDSET_UNDO';\nexport const CARDSET_REDO = 'CARDSET_REDO';\nexport const IMAGE_LIST_REQUEST = 'IMAGE_LIST_REQUEST';\nexport const IMAGE_LIST_SUCCESS = 'IMAGE_LIST_SUCCESS';\nexport const IMAGE_LIST_FAILURE = 'IMAGE_LIST_FAILURE';\n\n// Actions\n\nexport interface InitAction {\n    type: typeof INIT_REQUEST;\n}\n\nexport interface MessageDisplay {\n    type: typeof MESSAGE_DISPLAY;\n    message: MessageType;\n}\nexport type MessageAction = MessageDisplay | { type: typeof MESSAGE_HIDE; messageId: string };\n\nexport interface LoginRequest {\n    type: typeof LOGIN_REQUEST;\n    creds: Credentials;\n}\nexport type LoginAction =\n    | LoginRequest\n    | { type: typeof LOGIN_SUCCESS; username: string }\n    | { type: typeof LOGIN_FAILURE; message: string }\n    | { type: typeof LOGOUT_REQUEST }\n    | { type: typeof LOGOUT_FAILURE }\n    | { type: typeof LOGOUT_SUCCESS };\n\nexport interface SignUpRequest {\n    type: typeof SIGNUP_REQUEST;\n    creds: Credentials;\n}\nexport type SignUpAction = SignUpRequest | { type: typeof SIGNUP_SUCCESS } | { type: typeof SIGNUP_FAILURE };\n\nexport interface GameCreateRequest {\n    type: typeof GAME_CREATE_REQUEST;\n    gamename: string;\n}\nexport type GameCreateAction = GameCreateRequest | { type: typeof GAME_CREATE_SUCCESS };\n\nexport interface GameDeleteRequest {\n    type: typeof GAME_DELETE_REQUEST;\n    gameId: string;\n}\n\nexport type GameDeleteAction = GameDeleteRequest;\n\nexport interface GameRenameRequest {\n    type: typeof GAME_RENAME_REQUEST;\n    gameId: string;\n    newName: string;\n}\n\nexport type GameRenameAction = GameRenameRequest;\n\nexport interface GameListSuccess {\n    type: typeof GAME_LIST_SUCCESS;\n    byId: GamesCollection;\n    allIds: IdsArray;\n}\nexport type GameListAction =\n    | { type: typeof GAME_LIST_REQUEST }\n    | GameListSuccess\n    | { type: typeof GAME_LIST_FAILURE }\n    | { type: typeof GAME_LIST_RESET };\n\nexport interface GameSelectRequest {\n    type: typeof GAME_SELECT_REQUEST;\n    id: string;\n    updateCardSets: boolean;\n}\nexport type GameSelectAction =\n    | GameSelectRequest\n    | { type: typeof GAME_SELECT_SUCCESS; id: string }\n    | { type: typeof GAME_SELECT_FAILURE };\n\nexport interface GameCreatePdfRequest {\n    type: typeof GAME_CREATE_PDF_REQUEST;\n    collectionType: string;\n    collectionId: string;\n    pageWidth: number;\n    pageHeight: number;\n    topBottomMargin: number;\n    leftRightMargin: number;\n    verticalSpace: number;\n    horizontalSpace: number;\n    includeBleedingArea: boolean;\n    cutMarksForScissors: boolean;\n    cutMarksForGuillotine: boolean;\n    cutMarksInMarginArea: boolean;\n    cutMarksOnFrontSideOnly: boolean;\n}\n\nexport type GameCreatePdfAction =\n    | GameCreatePdfRequest\n    | { type: typeof GAME_CREATE_PDF_SUCCESS }\n    | { type: typeof GAME_CREATE_PDF_FAILURE };\n\nexport interface GameCreatePngRequest {\n    type: typeof GAME_CREATE_PNG_REQUEST;\n    dpi: number;\n    collectionType: string;\n    collectionId: string;\n}\n\nexport type GameCreatePngAction =\n    | GameCreatePngRequest\n    | { type: typeof GAME_CREATE_PNG_SUCCESS }\n    | { type: typeof GAME_CREATE_PNG_FAILURE };\n\nexport interface GameGetAttributionsRequest {\n    type: typeof GAME_GET_ATTRIBUTIONS_REQUEST;\n}\n\nexport type GameGetAttributionsAction =\n    | GameGetAttributionsRequest\n    | { type: typeof GAME_GET_ATTRIBUTIONS_SUCCESS; attributions: string[] }\n    | { type: typeof GAME_GET_ATTRIBUTIONS_FAILURE };\n\nexport type GameAction =\n    | GameCreateAction\n    | GameDeleteAction\n    | GameRenameAction\n    | GameListAction\n    | GameSelectAction\n    | GameCreatePdfAction\n    | GameCreatePngAction\n    | GameGetAttributionsAction;\n\nexport interface CardSetCreateRequest {\n    type: typeof CARDSET_CREATE_REQUEST;\n    cardsetname: string;\n    width: number;\n    height: number;\n    gameId: string;\n}\nexport type CardSetCreateAction =\n    | CardSetCreateRequest\n    | { type: typeof CARDSET_CREATE_SUCCESS }\n    | { type: typeof CARDSET_CREATE_FAILURE };\n\nexport interface CardSetDeleteRequest {\n    type: typeof CARDSET_DELETE_REQUEST;\n    cardSetId: string;\n}\n\nexport interface CardSetRenameRequest {\n    type: typeof CARDSET_RENAME_REQUEST;\n    cardSetId: string;\n    newName: string;\n}\n\nexport interface CardSetsSelectSuccess {\n    type: typeof CARDSETS_SELECT_SUCCESS;\n    id: string;\n    name: string;\n}\n\nexport type CardSetsAction =\n    | CardSetsSelectSuccess\n    | CardSetCreateAction\n    | CardSetDeleteRequest\n    | CardSetRenameRequest\n    | CardSetListAction;\n\nexport interface CardSetImportData {\n    type: typeof CARDSET_IMPORT_DATA;\n    data: object;\n}\n\nexport interface CardSetListSuccess {\n    type: typeof CARDSET_LIST_SUCCESS;\n    byId: CardSetsCollection;\n    allIds: IdsArray;\n}\nexport type CardSetListAction =\n    | { type: typeof CARDSET_LIST_REQUEST }\n    | CardSetListSuccess\n    | { type: typeof CARDSET_LIST_FAILURE }\n    | { type: typeof CARDSET_LIST_RESET };\n\nexport interface CardSetSelectRequest {\n    type: typeof CARDSET_SELECT_REQUEST;\n    id: string;\n}\n\nexport interface CardSetSelectSuccessDataBase {\n    version: string;\n}\n\nexport interface CardSetSelectSuccessDataV2 {\n    version: 2;\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    snappingDistance: number;\n    cardsAllIds: IdsArray;\n    cardsById: CardsCollection;\n    placeholders: PlaceholdersCollection;\n    placeholdersAllIds: IdsArray;\n    texts: PlaceholdersTextInfoByCardCollection;\n    images: PlaceholdersImageInfoByCardCollection;\n    zoom: number;\n}\n\nexport interface CardSetSelectSuccessDataV3 {\n    version: 3;\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    snappingDistance: number;\n    cardsAllIds: IdsArray;\n    cardsById: CardsCollection;\n    fields: FieldInfoByCardCollection;\n    fieldsAllIds: IdsArray;\n    zoom: number;\n}\n\nexport type CardSetSelectSuccessData = CardSetSelectSuccessDataV2 | CardSetSelectSuccessDataV3;\n\nexport interface CardSetSelectSuccess {\n    type: typeof CARDSET_SELECT_SUCCESS;\n    id: string;\n    name: string;\n    data: CardSetSelectSuccessDataV3;\n    gameId: string;\n}\nexport interface CardSetCreateCard {\n    type: typeof CARDSET_CREATE_CARD;\n    card: CardType;\n}\nexport interface CardSetRotateCardsRight {\n    type: typeof CARDSET_ROTATE_CARDS_RIGHT;\n}\nexport interface CardSetRotateCardsLeft {\n    type: typeof CARDSET_ROTATE_CARDS_LEFT;\n}\nexport interface CardSetCloneCard {\n    type: typeof CARDSET_CLONE_CARD;\n    card: CardType;\n}\nexport interface CardSetRemoveCard {\n    type: typeof CARDSET_REMOVE_CARD;\n    card: CardType;\n}\nexport interface CardSetUpdateCardCount {\n    type: typeof CARDSET_UPDATE_CARD_COUNT;\n    card: CardType;\n    count: number;\n}\nexport interface CardSetAddTextField {\n    type: typeof CARDSET_ADD_TEXT_FIELD;\n}\nexport interface CardSetAddImageField {\n    type: typeof CARDSET_ADD_IMAGE_FIELD;\n}\nexport interface CardSetChangeActiveFieldName {\n    type: typeof CARDSET_CHANGE_ACTIVE_FIELD_NAME;\n    name: string;\n}\nexport interface CardSetRemoveActiveField {\n    type: typeof CARDSET_REMOVE_ACTIVE_FIELD;\n}\nexport interface CardSetRaiseActiveField {\n    type: typeof CARDSET_RAISE_ACTIVE_FIELD;\n}\nexport interface CardSetRaiseActiveFieldToTop {\n    type: typeof CARDSET_RAISE_ACTIVE_FIELD_TO_TOP;\n}\nexport interface CardSetLowerActiveField {\n    type: typeof CARDSET_LOWER_ACTIVE_FIELD;\n}\nexport interface CardSetLowerActiveFieldToBottom {\n    type: typeof CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM;\n}\nexport interface CardSetLockActiveField {\n    type: typeof CARDSET_LOCK_ACTIVE_FIELD;\n}\nexport interface CardSetUnlockActiveField {\n    type: typeof CARDSET_UNLOCK_ACTIVE_FIELD;\n}\nexport interface CardSetChangeFitForActiveField {\n    type: typeof CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD;\n    fit: string;\n}\nexport interface CardSetChangeCropForActiveField {\n    type: typeof CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD;\n    crop: boolean;\n}\n\nexport interface CardSetChangeUnclickableForActiveField {\n    type: typeof CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD;\n    unclickable: boolean;\n}\n\nexport interface CardSetChangeWidth {\n    type: typeof CARDSET_CHANGE_WIDTH;\n    width: number;\n    maintainAspectRatio: boolean;\n    resizeContent: boolean;\n}\n\nexport interface CardSetChangeHeight {\n    type: typeof CARDSET_CHANGE_HEIGHT;\n    height: number;\n    maintainAspectRatio: boolean;\n    resizeContent: boolean;\n}\n\nexport interface CardSetChangeIsTwoSided {\n    type: typeof CARDSET_CHANGE_IS_TWO_SIDED;\n    isTwoSided: boolean;\n}\n\nexport interface CardSetChangeSnappingDistance {\n    type: typeof CARDSET_CHANGE_SNAPPING_DISTANCE;\n    snappingDistance: number;\n}\n\nexport interface CardSetChangeFieldPosition {\n    type: typeof CARDSET_CHANGE_FIELD_POSITION;\n    cardId?: string;\n    fieldId: string;\n    x: number;\n    y: number;\n    group: string;\n}\n\nexport interface CardSetChangeFieldPan {\n    type: typeof CARDSET_CHANGE_FIELD_PAN;\n    cardId?: string;\n    fieldId: string;\n    cx: number;\n    cy: number;\n    group: string;\n}\n\nexport interface CardSetChangeFieldZoom {\n    type: typeof CARDSET_CHANGE_FIELD_ZOOM;\n    cardId?: string;\n    fieldId: string;\n    zoom: number;\n    group: string;\n}\n\nexport interface CardSetChangeFieldSize {\n    type: typeof CARDSET_CHANGE_FIELD_SIZE;\n    cardId?: string;\n    fieldId: string;\n    width: number;\n    height: number;\n    group: string;\n}\nexport interface CardSetChangeFieldAngle {\n    type: typeof CARDSET_CHANGE_FIELD_ANGLE;\n    cardId?: string;\n    fieldId: string;\n    angle: number;\n    group: string;\n}\nexport interface CardSetChangeActiveTextFieldAlign {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN;\n    align: string;\n}\nexport interface CardSetChangeActiveTextFieldColor {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR;\n    color: string;\n}\nexport interface CardSetChangeActiveTextFieldFontFamily {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY;\n    fontFamily: string;\n}\nexport interface CardSetChangeActiveTextFieldFontVariant {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT;\n    fontVariant: string;\n}\nexport interface CardSetChangeActiveTextFieldFontFamilyAndVariant {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT;\n    fontFamily: string;\n    fontVariant: string;\n}\nexport interface CardSetChangeActiveTextFieldFontSize {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE;\n    fontSize: number;\n}\nexport interface CardSetChangeActiveTextFieldLineHeight {\n    type: typeof CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT;\n    lineHeight: number;\n}\nexport interface CardSetChangeText {\n    type: typeof CARDSET_CHANGE_TEXT;\n    cardId: string;\n    fieldId: string;\n    textInfo: TextInfo;\n}\nexport interface CardSetChangeImage {\n    type: typeof CARDSET_CHANGE_IMAGE;\n    cardId: string | undefined;\n    fieldId: string;\n    imageInfo: ImageInfo;\n}\nexport interface CardSetChangeImageBase64 {\n    type: typeof CARDSET_CHANGE_IMAGE_BASE64;\n    cardId: string;\n    fieldId: string;\n    base64?: string;\n}\nexport interface CardSetSetActiveCardAndField {\n    type: typeof CARDSET_SET_ACTIVE_CARD_AND_FIELD;\n    cardId?: string;\n    isBackActive: boolean;\n    fieldId?: string;\n}\nexport interface CardSetChangeApplyToAllCards {\n    type: typeof CARDSET_CHANGE_APPLY_TO_ALLCARDS;\n    applyToAllCards: boolean;\n}\n\nexport enum SidebarState {\n    Settings,\n    Details,\n    Measurements,\n    Image,\n    Text,\n    Upload,\n    ImportExport,\n    Png,\n    Pdf,\n}\nexport interface CardSetSetSidebarState {\n    type: typeof CARDSET_SET_SIDEBAR_STATE;\n    sidebarState: SidebarState | null;\n}\nexport interface CardSetSetZoom {\n    type: typeof CARDSET_SET_ZOOM;\n    zoom: number;\n}\n\nexport type FPLoadCallback = (id: string) => void;\nexport type FPErrorCallback = (error: string) => void;\nexport type FPProgressCallback = (computable: boolean, loaded: number, total: number) => void;\nexport type FPAbortCallback = () => void;\nexport type FPRevertLoadCallback = () => void;\n\nexport interface CardSetUploadImage {\n    type: typeof CARDSET_UPLOAD_IMAGE;\n    gameId: string;\n    file: File;\n    load: FPLoadCallback;\n    error: FPErrorCallback;\n    progress: FPProgressCallback;\n    abort: FPAbortCallback;\n    cancelToken: CancelToken;\n}\n\nexport interface CardSetDeleteImage {\n    type: typeof CARDSET_DELETE_IMAGE;\n    imageId: string;\n    load: FPRevertLoadCallback;\n    error: FPErrorCallback;\n}\n\nexport interface CardSetUndo {\n    type: typeof CARDSET_UNDO;\n}\n\nexport interface CardSetRedo {\n    type: typeof CARDSET_REDO;\n}\n\nexport interface CardSetUploadImageSuccess {\n    type: typeof CARDSET_UPLOAD_IMAGE_SUCCESS;\n}\n\nexport interface CardSetUploadImageFailure {\n    type: typeof CARDSET_UPLOAD_IMAGE_FAILURE;\n}\n\nexport type CardSetSelectAction = CardSetSelectRequest | CardSetSelectSuccess | { type: typeof CARDSET_SELECT_FAILURE };\n\nexport type CardSetModifyAction =\n    | CardSetCreateCard\n    | CardSetRotateCardsRight\n    | CardSetRotateCardsLeft\n    | CardSetCloneCard\n    | CardSetRemoveCard\n    | CardSetUpdateCardCount\n    | CardSetAddTextField\n    | CardSetAddImageField\n    | CardSetChangeActiveFieldName\n    | CardSetRemoveActiveField\n    | CardSetRaiseActiveField\n    | CardSetRaiseActiveFieldToTop\n    | CardSetLowerActiveField\n    | CardSetLowerActiveFieldToBottom\n    | CardSetLockActiveField\n    | CardSetUnlockActiveField\n    | CardSetChangeFitForActiveField\n    | CardSetChangeCropForActiveField\n    | CardSetChangeUnclickableForActiveField\n    | CardSetChangeWidth\n    | CardSetChangeHeight\n    | CardSetChangeIsTwoSided\n    | CardSetChangeSnappingDistance\n    | CardSetChangeFieldPosition\n    | CardSetChangeFieldPan\n    | CardSetChangeFieldZoom\n    | CardSetChangeFieldSize\n    | CardSetChangeFieldAngle\n    | CardSetChangeActiveTextFieldAlign\n    | CardSetChangeActiveTextFieldColor\n    | CardSetChangeActiveTextFieldFontFamily\n    | CardSetChangeActiveTextFieldFontVariant\n    | CardSetChangeActiveTextFieldFontFamilyAndVariant\n    | CardSetChangeActiveTextFieldFontSize\n    | CardSetChangeActiveTextFieldLineHeight\n    | CardSetChangeText\n    | CardSetChangeImage\n    | CardSetChangeImageBase64\n    | CardSetSetActiveCardAndField\n    | CardSetChangeApplyToAllCards\n    | CardSetSetSidebarState\n    | CardSetSetZoom\n    | CardSetUploadImage\n    | CardSetDeleteImage\n    | CardSetUndo\n    | CardSetRedo\n    | CardSetUploadImageSuccess\n    | CardSetUploadImageFailure;\n\nexport type CardSetAction = CardSetImportData | CardSetSelectAction | CardSetModifyAction;\n\nexport interface ImageListRequest {\n    type: typeof IMAGE_LIST_REQUEST;\n    filter: string;\n    location: string;\n}\nexport interface ImageListSuccess {\n    type: typeof IMAGE_LIST_SUCCESS;\n    images: ImageArray;\n}\nexport type ImageListAction = ImageListRequest | ImageListSuccess | { type: typeof IMAGE_LIST_FAILURE };\n\nexport type Action =\n    | InitAction\n    | LoginAction\n    | SignUpAction\n    | GameAction\n    | CardSetsAction\n    | CardSetAction\n    | ImageListAction\n    | MessageAction;\n\nexport type Dispatch = ReduxDispatch<Action>;\n\nexport const messageDisplay = (type: string, text: string, id?: string): MessageDisplay => {\n    return {\n        type: MESSAGE_DISPLAY,\n        message: {\n            id: id || shortid.generate(),\n            type: type,\n            text: text,\n        },\n    };\n};\n\nexport const initRequest = (): InitAction => {\n    return { type: INIT_REQUEST };\n};\n\nexport const loginRequest = (creds: Credentials): LoginAction => {\n    return {\n        type: LOGIN_REQUEST,\n        creds: creds,\n    };\n};\n\nexport const logoutRequest = (): LoginAction => {\n    return {\n        type: LOGOUT_REQUEST,\n    };\n};\n\nexport const signupRequest = (creds: Credentials): SignUpAction => {\n    return {\n        type: SIGNUP_REQUEST,\n        creds: creds,\n    };\n};\n\nexport const gameCreateRequest = (gamename: string): GameAction => {\n    return {\n        type: GAME_CREATE_REQUEST,\n        gamename: gamename,\n    };\n};\n\nexport const gameDeleteRequest = (gameId: string): GameAction => {\n    return {\n        type: GAME_DELETE_REQUEST,\n        gameId,\n    };\n};\n\nexport const gameRenameRequest = (gameId: string, newName: string): GameAction => {\n    return {\n        type: GAME_RENAME_REQUEST,\n        gameId,\n        newName,\n    };\n};\n\nexport const gameListRequest = (): GameAction => {\n    return {\n        type: GAME_LIST_REQUEST,\n    };\n};\n\nexport const gameSelectRequest = (id: string, updateCardSets: boolean): GameAction => {\n    return {\n        type: GAME_SELECT_REQUEST,\n        id,\n        updateCardSets,\n    };\n};\n\nexport const gameCreatePdfRequest = (\n    collectionType: string,\n    collectionId: string,\n    pageWidth: number,\n    pageHeight: number,\n    topBottomMargin: number,\n    leftRightMargin: number,\n    verticalSpace: number,\n    horizontalSpace: number,\n    includeBleedingArea: boolean,\n    cutMarksForScissors: boolean,\n    cutMarksForGuillotine: boolean,\n    cutMarksInMarginArea: boolean,\n    cutMarksOnFrontSideOnly: boolean,\n): GameCreatePdfRequest => {\n    return {\n        type: GAME_CREATE_PDF_REQUEST,\n        collectionType,\n        collectionId,\n        pageWidth,\n        pageHeight,\n        topBottomMargin,\n        leftRightMargin,\n        verticalSpace,\n        horizontalSpace,\n        includeBleedingArea,\n        cutMarksForScissors,\n        cutMarksForGuillotine,\n        cutMarksInMarginArea,\n        cutMarksOnFrontSideOnly,\n    };\n};\n\nexport const gameCreatePngRequest = (\n    dpi: number,\n    collectionType: string,\n    collectionId: string,\n): GameCreatePngRequest => {\n    return {\n        type: GAME_CREATE_PNG_REQUEST,\n        dpi,\n        collectionType,\n        collectionId,\n    };\n};\n\nexport const gameGetAttributionsRequest = (): GameGetAttributionsRequest => {\n    return {\n        type: GAME_GET_ATTRIBUTIONS_REQUEST,\n    };\n};\n\nexport const cardSetCreateRequest = (\n    cardsetname: string,\n    width: number,\n    height: number,\n    gameId: string,\n): CardSetsAction => {\n    return {\n        type: CARDSET_CREATE_REQUEST,\n        cardsetname: cardsetname,\n        width,\n        height,\n        gameId,\n    };\n};\n\nexport const cardSetDeleteRequest = (cardSetId: string): CardSetsAction => {\n    return {\n        type: CARDSET_DELETE_REQUEST,\n        cardSetId,\n    };\n};\n\nexport const cardSetRenameRequest = (cardSetId: string, newName: string): CardSetsAction => {\n    return {\n        type: CARDSET_RENAME_REQUEST,\n        cardSetId,\n        newName,\n    };\n};\n\nexport const cardSetImportData = (data: object): CardSetImportData => {\n    return {\n        type: CARDSET_IMPORT_DATA,\n        data,\n    };\n};\n\nexport const cardSetSelectRequest = (id: string): CardSetSelectRequest => {\n    return {\n        type: CARDSET_SELECT_REQUEST,\n        id,\n    };\n};\n\nexport const cardSetCreateCard = (card: CardType): CardSetCreateCard => {\n    return {\n        type: CARDSET_CREATE_CARD,\n        card,\n    };\n};\n\nexport const cardSetRotateCardsRight = (): CardSetRotateCardsRight => {\n    return {\n        type: CARDSET_ROTATE_CARDS_RIGHT,\n    };\n};\n\nexport const cardSetRotateCardsLeft = (): CardSetRotateCardsLeft => {\n    return {\n        type: CARDSET_ROTATE_CARDS_LEFT,\n    };\n};\n\nexport const cardSetCloneCard = (card: CardType): CardSetCloneCard => {\n    return {\n        type: CARDSET_CLONE_CARD,\n        card,\n    };\n};\n\nexport const cardSetRemoveCard = (card: CardType): CardSetRemoveCard => {\n    return {\n        type: CARDSET_REMOVE_CARD,\n        card,\n    };\n};\n\nexport const cardSetUpdateCardCount = (card: CardType, count: number): CardSetUpdateCardCount => {\n    return {\n        type: CARDSET_UPDATE_CARD_COUNT,\n        card,\n        count,\n    };\n};\n\nexport const cardSetAddTextField = (): CardSetAddTextField => {\n    return {\n        type: CARDSET_ADD_TEXT_FIELD,\n    };\n};\n\nexport const cardSetAddImageField = (): CardSetAddImageField => {\n    return {\n        type: CARDSET_ADD_IMAGE_FIELD,\n    };\n};\n\nexport const cardSetChangeActiveFieldName = (name: string): CardSetChangeActiveFieldName => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_FIELD_NAME,\n        name,\n    };\n};\n\nexport const cardSetRemoveActiveField = (): CardSetRemoveActiveField => {\n    return {\n        type: CARDSET_REMOVE_ACTIVE_FIELD,\n    };\n};\n\nexport const cardSetRaiseActiveField = (): CardSetRaiseActiveField => {\n    return {\n        type: CARDSET_RAISE_ACTIVE_FIELD,\n    };\n};\n\nexport const cardSetRaiseActiveFieldToTop = (): CardSetRaiseActiveFieldToTop => {\n    return {\n        type: CARDSET_RAISE_ACTIVE_FIELD_TO_TOP,\n    };\n};\n\nexport const cardSetLowerActiveField = (): CardSetLowerActiveField => {\n    return {\n        type: CARDSET_LOWER_ACTIVE_FIELD,\n    };\n};\n\nexport const cardSetLowerActiveFieldToBottom = (): CardSetLowerActiveFieldToBottom => {\n    return {\n        type: CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM,\n    };\n};\n\nexport const cardSetLockActiveField = (): CardSetLockActiveField => {\n    return {\n        type: CARDSET_LOCK_ACTIVE_FIELD,\n    };\n};\n\nexport const cardSetUnlockActiveField = (): CardSetUnlockActiveField => {\n    return {\n        type: CARDSET_UNLOCK_ACTIVE_FIELD,\n    };\n};\n\nexport const cardSetChangeFitForActiveField = (fit: string): CardSetChangeFitForActiveField => {\n    return {\n        type: CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD,\n        fit,\n    };\n};\n\nexport const cardSetChangeCropForActiveField = (crop: boolean): CardSetChangeCropForActiveField => {\n    return {\n        type: CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD,\n        crop,\n    };\n};\n\nexport const cardSetChangeUnclickableForActiveField = (\n    unclickable: boolean,\n): CardSetChangeUnclickableForActiveField => {\n    return {\n        type: CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD,\n        unclickable,\n    };\n};\n\nexport const cardSetChangeWidth = (\n    width: number,\n    maintainAspectRatio: boolean,\n    resizeContent: boolean,\n): CardSetChangeWidth => {\n    return {\n        type: CARDSET_CHANGE_WIDTH,\n        width,\n        maintainAspectRatio,\n        resizeContent,\n    };\n};\n\nexport const cardSetChangeHeight = (\n    height: number,\n    maintainAspectRatio: boolean,\n    resizeContent: boolean,\n): CardSetChangeHeight => {\n    return {\n        type: CARDSET_CHANGE_HEIGHT,\n        height,\n        maintainAspectRatio,\n        resizeContent,\n    };\n};\n\nexport const cardSetChangeIsTwoSided = (isTwoSided: boolean): CardSetChangeIsTwoSided => {\n    return {\n        type: CARDSET_CHANGE_IS_TWO_SIDED,\n        isTwoSided,\n    };\n};\n\nexport const cardSetChangeSnappingDistance = (snappingDistance: number): CardSetChangeSnappingDistance => {\n    return {\n        type: CARDSET_CHANGE_SNAPPING_DISTANCE,\n        snappingDistance,\n    };\n};\n\nexport const cardSetChangeFieldPosition = (\n    cardId: string | undefined,\n    fieldId: string,\n    x: number,\n    y: number,\n    group: string,\n): CardSetChangeFieldPosition => {\n    return {\n        type: CARDSET_CHANGE_FIELD_POSITION,\n        cardId,\n        fieldId,\n        x,\n        y,\n        group,\n    };\n};\n\nexport const cardSetChangeFieldPan = (\n    cardId: string | undefined,\n    fieldId: string,\n    cx: number,\n    cy: number,\n    group: string,\n): CardSetChangeFieldPan => {\n    return {\n        type: CARDSET_CHANGE_FIELD_PAN,\n        cardId,\n        fieldId,\n        cx,\n        cy,\n        group,\n    };\n};\n\nexport const cardSetChangeFieldZoom = (\n    cardId: string | undefined,\n    fieldId: string,\n    zoom: number,\n    group: string,\n): CardSetChangeFieldZoom => {\n    return {\n        type: CARDSET_CHANGE_FIELD_ZOOM,\n        cardId,\n        fieldId,\n        zoom,\n        group,\n    };\n};\n\nexport const cardSetChangeFieldSize = (\n    cardId: string | undefined,\n    fieldId: string,\n    width: number,\n    height: number,\n    group: string,\n): CardSetChangeFieldSize => {\n    return {\n        type: CARDSET_CHANGE_FIELD_SIZE,\n        cardId,\n        fieldId,\n        width,\n        height,\n        group,\n    };\n};\n\nexport const cardSetChangeFieldAngle = (\n    cardId: string | undefined,\n    fieldId: string,\n    angle: number,\n    group: string,\n): CardSetChangeFieldAngle => {\n    return {\n        type: CARDSET_CHANGE_FIELD_ANGLE,\n        cardId,\n        fieldId,\n        angle,\n        group,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldAlign = (align: string): CardSetChangeActiveTextFieldAlign => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN,\n        align,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldColor = (color: string): CardSetChangeActiveTextFieldColor => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR,\n        color,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldFontFamily = (fontFamily: string): CardSetChangeActiveTextFieldFontFamily => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY,\n        fontFamily,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldFontVariant = (\n    fontVariant: string,\n): CardSetChangeActiveTextFieldFontVariant => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT,\n        fontVariant,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldFontFamilyAndVariant = (\n    fontFamily: string,\n    fontVariant: string,\n): CardSetChangeActiveTextFieldFontFamilyAndVariant => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT,\n        fontFamily,\n        fontVariant,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldFontSize = (fontSize: number): CardSetChangeActiveTextFieldFontSize => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE,\n        fontSize,\n    };\n};\n\nexport const cardSetChangeActiveTextFieldLineHeight = (lineHeight: number): CardSetChangeActiveTextFieldLineHeight => {\n    return {\n        type: CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT,\n        lineHeight,\n    };\n};\n\nexport const cardSetChangeText = (cardId: string, fieldId: string, textInfo: TextInfo): CardSetChangeText => {\n    return {\n        type: CARDSET_CHANGE_TEXT,\n        cardId,\n        fieldId,\n        textInfo,\n    };\n};\n\nexport const cardSetChangeImage = (\n    cardId: string | undefined,\n    fieldId: string,\n    imageInfo: ImageInfo,\n): CardSetChangeImage => {\n    return {\n        type: CARDSET_CHANGE_IMAGE,\n        cardId,\n        fieldId,\n        imageInfo,\n    };\n};\n\nexport const cardSetChangeImageBase64 = (\n    cardId: string,\n    fieldId: string,\n    base64?: string,\n): CardSetChangeImageBase64 => {\n    return {\n        type: CARDSET_CHANGE_IMAGE_BASE64,\n        cardId,\n        fieldId,\n        base64,\n    };\n};\n\nexport const cardSetActiveCardAndField = (\n    cardId: string | undefined,\n    isBackActive: boolean,\n    fieldId: string | undefined,\n): CardSetSetActiveCardAndField => {\n    return {\n        type: CARDSET_SET_ACTIVE_CARD_AND_FIELD,\n        cardId,\n        isBackActive,\n        fieldId,\n    };\n};\n\nexport const cardSetChangeApplyToAllCards = (applyToAllCards: boolean): CardSetChangeApplyToAllCards => {\n    return {\n        type: CARDSET_CHANGE_APPLY_TO_ALLCARDS,\n        applyToAllCards,\n    };\n};\n\nexport const cardSetSetSidebarState = (sidebarState: SidebarState | null): CardSetSetSidebarState => {\n    return {\n        type: CARDSET_SET_SIDEBAR_STATE,\n        sidebarState,\n    };\n};\n\nexport const cardSetSetZoom = (zoom: number): CardSetSetZoom => {\n    return {\n        type: CARDSET_SET_ZOOM,\n        zoom,\n    };\n};\n\nexport const cardSetUploadImage = (\n    gameId: string,\n    file: File,\n    load: FPLoadCallback,\n    error: FPErrorCallback,\n    progress: FPProgressCallback,\n    abort: FPAbortCallback,\n    cancelToken: CancelToken,\n): CardSetUploadImage => {\n    return {\n        type: CARDSET_UPLOAD_IMAGE,\n        gameId,\n        file,\n        load,\n        error,\n        progress,\n        abort,\n        cancelToken,\n    };\n};\n\nexport const cardSetDeleteImage = (\n    imageId: string,\n    load: FPRevertLoadCallback,\n    error: FPErrorCallback,\n): CardSetDeleteImage => {\n    return {\n        type: CARDSET_DELETE_IMAGE,\n        imageId,\n        load,\n        error,\n    };\n};\n\nexport const cardSetUndo = (): CardSetUndo => {\n    return {\n        type: CARDSET_UNDO,\n    };\n};\n\nexport const cardSetRedo = (): CardSetRedo => {\n    return {\n        type: CARDSET_REDO,\n    };\n};\n\nexport const imageListRequest = (filter: string, location: string): ImageListAction => {\n    return {\n        type: IMAGE_LIST_REQUEST,\n        filter,\n        location,\n    };\n};\n","import axios, { AxiosError, CancelToken } from 'axios';\n\nimport { Credentials } from './types';\n\nexport function handleAxiosError(error: AxiosError) {\n    if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        // error.response.status);\n        throw new Error(error.response.data.message);\n    } else if (error.request) {\n        console.log(error.request);\n        throw new Error(error.request);\n    } else {\n        throw new Error('Unknown error :(');\n    }\n}\n\nexport function getTokens(creds: Credentials) {\n    return axios\n        .post('/api/tokens', creds)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function refreshToken(refreshTokenValue: string) {\n    const config = {\n        headers: { Authorization: `Bearer ${refreshTokenValue}` },\n    };\n    return axios\n        .post('/api/access_tokens', {}, config)\n        .then((resp) => {\n            return resp.data.accessToken;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function deleteAccessToken(token: string) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .delete('/api/access_tokens', config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            if (error.response.status === 401) return {};\n            handleAxiosError(error);\n        });\n}\n\nexport function deleteRefreshToken(token: string) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .delete('/api/refresh_tokens', config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            if (error.response.status === 401) return {};\n            handleAxiosError(error);\n        });\n}\n\nexport function registerUser(creds: Credentials) {\n    return axios\n        .post('/api/users', creds)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function getRequest(url: string, token: string) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .get(url, config)\n        .then((resp) => {\n            return resp;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function postRequest(url: string, token: string, data: any) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .post(url, data, config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function postRequestFormDataCancelable(\n    url: string,\n    token: string,\n    data: FormData,\n    progressCallback: (event: ProgressEvent) => void,\n    cancelToken: CancelToken,\n    cancelCallback: () => void,\n) {\n    const config = {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data',\n        },\n        cancelToken,\n        onUploadProgress: progressCallback,\n    };\n\n    return axios\n        .post(url, data, config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            if (axios.isCancel(error)) {\n                cancelCallback();\n            } else {\n                handleAxiosError(error);\n            }\n        });\n}\n\nexport function putRequest(url: string, token: string, data: any) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .put(url, data, config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n\nexport function deleteRequest(url: string, token: string) {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    };\n    return axios\n        .delete(url, config)\n        .then((resp) => {\n            return resp.data;\n        })\n        .catch((error) => {\n            handleAxiosError(error);\n        });\n}\n","import axios from 'axios';\nimport StackTrace from 'stacktrace-js';\n\nimport { ImageFieldInfo, ImageToDraw } from './types';\nimport { store } from './store';\n\nexport function downloadBlob(blobURL: string, filename: string, resolve?: () => void) {\n    const tempLink = document.createElement('a');\n    tempLink.style.display = 'none';\n    tempLink.href = blobURL;\n    tempLink.setAttribute('download', filename);\n    if (typeof tempLink.download === 'undefined') {\n        tempLink.setAttribute('target', '_blank');\n    }\n    document.body.appendChild(tempLink);\n    tempLink.click();\n    document.body.removeChild(tempLink);\n    setTimeout(() => {\n        window.URL.revokeObjectURL(blobURL);\n        if (resolve) resolve();\n    }, 100);\n}\n\nexport function rotateVec(x: number, y: number, a: number) {\n    const sinA = Math.sin(a);\n    const cosA = Math.cos(a);\n    const rx = cosA * x - sinA * y;\n    const ry = sinA * x + cosA * y;\n\n    return { rx, ry };\n}\n\nexport function calculateImageDimensions(imageFieldInfo: ImageFieldInfo | ImageToDraw) {\n    let calculatedImageWidth, calculatedImageHeight;\n    let imageWidth = imageFieldInfo.imageWidth || 1;\n    let imageHeight = imageFieldInfo.imageHeight || 1;\n\n    if (!imageFieldInfo.fit || imageFieldInfo.fit === 'width') {\n        calculatedImageWidth = imageFieldInfo.width;\n        calculatedImageHeight = (imageFieldInfo.width * imageHeight) / imageWidth;\n    } else if (imageFieldInfo.fit === 'height') {\n        calculatedImageWidth = (imageFieldInfo.height * imageWidth) / imageHeight;\n        calculatedImageHeight = imageFieldInfo.height;\n    } else {\n        // strech\n        calculatedImageWidth = imageFieldInfo.width;\n        calculatedImageHeight = imageFieldInfo.height;\n    }\n\n    calculatedImageWidth *= imageFieldInfo.zoom || 1;\n    calculatedImageHeight *= imageFieldInfo.zoom || 1;\n\n    return { width: calculatedImageWidth, height: calculatedImageHeight };\n}\n\nexport class UserError extends Error {}\n\nexport function reportError(error: Error) {\n    if (error instanceof UserError) {\n        return;\n    }\n\n    StackTrace.fromError(error).then(stackframes => {\n        var stringifiedStack = stackframes\n            .map(function(sf) {\n                return sf.toString();\n            })\n            .join('\\n');\n\n        if (process.env.NODE_ENV === 'production') {\n            let state = '';\n            if (store) {\n                state = JSON.stringify(store.getState());\n            }\n            axios.post('/api/reports', { message: error.message, stack: stringifiedStack, state });\n        } else {\n            console.log(stringifiedStack);\n        }\n    });\n}\n","import { Dispatch } from './actions';\n\nexport interface SidebarOwnProps {\n    visible: boolean;\n}\n\nexport interface DispatchProps {\n    dispatch: Dispatch;\n}\n\nexport type IdsArray = string[];\n\nexport interface MessageType {\n    id: string;\n    type: string;\n    text: string;\n}\n\nexport interface GameType {\n    id: string;\n    name: string;\n}\n\nexport interface GamesCollection {\n    [propName: string]: GameType;\n}\n\nexport interface PlaceholderBase {\n    id: string;\n    type: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    angle: number;\n    locked?: boolean;\n    name?: string;\n    isOnBack?: boolean;\n}\n\nexport interface TextPlaceholderType extends PlaceholderBase {\n    type: 'text';\n    align: string;\n    color: string;\n    fontFamily: string;\n    fontVariant: string;\n    fontSize: number;\n    lineHeight?: number;\n}\n\nexport interface ImagePlaceholderType extends PlaceholderBase {\n    id: string;\n    type: 'image';\n    fit?: string;\n    zoom?: number;\n    cx?: number;\n    cy?: number;\n    crop?: boolean;\n}\n\nexport type PlaceholderType = TextPlaceholderType | ImagePlaceholderType;\n\nexport interface PlaceholdersCollection {\n    [propName: string]: PlaceholderType;\n}\n\nexport interface TextInfo {\n    value: string;\n}\n\nexport interface PlaceholdersTextInfoCollection {\n    [propName: string]: TextInfo;\n}\n\nexport interface PlaceholdersTextInfoByCardCollection {\n    [propName: string]: PlaceholdersTextInfoCollection;\n}\n\nexport interface ImageInfo {\n    url?: string;\n    global?: boolean;\n    base64?: string;\n    color?: string;\n    width?: number;\n    height?: number;\n}\n\nexport interface PlaceholdersImageInfoCollection {\n    [propName: string]: ImageInfo;\n}\n\nexport interface PlaceholdersImageInfoByCardCollection {\n    [propName: string]: PlaceholdersImageInfoCollection;\n}\n\nexport interface FieldBaseInfo {\n    id: string;\n    type: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    angle: number;\n    locked?: boolean;\n    name?: string;\n    isOnBack?: boolean;\n    unclickable?: boolean;\n}\n\nexport interface TextFieldInfo extends FieldBaseInfo {\n    type: 'text';\n    value: string;\n    align: string;\n    color: string;\n    fontFamily: string;\n    fontVariant: string;\n    fontSize: number;\n    lineHeight?: number;\n}\n\nexport interface ImageFieldInfo extends FieldBaseInfo {\n    type: 'image';\n    url?: string;\n    global?: boolean;\n    base64?: string;\n    color?: string;\n    imageWidth?: number;\n    imageHeight?: number;\n    fit?: string;\n    zoom?: number;\n    cx?: number;\n    cy?: number;\n    crop?: boolean;\n}\n\nexport type FieldInfo = TextFieldInfo | ImageFieldInfo;\n\nexport interface FieldInfoCollection {\n    [propName: string]: FieldInfo;\n}\n\nexport interface FieldInfoByCardCollection {\n    [propName: string]: FieldInfoCollection;\n}\n\nexport interface CardType {\n    id: string;\n    count: number;\n}\n\nexport interface CardsCollection {\n    [propName: string]: CardType;\n}\n\nexport interface CardSetType {\n    id: string;\n    name: string;\n}\n\nexport interface CardSetsCollection {\n    [propName: string]: CardSetType;\n}\n\nexport interface Credentials {\n    username: string;\n    password: string;\n}\n\nexport interface Image {\n    id: number;\n    name: string;\n    width: number;\n    height: number;\n}\n\nexport type ImageArray = Image[];\n\nexport interface CardSetData {\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    cardsAllIds: string[];\n    cardsById: CardsCollection;\n    fieldsAllIds: string[];\n    fields: FieldInfoByCardCollection;\n}\n\nexport enum ImageType {\n    SVG,\n    SVG_PATH,\n    IMAGE,\n    BLOCK_START,\n    BLOCK_END,\n}\n\nexport interface ImageToDraw {\n    type: ImageType;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    angle: number;\n    fit?: string;\n    data: string;\n    color?: string;\n    scale?: number;\n    imageWidth?: number;\n    imageHeight?: number;\n    zoom?: number;\n    cx?: number;\n    cy?: number;\n    crop?: boolean;\n}\n","import axios from 'axios';\nimport { downloadBlob, calculateImageDimensions } from './utils';\nimport { delay } from 'redux-saga/effects';\nimport { XmlDocument } from 'xmldoc';\nimport JSZip from 'jszip';\nimport { getRequest } from './requests';\nimport { CardSetData, ImageToDraw, ImageType } from './types';\n\nconst SVG_B64_START = 'data:image/svg+xml;base64,';\n\nexport const generatePdfUsingWorker = (\n    accessToken: string,\n    collectionType: string,\n    collectionId: string,\n    pageWidth: number,\n    pageHeight: number,\n    topBottomMargin: number,\n    leftRightMargin: number,\n    verticalSpace: number,\n    horizontalSpace: number,\n    includeBleedingArea: boolean,\n    cutMarksForScissors: boolean,\n    cutMarksForGuillotine: boolean,\n    cutMarksInMarginArea: boolean,\n    cutMarksOnFrontSideOnly: boolean,\n) => {\n    if (!window.Worker) {\n        throw new Error('We can not generate PDF because of browser you use. Try using different browser');\n    }\n\n    return new Promise((resolve, reject) => {\n        try {\n            const worker = new Worker('/js/worker.js');\n            worker.addEventListener('message', (event) => {\n                if (event.data.type === 'generatePdf') {\n                    const blobURL = event.data.url;\n                    downloadBlob(blobURL, 'card.pdf', resolve);\n                } else if (event.data.type === 'generateError') {\n                    const error = event.data.error;\n                    reject({ message: 'PDF generation failed: ' + event.data.message, stack: error.stack });\n                }\n            });\n\n            worker.postMessage({\n                type: 'generatePdf',\n                accessToken,\n                collectionType,\n                collectionId,\n                pageWidth,\n                pageHeight,\n                topBottomMargin,\n                leftRightMargin,\n                verticalSpace,\n                horizontalSpace,\n                includeBleedingArea,\n                cutMarksForScissors,\n                cutMarksForGuillotine,\n                cutMarksInMarginArea,\n                cutMarksOnFrontSideOnly,\n            });\n        } catch (e) {\n            reject(e);\n        }\n    });\n};\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => resolve(img);\n        img.onerror = () => reject();\n\n        img.src = url;\n    });\n}\n\nfunction prepareImageToDrawSpace(context: CanvasRenderingContext2D, imageToDraw: ImageToDraw, ptpmm: number) {\n    context.save();\n    const x = (imageToDraw.x + imageToDraw.width / 2) * ptpmm;\n    const y = (imageToDraw.y + imageToDraw.height / 2) * ptpmm;\n    context.translate(x, y);\n    context.rotate(imageToDraw.angle);\n    const ax = (-imageToDraw.width / 2) * ptpmm;\n    const ay = (-imageToDraw.height / 2) * ptpmm;\n    context.translate(ax, ay);\n    if (imageToDraw.crop) {\n        context.rect(0, 0, imageToDraw.width * ptpmm, imageToDraw.height * ptpmm);\n        context.clip();\n    }\n}\n\nfunction fixWidthAndHeightInSvg(data: string) {\n    const doc = new XmlDocument(data);\n    if (!('width' in doc.attr) || !('height' in doc.attr)) {\n        const viewBox = doc.attr['viewBox'].split(' ');\n        doc.attr['width'] = viewBox[2];\n        doc.attr['height'] = viewBox[3];\n    }\n\n    return btoa(doc.toString({ compressed: true }));\n}\n\nclass PNGGenerator {\n    tasksQueue: {\n        type: string;\n        subType: string;\n        imageToDraw?: ImageToDraw;\n        error?: { message: string; stack: string };\n    }[] = [];\n    worker: Worker;\n\n    constructor() {\n        if (!window.Worker) {\n            throw new Error('We can not generate PNG because of browser you use. Try using different browser');\n        }\n\n        this.worker = new Worker('/js/worker.js');\n        this.worker.addEventListener('message', (event) => {\n            if (event.data.type === 'generateCard' || event.data.type === 'generateError') {\n                this.tasksQueue.push(event.data);\n            }\n        });\n    }\n\n    async generateCard(\n        cardSetData: CardSetData,\n        cardId: string,\n        cardIdx: number,\n        dpi: number,\n        isBack: boolean,\n        cardsetFolder: JSZip,\n    ) {\n        this.worker.postMessage({\n            type: 'generateCard',\n            cardSetData,\n            cardId,\n            isBack,\n        });\n\n        const offscreenCanvas = document.createElement('canvas');\n\n        const calculatedWidth = Math.round(dpi * (cardSetData.width / 25.4 + 1 / 4));\n        const calculatedHeight = Math.round(dpi * (cardSetData.height / 25.4 + 1 / 4));\n\n        offscreenCanvas.width = calculatedWidth;\n        offscreenCanvas.height = calculatedHeight;\n        const context = offscreenCanvas.getContext('2d');\n        if (context === null) {\n            throw new Error('We cannot generate PNG because of unknown reason. Try different browser.');\n        }\n        context.fillStyle = 'white';\n        context.fillRect(0, 0, calculatedWidth, calculatedHeight);\n\n        let stopped = false;\n\n        const ptpmm = dpi / 25.4;\n\n        while (!stopped) {\n            while (this.tasksQueue.length > 0) {\n                const task = this.tasksQueue.shift();\n\n                if (task && task.imageToDraw) {\n                    const imageToDraw = task.imageToDraw;\n\n                    if (imageToDraw.type === ImageType.SVG_PATH) {\n                        prepareImageToDrawSpace(context, imageToDraw, ptpmm);\n                        if (imageToDraw.scale && imageToDraw.color) {\n                            context.fillStyle = imageToDraw.color;\n                            context.scale(imageToDraw.scale * ptpmm, imageToDraw.scale * ptpmm);\n                            const p = new Path2D(imageToDraw.data);\n                            context.fill(p);\n                        }\n                        context.restore();\n                    } else if (imageToDraw.type === ImageType.IMAGE || imageToDraw.type === ImageType.SVG) {\n                        prepareImageToDrawSpace(context, imageToDraw, ptpmm);\n\n                        if (imageToDraw.cx !== undefined && imageToDraw.cy !== undefined) {\n                            context.translate(imageToDraw.cx * ptpmm, imageToDraw.cy * ptpmm);\n                        }\n                        const dim = calculateImageDimensions(imageToDraw);\n\n                        let image;\n                        if (imageToDraw.type === ImageType.SVG) {\n                            const svgData = fixWidthAndHeightInSvg(atob(imageToDraw.data));\n                            image = await loadImage(SVG_B64_START + svgData);\n                        } else {\n                            const resp = await axios.get(imageToDraw.data);\n                            if (resp.headers['content-type'] === 'image/svg+xml') {\n                                const svgData = fixWidthAndHeightInSvg(resp.data);\n                                image = await loadImage(SVG_B64_START + svgData);\n                            } else {\n                                image = await loadImage(imageToDraw.data);\n                            }\n                        }\n\n                        context.drawImage(image, 0, 0, dim.width * ptpmm, dim.height * ptpmm);\n\n                        context.restore();\n                    } else if (imageToDraw.type === ImageType.BLOCK_START) {\n                        prepareImageToDrawSpace(context, imageToDraw, ptpmm);\n                    } else if (imageToDraw.type === ImageType.BLOCK_END) {\n                        context.restore();\n                    }\n                }\n\n                if (task && task.subType === 'stop') {\n                    stopped = true;\n                }\n\n                if (task && task.type === 'generateError' && task.error) {\n                    const error = Error('Failed to generate PNG: ' + task.error.message);\n                    error.stack = task.error.stack;\n                    throw error;\n                }\n            }\n            if (!stopped) {\n                await delay(100);\n            }\n        }\n\n        let dataUrl = offscreenCanvas.toDataURL();\n        dataUrl = dataUrl.slice('data:image/png;base64,'.length);\n        cardsetFolder.file(\n            `${cardIdx.toString().padStart(4, '0')}_${cardId}_${isBack ? 'back' : 'front'}.png`,\n            dataUrl,\n            { base64: true },\n        );\n    }\n\n    async generateGame(accessToken: string, gameId: string, dpi: number, zip: JSZip) {\n        const resp = await getRequest('/api/games/' + gameId, accessToken);\n        if (!resp) return;\n\n        const cardsetsList = resp.data.cardsets;\n        for (const cardsetInfo of cardsetsList) {\n            await this.generateCardset(accessToken, cardsetInfo.id, dpi, zip);\n        }\n    }\n\n    async generateCardset(accessToken: string, cardsetId: string, dpi: number, zip: JSZip) {\n        const resp = await getRequest('/api/cardsets/' + cardsetId, accessToken);\n        if (!resp) return;\n\n        const cardSetData: CardSetData = JSON.parse(resp.data.data);\n\n        const cardsetFolder = zip.folder(resp.data.name);\n\n        if (cardSetData.cardsAllIds && cardsetFolder) {\n            for (const [cardIdx, cardId] of cardSetData.cardsAllIds.entries()) {\n                await this.generateCard(cardSetData, cardId, cardIdx, dpi, false, cardsetFolder);\n                if (cardSetData.isTwoSided) {\n                    await this.generateCard(cardSetData, cardId, cardIdx, dpi, true, cardsetFolder);\n                }\n            }\n        }\n    }\n}\n\nexport const generatePngUsingWorker = async (\n    accessToken: string,\n    collectionType: string,\n    collectionId: string,\n    dpi: number,\n) => {\n    const pngGenerator = new PNGGenerator();\n\n    const zip = new JSZip();\n\n    if (collectionType === 'games') {\n        await pngGenerator.generateGame(accessToken, collectionId, dpi, zip);\n    } else if (collectionType === 'cardsets') {\n        await pngGenerator.generateCardset(accessToken, collectionId, dpi, zip);\n    }\n\n    const blob = await zip.generateAsync({ type: 'blob' });\n    const url = window.URL.createObjectURL(blob);\n    downloadBlob(url, 'cards.zip');\n};\n\nasync function getImageAttribution(name: string, accessToken: string) {\n    const resp = await getRequest('/api/images/' + name, accessToken);\n    if (!resp) {\n        return undefined;\n    }\n\n    if (resp.data.metadata) {\n        const meta = JSON.parse(resp.data.metadata);\n        if (meta.source === 'noto-emoji') {\n            return 'Google Noto Emoji';\n        } else if (meta.source === 'twemoji') {\n            return 'Twitter Emoji';\n        } else if (meta.source === 'game-icons' && meta.attribution) {\n            return meta.attribution;\n        }\n    }\n\n    return undefined;\n}\n\nexport const retrieveGameAttributions = async (accessToken: string, gameId: string): Promise<string[]> => {\n    const resp = await getRequest('/api/games/' + gameId, accessToken);\n    if (!resp) return [];\n\n    const attributions = new Set<string>();\n\n    const cardsetsList = resp.data.cardsets;\n    for (const cardsetInfo of cardsetsList) {\n        const resp = await getRequest('/api/cardsets/' + cardsetInfo.id, accessToken);\n        if (!resp) {\n            continue;\n        }\n\n        const cardSetData: CardSetData = JSON.parse(resp.data.data);\n        for (const cardId in cardSetData.fields) {\n            const cardFields = cardSetData.fields[cardId];\n            for (const fieldId in cardFields) {\n                const fieldInfo = cardFields[fieldId];\n                if (fieldInfo.type === 'image' && fieldInfo.url !== undefined) {\n                    const name = fieldInfo.url.replace('/api/imagefiles/', '');\n                    const attribution = await getImageAttribution(name, accessToken);\n                    if (attribution) {\n                        attributions.add(attribution);\n                    }\n                } else if (fieldInfo.type === 'text') {\n                    let start = fieldInfo.value.indexOf('/api/imagefiles/');\n                    while (start !== -1) {\n                        const end = fieldInfo.value.indexOf('\"', start);\n                        const name = fieldInfo.value.slice(start, end).replace('/api/imagefiles/', '');\n\n                        console.log(name);\n\n                        const attribution = await getImageAttribution(name, accessToken);\n                        if (attribution) {\n                            attributions.add(attribution);\n                        }\n\n                        start = fieldInfo.value.indexOf('/api/imagefiles/', end);\n                    }\n                }\n            }\n        }\n    }\n\n    return Array.from(attributions);\n};\n","export function saveTokens(data: { accessToken: string; refreshToken: string }) {\n    localStorage.setItem('accessToken', data.accessToken);\n    localStorage.setItem('refreshToken', data.refreshToken);\n}\n\nexport function saveUsername(username: string) {\n    localStorage.setItem('username', username);\n}\n\nexport function saveAccessToken(accessToken: string) {\n    localStorage.setItem('accessToken', accessToken);\n}\n\nexport function cleanTokens() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n}\n\nexport function cleanUsername() {\n    localStorage.removeItem('username');\n}\n\nexport function getTokenFromStorage() {\n    let token = localStorage.getItem('accessToken') || null;\n    return token;\n}\n\nexport function getRefreshTokenFromStorage() {\n    let token = localStorage.getItem('refreshToken') || null;\n    return token;\n}\n\nexport function getUsernameFromStorage() {\n    let username = localStorage.getItem('username') || null;\n    return username;\n}\n","import WebFont from 'webfontloader';\n\nimport { DEFAULT_FONT } from './constants';\nimport { CardSetSelectSuccessDataV3 } from './actions';\n\nconst webFontsLoadPromise = (config: WebFont.Config) =>\n    new Promise((resolve, reject) => {\n        WebFont.load({ ...config, active: resolve, inactive: reject });\n    });\n\nexport const loadFontsUsedInPlaceholders = (data: CardSetSelectSuccessDataV3) => {\n    if (!('fieldsAllIds' in data)) {\n        return;\n    }\n\n    const fontsToLoad: Set<string> = new Set();\n    fontsToLoad.add(DEFAULT_FONT);\n    for (const fieldId of data.fieldsAllIds) {\n        const field = data.fields[data.cardsAllIds[0]][fieldId];\n        if (field && field.type === 'text' && field.fontFamily) {\n            let fontToLoad = field.fontFamily;\n            if (field.fontVariant && field.fontVariant !== 'regular') {\n                fontToLoad += ':' + field.fontVariant;\n            }\n\n            fontsToLoad.add(fontToLoad);\n        }\n    }\n\n    const config: WebFont.Config = {\n        google: {\n            families: [...Array.from(fontsToLoad)],\n        },\n    };\n\n    return webFontsLoadPromise(config);\n};\n","export const CURRENT_CARDSET_VERSION = 3;\nexport const DEFAULT_FONT = 'Roboto';\nexport const DEFAULT_FONT_VARIANT = 'regular';\nexport const DEFAULT_FONT_SIZE = 8;\nexport const DEFAULT_LINE_HEIGHT = 1.27;\n\nexport const BLEED_WIDTH = 25.4 / 8; // 1/8th of inch in mm\n","import { CancelToken } from 'axios';\nimport { XmlDocument, XmlNode } from 'xmldoc';\nimport { all, call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { delay } from 'redux-saga/effects';\nimport jwtDecode from 'jwt-decode';\nimport { ActionCreators } from 'redux-undo';\n\nimport { BLEED_WIDTH, CURRENT_CARDSET_VERSION } from './constants';\nimport {\n    CARDSET_ADD_IMAGE_FIELD,\n    CARDSET_ADD_TEXT_FIELD,\n    CARDSET_CHANGE_ACTIVE_FIELD_NAME,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT,\n    CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD,\n    CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD,\n    CARDSET_CHANGE_HEIGHT,\n    CARDSET_CHANGE_IMAGE,\n    CARDSET_CHANGE_IS_TWO_SIDED,\n    CARDSET_CHANGE_FIELD_ANGLE,\n    CARDSET_CHANGE_FIELD_SIZE,\n    CARDSET_CHANGE_SNAPPING_DISTANCE,\n    CARDSET_CHANGE_TEXT,\n    CARDSET_CHANGE_WIDTH,\n    CARDSET_CLONE_CARD,\n    CARDSET_CREATE_CARD,\n    CARDSET_CREATE_FAILURE,\n    CARDSET_CREATE_REQUEST,\n    CARDSET_CREATE_SUCCESS,\n    CARDSET_DELETE_IMAGE,\n    CARDSET_DELETE_REQUEST,\n    CARDSET_IMPORT_DATA,\n    CARDSET_LIST_RESET,\n    CARDSET_LIST_SUCCESS,\n    CARDSET_LOCK_ACTIVE_FIELD,\n    CARDSET_LOWER_ACTIVE_FIELD,\n    CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM,\n    CARDSET_RAISE_ACTIVE_FIELD,\n    CARDSET_RAISE_ACTIVE_FIELD_TO_TOP,\n    CARDSET_REMOVE_ACTIVE_FIELD,\n    CARDSET_REMOVE_CARD,\n    CARDSET_RENAME_REQUEST,\n    CARDSET_SELECT_FAILURE,\n    CARDSET_SELECT_REQUEST,\n    CARDSET_SELECT_SUCCESS,\n    CARDSET_SET_ZOOM,\n    CARDSET_UNLOCK_ACTIVE_FIELD,\n    CARDSET_UPDATE_CARD_COUNT,\n    CARDSET_UPLOAD_IMAGE,\n    CARDSET_UPLOAD_IMAGE_FAILURE,\n    CARDSET_UPLOAD_IMAGE_SUCCESS,\n    CardSetChangeFitForActiveField,\n    CardSetChangeImage,\n    CardSetCreateRequest,\n    CardSetDeleteImage,\n    CardSetDeleteRequest,\n    CardSetRenameRequest,\n    CardSetSelectRequest,\n    CardSetUploadImage,\n    GAME_CREATE_PDF_FAILURE,\n    GAME_CREATE_PDF_REQUEST,\n    GAME_CREATE_PDF_SUCCESS,\n    GAME_CREATE_PNG_FAILURE,\n    GAME_CREATE_PNG_REQUEST,\n    GAME_GET_ATTRIBUTIONS_REQUEST,\n    GAME_CREATE_PNG_SUCCESS,\n    GAME_CREATE_REQUEST,\n    GAME_CREATE_SUCCESS,\n    GAME_DELETE_REQUEST,\n    GAME_LIST_FAILURE,\n    GAME_LIST_REQUEST,\n    GAME_LIST_RESET,\n    GAME_LIST_SUCCESS,\n    GAME_RENAME_REQUEST,\n    GAME_SELECT_FAILURE,\n    GAME_SELECT_REQUEST,\n    GAME_SELECT_SUCCESS,\n    GameCreatePdfRequest,\n    GameCreatePngRequest,\n    GameCreateRequest,\n    GameDeleteRequest,\n    GameRenameRequest,\n    GameSelectRequest,\n    IMAGE_LIST_FAILURE,\n    IMAGE_LIST_REQUEST,\n    IMAGE_LIST_SUCCESS,\n    INIT_REQUEST,\n    ImageListRequest,\n    LOGIN_FAILURE,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGOUT_FAILURE,\n    LOGOUT_REQUEST,\n    LOGOUT_SUCCESS,\n    LoginRequest,\n    MESSAGE_DISPLAY,\n    MESSAGE_HIDE,\n    MessageDisplay,\n    SIGNUP_FAILURE,\n    SIGNUP_REQUEST,\n    SIGNUP_SUCCESS,\n    SignUpRequest,\n    cardSetChangeImageBase64,\n    gameSelectRequest,\n    messageDisplay,\n    CARDSET_CHANGE_FIELD_PAN,\n    CARDSET_CHANGE_FIELD_ZOOM,\n    CARDSETS_SELECT_SUCCESS,\n    CARDSET_CHANGE_FIELD_POSITION,\n    CardSetSelectSuccessData,\n    CardSetSelectSuccessDataV2,\n    CardSetSelectSuccessDataV3,\n    CARDSET_UNDO,\n    CARDSET_REDO,\n    CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD,\n    CARDSET_ROTATE_CARDS_RIGHT,\n    CARDSET_ROTATE_CARDS_LEFT,\n    GAME_GET_ATTRIBUTIONS_SUCCESS,\n    GAME_GET_ATTRIBUTIONS_FAILURE,\n} from './actions';\nimport { CardSetType, CardSetsCollection, GameType, GamesCollection, FieldInfoByCardCollection } from './types';\nimport { State } from './reducers';\nimport {\n    deleteAccessToken,\n    deleteRefreshToken,\n    deleteRequest,\n    getRequest,\n    getTokens,\n    postRequest,\n    postRequestFormDataCancelable,\n    putRequest,\n    refreshToken,\n    registerUser,\n} from './requests';\nimport { generatePdfUsingWorker, generatePngUsingWorker, retrieveGameAttributions } from './workerController';\nimport {\n    getTokenFromStorage,\n    getRefreshTokenFromStorage,\n    saveAccessToken,\n    saveTokens,\n    cleanTokens,\n    saveUsername,\n    getUsernameFromStorage,\n} from './storage';\nimport { loadFontsUsedInPlaceholders } from './fontLoader';\nimport { reportError, UserError } from './utils';\n\n// Messages\nexport function* putError(e: Error): SagaIterator {\n    yield put(messageDisplay('error', e.message));\n    yield call(reportError, e);\n}\n\nexport function* putInfo(message: string): SagaIterator {\n    yield put(messageDisplay('info', message));\n}\n\nexport function* putProgress(text: string): SagaIterator {\n    const message = messageDisplay('progress', text, text);\n    yield put(message);\n    return message.message.id;\n}\n\nexport function* hideProgress(messageId: string): SagaIterator {\n    yield put({ type: MESSAGE_HIDE, messageId });\n}\n\nexport function* handleMessageDisplay(action: MessageDisplay): SagaIterator {\n    if (action.message.type === 'progress') return;\n\n    yield delay(5000);\n    yield put({ type: MESSAGE_HIDE, messageId: action.message.id });\n}\n\n// Login & Signup\n// Token handling\n\nexport function validateToken(token: string): boolean {\n    try {\n        const decoded = jwtDecode<{ exp: number }>(token);\n        const valid = decoded.exp - new Date().getTime() / 1000 > 5;\n        return valid;\n    } catch (e) {\n        return false;\n    }\n}\n\nexport function* getToken(withErrorIfMissing: boolean, getFreshToken = false): SagaIterator {\n    const token = yield call(getTokenFromStorage);\n    if (token && !getFreshToken) {\n        const tokenValid = yield call(validateToken, token);\n        if (tokenValid) return token;\n    }\n\n    const refreshTokenValue = yield call(getRefreshTokenFromStorage);\n    if (!refreshTokenValue) {\n        yield put({ type: LOGOUT_REQUEST });\n        if (withErrorIfMissing) {\n            throw new UserError('User not logged in.');\n        }\n        return null;\n    }\n\n    const refreshTokenValid = yield call(validateToken, refreshTokenValue);\n    if (!refreshTokenValid) {\n        yield put({ type: LOGOUT_REQUEST });\n        if (withErrorIfMissing) {\n            throw new UserError('User not logged in.');\n        }\n        return null;\n    }\n\n    const newToken = yield call(refreshToken, refreshTokenValue);\n    yield call(saveAccessToken, newToken);\n    return newToken;\n}\n\n// Login\n\nexport function* handleLoginRequest(action: LoginRequest): SagaIterator {\n    try {\n        const data = yield call(getTokens, action.creds);\n        yield call(saveTokens, data);\n        yield call(saveUsername, action.creds.username);\n        yield put({ type: LOGIN_SUCCESS, username: action.creds.username });\n    } catch (e) {\n        yield put({ type: LOGIN_FAILURE });\n        yield call(putError, e);\n    }\n}\n\nexport function* handleLoginSuccess(): SagaIterator {\n    yield put({ type: GAME_LIST_REQUEST });\n}\n\n// Logout\n\nexport function* logoutToken(): SagaIterator {\n    const token = yield call(getTokenFromStorage);\n    if (token) {\n        const tokenValid = yield call(validateToken, token);\n        if (tokenValid) {\n            yield call(deleteAccessToken, token);\n        }\n    }\n}\n\nexport function* logoutRefreshToken(): SagaIterator {\n    const refreshTokenValue = yield call(getRefreshTokenFromStorage);\n    if (refreshTokenValue) {\n        const refreshTokenValid = yield call(validateToken, refreshTokenValue);\n        if (refreshTokenValid) {\n            yield call(deleteRefreshToken, refreshTokenValue);\n        }\n    }\n}\n\nexport function* handleLogoutRequest(): SagaIterator {\n    try {\n        yield call(logoutToken);\n        yield call(logoutRefreshToken);\n        yield call(cleanTokens);\n\n        yield put({ type: CARDSET_LIST_RESET });\n        yield put({ type: GAME_LIST_RESET });\n        yield put({ type: LOGOUT_SUCCESS });\n    } catch (e) {\n        yield put({ type: LOGOUT_FAILURE });\n        yield call(putError, e);\n    }\n}\n\n// Sign-up\n\nexport function* handleSignupRequest(action: SignUpRequest): SagaIterator {\n    try {\n        const data = yield call(registerUser, action.creds);\n        yield call(saveTokens, data);\n        yield call(saveUsername, action.creds.username);\n        yield put({ type: SIGNUP_SUCCESS });\n        yield put({ type: LOGIN_SUCCESS, username: action.creds.username });\n    } catch (e) {\n        yield put({ type: SIGNUP_FAILURE });\n        yield call(putError, e);\n    }\n}\n\n// Init\nexport function* handleInitRequest(): SagaIterator {\n    try {\n        const token = yield call(getToken, false);\n        if (token) {\n            const username = yield call(getUsernameFromStorage);\n            yield put({ type: LOGIN_SUCCESS, username });\n        }\n    } catch (e) {}\n}\n\n// Authorized Requests\nexport function* authorizedGetRequest(url: string): SagaIterator {\n    const token = yield call(getToken, true);\n    return yield call(getRequest, url, token);\n}\n\nexport function* authorizedPostRequest(url: string, data: any): SagaIterator {\n    const token = yield call(getToken, true);\n    return yield call(postRequest, url, token, data);\n}\n\nexport function* authorizedDeleteRequest(url: string): SagaIterator {\n    const token = yield call(getToken, true);\n    return yield call(deleteRequest, url, token);\n}\n\nexport function* authorizedPostFormDataRequest(\n    url: string,\n    data: FormData,\n    progressCallback: (event: ProgressEvent) => void,\n    cancelToken: CancelToken,\n    cancelCallback: () => void,\n): SagaIterator {\n    const token = yield call(getToken, true);\n    return yield call(postRequestFormDataCancelable, url, token, data, progressCallback, cancelToken, cancelCallback);\n}\n\nexport function* authorizedPutRequest(url: string, data: any): SagaIterator {\n    const token = yield call(getToken, true);\n    return yield call(putRequest, url, token, data);\n}\n\n// Game\nexport function* handleGameCreateRequest(action: GameCreateRequest): SagaIterator {\n    try {\n        yield call(authorizedPostRequest, '/api/games', { name: action.gamename });\n        yield put({\n            type: GAME_CREATE_SUCCESS,\n        });\n        yield put({ type: GAME_LIST_REQUEST });\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameDeleteRequest(action: GameDeleteRequest): SagaIterator {\n    try {\n        yield call(authorizedDeleteRequest, '/api/games/' + action.gameId);\n        yield put({ type: GAME_LIST_REQUEST });\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameRenameRequest(action: GameRenameRequest): SagaIterator {\n    try {\n        yield delay(500);\n        yield call(authorizedPutRequest, '/api/games/' + action.gameId, { name: action.newName });\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameListRequest(): SagaIterator {\n    try {\n        const resp = yield call(authorizedGetRequest, '/api/games');\n        const allIds = resp.data.games.map((g: GameType) => g.id);\n        const byId = resp.data.games.reduce((obj: GamesCollection, g: GameType) => {\n            obj[g.id] = g;\n            return obj;\n        }, {});\n        yield put({\n            type: GAME_LIST_SUCCESS,\n            allIds,\n            byId,\n        });\n    } catch (e) {\n        yield put({ type: GAME_LIST_FAILURE });\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameSelectRequest(action: GameSelectRequest): SagaIterator {\n    try {\n        const resp = yield call(authorizedGetRequest, '/api/games/' + action.id);\n        yield put({\n            type: GAME_SELECT_SUCCESS,\n            id: action.id,\n        });\n\n        if (action.updateCardSets) {\n            const allIds = resp.data.cardsets.map((g: CardSetType) => g.id);\n            const byId = resp.data.cardsets.reduce((obj: CardSetsCollection, g: CardSetType) => {\n                obj[g.id] = g;\n                return obj;\n            }, {});\n            yield put({\n                type: CARDSET_LIST_SUCCESS,\n                allIds,\n                byId,\n            });\n        }\n    } catch (e) {\n        yield put({ type: GAME_SELECT_FAILURE });\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameCreatePdfRequest(action: GameCreatePdfRequest): SagaIterator {\n    let progressId = null;\n    try {\n        progressId = yield call(putProgress, 'Generating PDF');\n\n        const token = yield call(getToken, true, true);\n\n        yield call(\n            generatePdfUsingWorker,\n            token,\n            action.collectionType,\n            action.collectionId,\n            action.pageWidth,\n            action.pageHeight,\n            action.topBottomMargin,\n            action.leftRightMargin,\n            action.verticalSpace,\n            action.horizontalSpace,\n            action.includeBleedingArea,\n            action.cutMarksForScissors,\n            action.cutMarksForGuillotine,\n            action.cutMarksInMarginArea,\n            action.cutMarksOnFrontSideOnly,\n        );\n        yield call(hideProgress, progressId);\n        yield call(putInfo, 'PDF generated.');\n        yield put({\n            type: GAME_CREATE_PDF_SUCCESS,\n        });\n    } catch (e) {\n        yield put({ type: GAME_CREATE_PDF_FAILURE });\n        if (progressId !== null) yield call(hideProgress, progressId);\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameCreatePngRequest(action: GameCreatePngRequest): SagaIterator {\n    let progressId = null;\n    try {\n        progressId = yield call(putProgress, 'Generating PNG');\n\n        const token = yield call(getToken, true, true);\n\n        yield call(generatePngUsingWorker, token, action.collectionType, action.collectionId, action.dpi);\n        yield call(hideProgress, progressId);\n        yield call(putInfo, 'PNG generated.');\n        yield put({\n            type: GAME_CREATE_PNG_SUCCESS,\n        });\n    } catch (e) {\n        yield put({ type: GAME_CREATE_PNG_FAILURE });\n        if (progressId !== null) yield call(hideProgress, progressId);\n        yield call(putError, e);\n    }\n}\n\nexport function* handleGameGetAttributionsRequest(): SagaIterator {\n    let progressId = null;\n    try {\n        progressId = yield call(putProgress, 'Retrieving attributions');\n\n        const token = yield call(getToken, true, true);\n        const state: State = yield select();\n\n        let attributions = [];\n        if (state.games.active !== null) {\n            attributions = yield call(retrieveGameAttributions, token, state.games.active);\n        }\n        yield call(hideProgress, progressId);\n        yield call(putInfo, 'Attributions retrieved.');\n        yield put({\n            type: GAME_GET_ATTRIBUTIONS_SUCCESS,\n            attributions,\n        });\n    } catch (e) {\n        yield put({ type: GAME_GET_ATTRIBUTIONS_FAILURE });\n        if (progressId !== null) yield call(hideProgress, progressId);\n        yield call(putError, e);\n    }\n}\n\n// Card Set\n\nexport function* handleCardSetCreateRequest(action: CardSetCreateRequest): SagaIterator {\n    try {\n        yield call(authorizedPostRequest, '/api/cardsets', {\n            name: action.cardsetname,\n            gameId: action.gameId,\n            data: JSON.stringify({ width: action.width, height: action.height, version: CURRENT_CARDSET_VERSION }),\n        });\n        yield put({\n            type: CARDSET_CREATE_SUCCESS,\n        });\n        yield put(gameSelectRequest(action.gameId, true));\n    } catch (e) {\n        yield put({ type: CARDSET_CREATE_FAILURE });\n        yield call(putError, e);\n    }\n}\n\nexport function* handleCardSetDeleteRequest(action: CardSetDeleteRequest): SagaIterator {\n    try {\n        yield call(authorizedDeleteRequest, '/api/cardsets/' + action.cardSetId);\n        yield put({ type: GAME_LIST_REQUEST });\n\n        const state = yield select();\n        yield put(gameSelectRequest(state.games.active, true));\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nexport function* handleCardSetRenameRequest(action: CardSetRenameRequest): SagaIterator {\n    try {\n        yield delay(500);\n        yield call(authorizedPutRequest, '/api/cardsets/' + action.cardSetId, { name: action.newName });\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nfunction loadImageInfo(url: string): Promise<{ width: number; height: number }> {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = new Image();\n\n            img.addEventListener('load', function () {\n                resolve({\n                    width: this.naturalWidth,\n                    height: this.naturalHeight,\n                });\n            });\n            img.addEventListener('error', function (err) {\n                reject(err);\n            });\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n\nexport async function processData(data: CardSetSelectSuccessData): Promise<CardSetSelectSuccessDataV3> {\n    let processedData = data;\n\n    if (!('version' in processedData)) {\n        if (!('placeholdersAllIds' in processedData) && 'placeholders' in processedData) {\n            (processedData as CardSetSelectSuccessDataV2).placeholdersAllIds = Object.keys(\n                (processedData as CardSetSelectSuccessDataV2).placeholders,\n            );\n        }\n\n        (processedData as CardSetSelectSuccessDataV2).version = 2;\n        for (const plId in (processedData as CardSetSelectSuccessDataV2).placeholders) {\n            const placeholder = (processedData as CardSetSelectSuccessDataV2).placeholders[plId];\n            placeholder.x += BLEED_WIDTH;\n            placeholder.y += BLEED_WIDTH;\n        }\n    }\n\n    if (processedData.version === 2) {\n        const fieldsAllIds = processedData.placeholdersAllIds;\n        const fields: FieldInfoByCardCollection = {};\n\n        for (const cardId of processedData.cardsAllIds) {\n            fields[cardId] = {};\n\n            for (const fieldId of fieldsAllIds) {\n                const placeholder = processedData.placeholders[fieldId];\n                if (placeholder.type === 'image') {\n                    if (cardId in processedData.images && fieldId in processedData.images[cardId]) {\n                        const imageInfo = processedData.images[cardId][fieldId];\n                        fields[cardId][fieldId] = {\n                            ...placeholder,\n                            type: 'image',\n                            url: imageInfo && imageInfo.url,\n                            global: imageInfo && imageInfo.global,\n                            base64: imageInfo && imageInfo.base64,\n                            color: imageInfo && imageInfo.color,\n                            imageWidth: imageInfo && imageInfo.width,\n                            imageHeight: imageInfo && imageInfo.height,\n                        };\n                    } else {\n                        fields[cardId][fieldId] = {\n                            ...placeholder,\n                            type: 'image',\n                        };\n                    }\n                } else if (placeholder.type === 'text') {\n                    if (cardId in processedData.texts && fieldId in processedData.texts[cardId]) {\n                        fields[cardId][fieldId] = {\n                            ...placeholder,\n                            type: 'text',\n                            ...processedData.texts[cardId][fieldId],\n                        };\n                    } else {\n                        fields[cardId][fieldId] = {\n                            ...placeholder,\n                            type: 'text',\n                            value: '',\n                        };\n                    }\n                }\n            }\n        }\n\n        processedData = {\n            version: 3,\n            width: processedData.width,\n            height: processedData.height,\n            isTwoSided: processedData.isTwoSided,\n            snappingDistance: processedData.snappingDistance,\n            cardsAllIds: processedData.cardsAllIds,\n            cardsById: processedData.cardsById,\n            fields,\n            fieldsAllIds,\n            zoom: processedData.zoom,\n        };\n    }\n\n    // We must load image data on each new load because user can upload new images\n    // that have different dimensions.\n    for (const cardId in processedData.fields) {\n        for (const fieldId in processedData.fields[cardId]) {\n            const fieldInfo = processedData.fields[cardId][fieldId];\n            if (fieldInfo.type === 'image' && fieldInfo.url) {\n                try {\n                    const info = await loadImageInfo(fieldInfo.url);\n                    if (info.width !== fieldInfo.imageWidth || info.height !== fieldInfo.imageHeight) {\n                        fieldInfo.imageWidth = info.width;\n                        fieldInfo.imageHeight = info.height;\n                        fieldInfo.cx = 0;\n                        fieldInfo.cy = 0;\n                        fieldInfo.zoom = 1;\n                    }\n                } catch {}\n            }\n        }\n    }\n\n    return processedData;\n}\n\nexport function* handleCardSetSelectRequest(action: CardSetSelectRequest): SagaIterator {\n    try {\n        const resp = yield call(authorizedGetRequest, '/api/cardsets/' + action.id);\n        const parsedData = JSON.parse(resp.data.data);\n        const processedData: CardSetSelectSuccessDataV3 = yield call(processData, parsedData);\n\n        yield call(loadFontsUsedInPlaceholders, processedData);\n        yield put({\n            type: CARDSETS_SELECT_SUCCESS,\n            id: resp.data.id,\n            name: resp.data.name,\n        });\n        yield put({\n            type: CARDSET_SELECT_SUCCESS,\n            data: processedData,\n        });\n        yield put(gameSelectRequest(resp.data.gameId, false));\n        yield put(ActionCreators.clearHistory());\n    } catch (e) {\n        yield put({ type: CARDSET_SELECT_FAILURE });\n        yield call(putError, e);\n    }\n}\n\nexport function* handleCardSetUploadImage(action: CardSetUploadImage): SagaIterator {\n    let progressId = null;\n    try {\n        progressId = yield call(putProgress, `Uploading ${action.file.name}`);\n        const formData = new FormData();\n        formData.set('gameId', action.gameId);\n        formData.append('image', action.file, action.file.name);\n\n        const data = yield call(\n            authorizedPostFormDataRequest,\n            '/api/images',\n            formData,\n            (event: ProgressEvent) => action.progress(event.lengthComputable, event.loaded, event.total),\n            action.cancelToken,\n            () => {\n                action.abort();\n            },\n        );\n        if (data !== undefined) {\n            // not cancelled\n            action.load(data.imageId.toString());\n            yield put({ type: CARDSET_UPLOAD_IMAGE_SUCCESS });\n            yield call(putInfo, `${action.file.name} uploaded`);\n        }\n        yield call(hideProgress, progressId);\n    } catch (e) {\n        yield put({ type: CARDSET_UPLOAD_IMAGE_FAILURE });\n        if (progressId !== null) yield call(hideProgress, progressId);\n        yield call(putError, e);\n        action.error(e.message);\n    }\n}\n\nexport function* handleCardSetDeleteImage(action: CardSetDeleteImage): SagaIterator {\n    try {\n        yield call(authorizedDeleteRequest, '/api/images/' + action.imageId);\n        action.load();\n    } catch (e) {\n        action.error(e.message);\n    }\n}\n\nfunction walkChildren(node: XmlNode, color: string) {\n    if (node.type === 'element') {\n        for (const child of node.children) {\n            if (child.type === 'element')\n                if (child.name === 'path') {\n                    child.attr['fill'] = color;\n                }\n            walkChildren(child, color);\n        }\n    }\n}\n\nfunction adjustSvg(data: string, preserveAspectRatio: boolean, color?: string): string {\n    const doc = new XmlDocument(data);\n    if (!preserveAspectRatio) {\n        doc.attr['preserveAspectRatio'] = 'none';\n    }\n\n    if (color) {\n        walkChildren(doc, color);\n    }\n\n    return btoa(doc.toString({ compressed: true }));\n}\n\nexport function* handleCardSetFitChange(action: CardSetChangeFitForActiveField): SagaIterator {\n    try {\n        yield delay(100);\n        const state: State = yield select();\n\n        if (state.cardset.present.activeFieldId === undefined) {\n            return;\n        }\n\n        for (const cardId in state.cardset.present.cardsById) {\n            const fieldInfo = state.cardset.present.fields[cardId][state.cardset.present.activeFieldId];\n            if (fieldInfo.type === 'image' && fieldInfo.url) {\n                const imageResp = yield call(authorizedGetRequest, fieldInfo.url);\n                if (imageResp.headers['content-type'] === 'image/svg+xml') {\n                    if (action.fit === 'stretch') {\n                        const svg = adjustSvg(imageResp.data, false, fieldInfo.color);\n                        yield put(cardSetChangeImageBase64(cardId, state.cardset.present.activeFieldId, svg));\n                    } else if (fieldInfo.color) {\n                        const svg = adjustSvg(imageResp.data, true, fieldInfo.color);\n                        yield put(cardSetChangeImageBase64(cardId, state.cardset.present.activeFieldId, svg));\n                    } else {\n                        yield put(cardSetChangeImageBase64(cardId, state.cardset.present.activeFieldId, undefined));\n                    }\n                }\n            }\n        }\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nexport function* handleCardSetChangeImage(action: CardSetChangeImage): SagaIterator {\n    try {\n        yield delay(100);\n        const state: State = yield select();\n\n        const cardsToFix =\n            state.cardset.present.applyToAllCards || action.cardId === undefined\n                ? state.cardset.present.cardsAllIds\n                : [action.cardId];\n\n        for (const cardId of cardsToFix) {\n            const cardFields = state.cardset.present.fields[cardId];\n            const imageInfo = cardFields[action.fieldId];\n            if (imageInfo.type === 'image' && imageInfo.url) {\n                const imageResp = yield call(authorizedGetRequest, imageInfo.url);\n\n                if (imageResp.headers['content-type'] === 'image/svg+xml') {\n                    const name = imageInfo.name || imageInfo.id;\n\n                    for (const fieldId in cardFields) {\n                        const fieldInfo = cardFields[fieldId];\n\n                        if ((fieldInfo.name === name || fieldInfo.id === name) && fieldInfo.type === 'image') {\n                            if (fieldInfo.fit === 'stretch') {\n                                const svg = adjustSvg(imageResp.data, false, imageInfo.color);\n                                yield put(cardSetChangeImageBase64(cardId, fieldId, svg));\n                            } else if (imageInfo.color) {\n                                const svg = adjustSvg(imageResp.data, true, imageInfo.color);\n                                yield put(cardSetChangeImageBase64(cardId, fieldId, svg));\n                            } else {\n                                yield put(cardSetChangeImageBase64(cardId, fieldId, undefined));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } catch (e) {\n        yield call(putError, e);\n    }\n}\n\nfunction closeHandler(e: Event) {\n    e.preventDefault();\n    e.returnValue = true;\n}\n\nfunction preventWindowClose() {\n    window.addEventListener('beforeunload', closeHandler);\n}\n\nfunction allowWindowClose() {\n    window.removeEventListener('beforeunload', closeHandler);\n}\n\nexport function* handleCardSetChange(): SagaIterator {\n    let progressId = null;\n\n    try {\n        preventWindowClose();\n        progressId = yield call(putProgress, 'Saving Card Set');\n\n        yield delay(1000);\n        const state: State = yield select();\n\n        const cardsetId = state.cardsets.active;\n        if (cardsetId === null) throw Error('Save failed.');\n        const data = {\n            width: state.cardset.present.width,\n            height: state.cardset.present.height,\n            isTwoSided: state.cardset.present.isTwoSided,\n            snappingDistance: state.cardset.present.snappingDistance,\n            version: state.cardset.present.version,\n            cardsAllIds: state.cardset.present.cardsAllIds,\n            cardsById: state.cardset.present.cardsById,\n            fieldsAllIds: state.cardset.present.fieldsAllIds,\n            fields: state.cardset.present.fields,\n            zoom: state.cardset.present.zoom,\n        };\n\n        yield call(authorizedPutRequest, '/api/cardsets/' + cardsetId, {\n            name: state.cardsets.byId[cardsetId].name,\n            data: JSON.stringify(data),\n        });\n        yield call(hideProgress, progressId);\n        yield call(putInfo, 'Card Set saved');\n        allowWindowClose();\n    } catch (e) {\n        if (progressId !== null) yield call(hideProgress, progressId);\n        yield call(putError, e);\n        allowWindowClose();\n    }\n}\n\n// Images\nexport function* handleImageListRequest(action: ImageListRequest): SagaIterator {\n    try {\n        yield delay(200);\n        const state = yield select();\n\n        const filter = encodeURIComponent(action.filter);\n        const location = encodeURIComponent(action.location);\n        const game = encodeURIComponent(state.games.active);\n        const resp = yield call(authorizedGetRequest, `/api/images?name=${filter}&location=${location}&game=${game}`);\n        const images = resp.data.images;\n        yield put({\n            type: IMAGE_LIST_SUCCESS,\n            images,\n        });\n    } catch (e) {\n        yield put({ type: IMAGE_LIST_FAILURE });\n        yield call(putError, e);\n    }\n}\n\n// All\nexport function* rootSaga(): SagaIterator {\n    yield all([\n        takeEvery(MESSAGE_DISPLAY, handleMessageDisplay),\n        takeLatest(LOGIN_REQUEST, handleLoginRequest),\n        takeLatest(LOGIN_SUCCESS, handleLoginSuccess),\n        takeLatest(LOGOUT_REQUEST, handleLogoutRequest),\n        takeLatest(SIGNUP_REQUEST, handleSignupRequest),\n        takeLatest(GAME_CREATE_REQUEST, handleGameCreateRequest),\n        takeLatest(GAME_DELETE_REQUEST, handleGameDeleteRequest),\n        takeLatest(GAME_RENAME_REQUEST, handleGameRenameRequest),\n        takeLatest(GAME_LIST_REQUEST, handleGameListRequest),\n        takeLatest(GAME_SELECT_REQUEST, handleGameSelectRequest),\n        takeLatest(GAME_CREATE_PDF_REQUEST, handleGameCreatePdfRequest),\n        takeLatest(GAME_CREATE_PNG_REQUEST, handleGameCreatePngRequest),\n        takeLatest(GAME_GET_ATTRIBUTIONS_REQUEST, handleGameGetAttributionsRequest),\n        takeLatest(CARDSET_CREATE_REQUEST, handleCardSetCreateRequest),\n        takeLatest(CARDSET_DELETE_REQUEST, handleCardSetDeleteRequest),\n        takeLatest(CARDSET_RENAME_REQUEST, handleCardSetRenameRequest),\n        takeLatest(CARDSET_SELECT_REQUEST, handleCardSetSelectRequest),\n        takeEvery(CARDSET_UPLOAD_IMAGE, handleCardSetUploadImage),\n        takeEvery(CARDSET_DELETE_IMAGE, handleCardSetDeleteImage),\n        takeEvery(CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD, handleCardSetFitChange),\n        takeEvery(CARDSET_CHANGE_IMAGE, handleCardSetChangeImage),\n\n        takeLatest(CARDSET_CREATE_CARD, handleCardSetChange),\n        takeLatest(CARDSET_ROTATE_CARDS_RIGHT, handleCardSetChange),\n        takeLatest(CARDSET_ROTATE_CARDS_LEFT, handleCardSetChange),\n        takeLatest(CARDSET_CLONE_CARD, handleCardSetChange),\n        takeLatest(CARDSET_REMOVE_CARD, handleCardSetChange),\n        takeLatest(CARDSET_UPDATE_CARD_COUNT, handleCardSetChange),\n        takeLatest(CARDSET_ADD_TEXT_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_ADD_IMAGE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_FIELD_NAME, handleCardSetChange),\n        takeLatest(CARDSET_REMOVE_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_RAISE_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_RAISE_ACTIVE_FIELD_TO_TOP, handleCardSetChange),\n        takeLatest(CARDSET_LOWER_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM, handleCardSetChange),\n        takeLatest(CARDSET_LOCK_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_UNLOCK_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_WIDTH, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_HEIGHT, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_IS_TWO_SIDED, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_SNAPPING_DISTANCE, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIELD_POSITION, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIELD_PAN, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIELD_ZOOM, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIELD_SIZE, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_FIELD_ANGLE, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_TEXT, handleCardSetChange),\n        takeLatest(CARDSET_CHANGE_IMAGE, handleCardSetChange),\n        takeLatest(CARDSET_SET_ZOOM, handleCardSetChange),\n        takeLatest(CARDSET_IMPORT_DATA, handleCardSetChange),\n        takeLatest(CARDSET_UNDO, handleCardSetChange),\n        takeLatest(CARDSET_REDO, handleCardSetChange),\n\n        takeLatest(IMAGE_LIST_REQUEST, handleImageListRequest),\n\n        takeLatest(INIT_REQUEST, handleInitRequest),\n    ]);\n}\n","import { combineReducers } from 'redux';\nimport shortid from 'shortid';\nimport undoable from 'redux-undo';\n\nimport {\n    CARDSET_ADD_IMAGE_FIELD,\n    CARDSET_ADD_TEXT_FIELD,\n    CARDSET_CHANGE_ACTIVE_FIELD_NAME,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT,\n    CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT,\n    CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD,\n    CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD,\n    CARDSET_CHANGE_HEIGHT,\n    CARDSET_CHANGE_IMAGE,\n    CARDSET_CHANGE_IMAGE_BASE64,\n    CARDSET_CHANGE_IS_TWO_SIDED,\n    CARDSET_CHANGE_FIELD_ANGLE,\n    CARDSET_CHANGE_FIELD_SIZE,\n    CARDSET_CHANGE_SNAPPING_DISTANCE,\n    CARDSET_CHANGE_TEXT,\n    CARDSET_CHANGE_WIDTH,\n    CARDSET_CLONE_CARD,\n    CARDSET_CREATE_CARD,\n    CARDSET_IMPORT_DATA,\n    CARDSET_LIST_RESET,\n    CARDSET_LIST_SUCCESS,\n    CARDSET_LOCK_ACTIVE_FIELD,\n    CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM,\n    CARDSET_RAISE_ACTIVE_FIELD_TO_TOP,\n    CARDSET_REMOVE_ACTIVE_FIELD,\n    CARDSET_REMOVE_CARD,\n    CARDSET_RENAME_REQUEST,\n    CARDSET_SELECT_FAILURE,\n    CARDSET_SELECT_REQUEST,\n    CARDSET_SELECT_SUCCESS,\n    CARDSET_SET_ACTIVE_CARD_AND_FIELD,\n    CARDSET_SET_SIDEBAR_STATE,\n    CARDSET_SET_ZOOM,\n    CARDSET_UNLOCK_ACTIVE_FIELD,\n    CARDSET_UPDATE_CARD_COUNT,\n    CardSetAction,\n    GAME_CREATE_PDF_FAILURE,\n    GAME_CREATE_PDF_REQUEST,\n    GAME_CREATE_PDF_SUCCESS,\n    GAME_CREATE_PNG_FAILURE,\n    GAME_CREATE_PNG_REQUEST,\n    GAME_CREATE_PNG_SUCCESS,\n    GAME_LIST_RESET,\n    GAME_LIST_SUCCESS,\n    GAME_RENAME_REQUEST,\n    GAME_SELECT_FAILURE,\n    GAME_SELECT_REQUEST,\n    GAME_SELECT_SUCCESS,\n    GameAction,\n    IMAGE_LIST_REQUEST,\n    IMAGE_LIST_SUCCESS,\n    ImageListAction,\n    LOGIN_FAILURE,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGOUT_SUCCESS,\n    LoginAction,\n    MESSAGE_DISPLAY,\n    MESSAGE_HIDE,\n    MessageAction,\n    SIGNUP_FAILURE,\n    SIGNUP_REQUEST,\n    SIGNUP_SUCCESS,\n    SidebarState,\n    SignUpAction,\n    CARDSET_CHANGE_FIELD_ZOOM,\n    CARDSET_CHANGE_FIELD_PAN,\n    CardSetsAction,\n    CARDSETS_SELECT_SUCCESS,\n    CARDSET_CHANGE_FIELD_POSITION,\n    CARDSET_UNDO,\n    CARDSET_REDO,\n    Action,\n    CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD,\n    CARDSET_CHANGE_APPLY_TO_ALLCARDS,\n    CARDSET_RAISE_ACTIVE_FIELD,\n    CARDSET_LOWER_ACTIVE_FIELD,\n    CARDSET_ROTATE_CARDS_RIGHT,\n    CARDSET_ROTATE_CARDS_LEFT,\n    GAME_GET_ATTRIBUTIONS_SUCCESS,\n    GAME_GET_ATTRIBUTIONS_FAILURE,\n} from './actions';\nimport {\n    CURRENT_CARDSET_VERSION,\n    DEFAULT_FONT,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_VARIANT,\n    DEFAULT_LINE_HEIGHT,\n    BLEED_WIDTH,\n} from './constants';\nimport {\n    CardSetsCollection,\n    CardsCollection,\n    GamesCollection,\n    IdsArray,\n    ImageArray,\n    MessageType,\n    FieldInfoByCardCollection,\n    FieldInfoCollection,\n    FieldInfo,\n} from './types';\nimport { rotateVec } from './utils';\n\nexport const ACTIVITY_SELECTING = 0x1;\nexport const ACTIVITY_CREATING_PDF = 0x2;\nexport const ACTIVITY_CREATING_PNG = 0x4;\n\nexport interface MessageState {\n    messages: MessageType[];\n}\n\nexport const DefaultMessageState: MessageState = {\n    messages: [],\n};\n\nexport interface AuthState {\n    isAuthenticated?: boolean;\n    user: string;\n}\n\nexport const DefaultAuthState: AuthState = {\n    isAuthenticated: undefined,\n    user: '', // XXX: user can manipulate this information by changing local storage. Do not trust this info.\n};\n\nexport interface SignUpState {\n    signingup: boolean;\n}\n\nexport const DefaultSignUpState: SignUpState = {\n    signingup: false,\n};\n\nexport interface GameState {\n    byId: GamesCollection;\n    allIds: IdsArray;\n    activity: number;\n    active: string | null;\n    attributions: string[];\n}\n\nexport const DefaultGameState: GameState = {\n    byId: {},\n    allIds: [],\n    activity: 0,\n    active: null,\n    attributions: [],\n};\n\nexport interface TextSettings {\n    align: string;\n    color: string;\n    fontFamily: string;\n    fontVariant: string;\n    fontSize: number;\n    lineHeight?: number;\n}\n\nexport interface CardSetsState {\n    byId: CardSetsCollection;\n    allIds: IdsArray;\n    active: string | null;\n}\n\nexport const DefaultCardSetsState: CardSetsState = {\n    byId: {},\n    allIds: [],\n    active: null,\n};\n\nexport interface CardSetState {\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    snappingDistance: number;\n    version: number;\n    activity: number;\n    cardsAllIds: IdsArray;\n    cardsById: CardsCollection;\n    activeCardId?: string;\n    isBackActive: boolean;\n    activeFieldId?: string;\n    fieldsAllIds: IdsArray;\n    fields: FieldInfoByCardCollection;\n    textSettings: TextSettings;\n    activeSidebar: SidebarState | null;\n    zoom: number;\n    applyToAllCards: boolean;\n}\n\nexport const DefaultCardSetState: CardSetState = {\n    width: 63.5,\n    height: 88.9,\n    isTwoSided: false,\n    snappingDistance: 1,\n    version: CURRENT_CARDSET_VERSION,\n    activity: 0,\n    cardsById: {},\n    cardsAllIds: [],\n    activeCardId: undefined,\n    isBackActive: false,\n    activeFieldId: undefined,\n    fieldsAllIds: [],\n    fields: {},\n    textSettings: {\n        align: 'left',\n        color: '#000000',\n        fontFamily: DEFAULT_FONT,\n        fontVariant: DEFAULT_FONT_VARIANT,\n        fontSize: DEFAULT_FONT_SIZE,\n        lineHeight: DEFAULT_LINE_HEIGHT,\n    },\n    activeSidebar: null,\n    zoom: 1,\n    applyToAllCards: false,\n};\n\nexport interface ImageState {\n    activity: number;\n    filter: string;\n    images: ImageArray;\n}\n\nexport const DefaultImageState: ImageState = {\n    activity: 0,\n    filter: '',\n    images: [],\n};\n\nexport interface State {\n    message: MessageState;\n    auth: AuthState;\n    signup: SignUpState;\n    games: GameState;\n    cardsets: CardSetsState;\n    cardset: {\n        present: CardSetState;\n    };\n    images: ImageState;\n}\n\nexport const DefaultState: State = {\n    message: DefaultMessageState,\n    auth: DefaultAuthState,\n    signup: DefaultSignUpState,\n    games: DefaultGameState,\n    cardsets: DefaultCardSetsState,\n    cardset: {\n        present: DefaultCardSetState,\n    },\n    images: DefaultImageState,\n};\n\nexport function message(state: MessageState = DefaultMessageState, action: MessageAction): MessageState {\n    switch (action.type) {\n        case MESSAGE_DISPLAY:\n            const found = state.messages.find(m => m.id === action.message.id);\n            if (found) return state;\n\n            return {\n                ...state,\n                messages: state.messages.concat(action.message),\n            };\n        case MESSAGE_HIDE:\n            return Object.assign({}, state, {\n                messages: state.messages.filter(m => m.id !== action.messageId),\n            });\n        default:\n            return state;\n    }\n}\n\nexport function auth(state: AuthState = DefaultAuthState, action: LoginAction): AuthState {\n    switch (action.type) {\n        case LOGIN_REQUEST:\n            return Object.assign({}, state, {\n                isAuthenticated: undefined,\n                user: '',\n            });\n        case LOGIN_SUCCESS:\n            return Object.assign({}, state, {\n                isAuthenticated: true,\n                user: action.username,\n            });\n        case LOGIN_FAILURE:\n            return Object.assign({}, state, {\n                isAuthenticated: false,\n            });\n        case LOGOUT_SUCCESS:\n            return Object.assign({}, state, {\n                isAuthenticated: false,\n                user: '',\n            });\n        default:\n            return state;\n    }\n}\n\nexport function signup(state: SignUpState = DefaultSignUpState, action: SignUpAction): SignUpState {\n    switch (action.type) {\n        case SIGNUP_REQUEST:\n            return Object.assign({}, state, {\n                signingup: true,\n            });\n        case SIGNUP_SUCCESS:\n            return Object.assign({}, state, {\n                signingup: false,\n            });\n        case SIGNUP_FAILURE:\n            return Object.assign({}, state, {\n                signingup: false,\n            });\n        default:\n            return state;\n    }\n}\n\nexport function games(state: GameState = DefaultGameState, action: GameAction): GameState {\n    switch (action.type) {\n        case GAME_RENAME_REQUEST:\n            const game = state.byId[action.gameId];\n\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [game.id]: {\n                        ...game,\n                        name: action.newName,\n                    },\n                },\n            };\n        case GAME_LIST_SUCCESS:\n            return Object.assign({}, state, {\n                byId: action.byId,\n                allIds: action.allIds,\n            });\n        case GAME_LIST_RESET:\n            return Object.assign({}, state, {\n                activity: 0,\n                byId: {},\n                allIds: [],\n            });\n        case GAME_SELECT_REQUEST:\n            return Object.assign({}, state, {\n                activity: ACTIVITY_SELECTING,\n            });\n        case GAME_SELECT_SUCCESS:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_SELECTING,\n                active: action.id,\n                attributions: [],\n            });\n        case GAME_SELECT_FAILURE:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_SELECTING,\n                attributions: [],\n            });\n        case GAME_CREATE_PDF_REQUEST:\n            return Object.assign({}, state, {\n                activity: state.activity | ACTIVITY_CREATING_PDF,\n            });\n        case GAME_CREATE_PDF_SUCCESS:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_CREATING_PDF,\n            });\n        case GAME_CREATE_PDF_FAILURE:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_CREATING_PDF,\n            });\n        case GAME_CREATE_PNG_REQUEST:\n            return Object.assign({}, state, {\n                activity: state.activity | ACTIVITY_CREATING_PNG,\n            });\n        case GAME_CREATE_PNG_SUCCESS:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_CREATING_PNG,\n            });\n        case GAME_CREATE_PNG_FAILURE:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_CREATING_PNG,\n            });\n        case GAME_GET_ATTRIBUTIONS_SUCCESS:\n            return {\n                ...state,\n                attributions: action.attributions,\n            };\n        case GAME_GET_ATTRIBUTIONS_FAILURE:\n            return {\n                ...state,\n                attributions: [],\n            };\n        default:\n            return state;\n    }\n}\n\nexport function cardsets(state: CardSetsState = DefaultCardSetsState, action: CardSetsAction): CardSetsState {\n    switch (action.type) {\n        case CARDSETS_SELECT_SUCCESS:\n            return {\n                ...state,\n                active: action.id,\n                byId: Object.assign({}, state.byId, {\n                    [action.id]: {\n                        id: action.id,\n                        name: action.name,\n                    },\n                }),\n            };\n        case CARDSET_RENAME_REQUEST:\n            const cardset = state.byId[action.cardSetId];\n\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [cardset.id]: {\n                        ...cardset,\n                        name: action.newName,\n                    },\n                },\n            };\n        case CARDSET_LIST_SUCCESS:\n            return Object.assign({}, state, {\n                byId: action.byId,\n                allIds: action.allIds,\n            });\n        case CARDSET_LIST_RESET:\n            return Object.assign({}, state, {\n                byId: {},\n                allIds: [],\n            });\n        default:\n            return state;\n    }\n}\n\nfunction resizeFields(fields: FieldInfoByCardCollection, widthRatio: number, heightRatio: number) {\n    let newFields = { ...fields };\n    for (const cardId in newFields) {\n        let cardFields = { ...fields[cardId] };\n        for (const fieldId in cardFields) {\n            let fieldInfo = { ...cardFields[fieldId] };\n            fieldInfo.x = (fieldInfo.x - BLEED_WIDTH) * widthRatio + BLEED_WIDTH;\n            fieldInfo.y = (fieldInfo.y - BLEED_WIDTH) * heightRatio + BLEED_WIDTH;\n            fieldInfo.width *= widthRatio;\n            fieldInfo.height *= heightRatio;\n            if (fieldInfo.type === 'image') {\n                if (fieldInfo.cx) {\n                    fieldInfo.cx *= widthRatio;\n                }\n                if (fieldInfo.cy) {\n                    fieldInfo.cy *= heightRatio;\n                }\n            } else if (fieldInfo.type === 'text') {\n                fieldInfo.fontSize *= heightRatio;\n            }\n            cardFields[fieldId] = fieldInfo;\n        }\n        newFields[cardId] = cardFields;\n    }\n    return newFields;\n}\n\nfunction rotateRight(fieldInfo: FieldInfo, width: number) {\n    let cx = fieldInfo.x + fieldInfo.width / 2 - BLEED_WIDTH;\n    let cy = fieldInfo.y + fieldInfo.height / 2 - BLEED_WIDTH;\n\n    let newCx = width - cy;\n    let newCy = cx;\n\n    fieldInfo.x = newCx - fieldInfo.width / 2 + BLEED_WIDTH;\n    fieldInfo.y = newCy - fieldInfo.height / 2 + BLEED_WIDTH;\n    fieldInfo.angle += Math.PI / 2;\n}\n\nfunction rotateLeft(fieldInfo: FieldInfo, height: number) {\n    let cx = fieldInfo.x + fieldInfo.width / 2 - BLEED_WIDTH;\n    let cy = fieldInfo.y + fieldInfo.height / 2 - BLEED_WIDTH;\n\n    let newCx = cy;\n    let newCy = height - cx;\n\n    fieldInfo.x = newCx - fieldInfo.width / 2 + BLEED_WIDTH;\n    fieldInfo.y = newCy - fieldInfo.height / 2 + BLEED_WIDTH;\n    fieldInfo.angle -= Math.PI / 2;\n}\n\nexport function cardset(state: CardSetState = DefaultCardSetState, action: CardSetAction): CardSetState {\n    switch (action.type) {\n        case CARDSET_SELECT_REQUEST:\n            return Object.assign({}, state, {\n                activity: state.activity | ACTIVITY_SELECTING,\n                isTwoSided: false,\n                cardsAllIds: [],\n                cardsById: {},\n                fields: {},\n                fieldsAllIds: [],\n                activeCardId: undefined,\n                activeFieldId: undefined,\n                isBackActive: false,\n            });\n        case CARDSET_SELECT_SUCCESS: {\n            return {\n                ...state,\n                activity: state.activity & ~ACTIVITY_SELECTING,\n                width: action.data.width || 63.5,\n                height: action.data.height || 88.9,\n                isTwoSided: action.data.isTwoSided || false,\n                snappingDistance: action.data.snappingDistance || 1,\n                version: action.data.version,\n                cardsAllIds: action.data.cardsAllIds || [],\n                cardsById: action.data.cardsById || {},\n                fields: action.data.fields || {},\n                fieldsAllIds: action.data.fieldsAllIds || [],\n                activeCardId: undefined,\n                activeFieldId: undefined,\n                isBackActive: false,\n                zoom: action.data.zoom || 1,\n            };\n        }\n        case CARDSET_SELECT_FAILURE:\n            return Object.assign({}, state, {\n                activity: state.activity & ~ACTIVITY_SELECTING,\n            });\n        case CARDSET_CREATE_CARD: {\n            let cardFields: FieldInfoCollection = {};\n            if (state.cardsAllIds.length > 0) {\n                cardFields = {\n                    ...state.fields[state.cardsAllIds[0]],\n                };\n\n                for (const fieldId of state.fieldsAllIds) {\n                    let fieldInfo = { ...cardFields[fieldId] };\n                    if (fieldInfo.type === 'text') {\n                        fieldInfo.value = '';\n                    } else if (fieldInfo.type === 'image') {\n                        delete fieldInfo.url;\n                        delete fieldInfo.base64;\n                    }\n                    cardFields[fieldId] = fieldInfo;\n                }\n            }\n            return {\n                ...state,\n                cardsById: {\n                    ...state.cardsById,\n                    [action.card.id]: action.card,\n                },\n                cardsAllIds: state.cardsAllIds ? state.cardsAllIds.concat(action.card.id) : [action.card.id],\n                fields: {\n                    ...state.fields,\n                    [action.card.id]: cardFields,\n                },\n            };\n        }\n        case CARDSET_ROTATE_CARDS_RIGHT: {\n            let fields = { ...state.fields };\n            let width = state.height;\n            let height = state.width;\n\n            for (const cardId in fields) {\n                let cardFields = { ...fields[cardId] };\n                for (const fieldId in cardFields) {\n                    let fieldInfo = { ...cardFields[fieldId] };\n                    if (fieldInfo.isOnBack) {\n                        rotateLeft(fieldInfo, height);\n                    } else {\n                        rotateRight(fieldInfo, width);\n                    }\n\n                    cardFields[fieldId] = fieldInfo;\n                }\n\n                fields[cardId] = cardFields;\n            }\n            return {\n                ...state,\n                width,\n                height,\n                fields,\n            };\n        }\n        case CARDSET_ROTATE_CARDS_LEFT: {\n            let fields = { ...state.fields };\n            let width = state.height;\n            let height = state.width;\n\n            for (const cardId in fields) {\n                let cardFields = { ...fields[cardId] };\n                for (const fieldId in cardFields) {\n                    let fieldInfo = { ...cardFields[fieldId] };\n                    if (fieldInfo.isOnBack) {\n                        rotateRight(fieldInfo, width);\n                    } else {\n                        rotateLeft(fieldInfo, height);\n                    }\n\n                    cardFields[fieldId] = fieldInfo;\n                }\n\n                fields[cardId] = cardFields;\n            }\n            return {\n                ...state,\n                width,\n                height,\n                fields,\n            };\n        }\n        case CARDSET_CLONE_CARD: {\n            let newCard = { ...action.card, id: shortid.generate() };\n\n            const index = state.cardsAllIds.indexOf(action.card.id) + 1;\n            const cardsAllIds = [...state.cardsAllIds.slice(0, index), newCard.id, ...state.cardsAllIds.slice(index)];\n\n            return {\n                ...state,\n                cardsById: {\n                    ...state.cardsById,\n                    [newCard.id]: newCard,\n                },\n                cardsAllIds,\n                fields: {\n                    ...state.fields,\n                    [newCard.id]: {\n                        ...state.fields[action.card.id],\n                    },\n                },\n            };\n        }\n        case CARDSET_REMOVE_CARD: {\n            const cardId = action.card.id;\n            let cardsById = { ...state.cardsById };\n            delete cardsById[cardId];\n\n            let fields = { ...state.fields };\n            if (cardId in fields) {\n                delete fields[cardId];\n            }\n\n            let activeCardId = state.activeCardId === cardId ? undefined : state.activeCardId;\n\n            const cardsAllIds = state.cardsAllIds.filter(id => id !== cardId);\n\n            let fieldsAllIds = state.fieldsAllIds;\n            if (cardsAllIds.length === 0) {\n                fieldsAllIds = [];\n            }\n\n            return {\n                ...state,\n                cardsById,\n                cardsAllIds,\n                fieldsAllIds,\n                fields,\n                activeCardId,\n            };\n        }\n        case CARDSET_UPDATE_CARD_COUNT: {\n            const cardId = action.card.id;\n            let card = { ...state.cardsById[cardId] };\n            card.count = action.count;\n\n            return {\n                ...state,\n                cardsById: {\n                    ...state.cardsById,\n                    [cardId]: card,\n                },\n            };\n        }\n        case CARDSET_ADD_TEXT_FIELD: {\n            if (state.cardsAllIds.length === 0) {\n                return state;\n            }\n\n            let textSettings = { ...state.textSettings };\n            const id = shortid.generate();\n            let fields: FieldInfoByCardCollection = {};\n            for (const cardId of state.cardsAllIds) {\n                fields[cardId] = {\n                    ...state.fields[cardId],\n                    [id]: {\n                        type: 'text',\n                        id,\n                        x: 5,\n                        y: 5,\n                        width: 20,\n                        height: 10,\n                        angle: 0,\n                        isOnBack: state.isBackActive,\n                        value: '',\n                        align: textSettings.align,\n                        color: textSettings.color,\n                        fontFamily: textSettings.fontFamily,\n                        fontVariant: textSettings.fontVariant,\n                        fontSize: textSettings.fontSize,\n                        lineHeight: textSettings.lineHeight || DEFAULT_LINE_HEIGHT,\n                    },\n                };\n            }\n\n            return {\n                ...state,\n                fieldsAllIds: [...state.fieldsAllIds, id],\n                fields,\n            };\n        }\n        case CARDSET_ADD_IMAGE_FIELD: {\n            if (state.cardsAllIds.length === 0) {\n                return state;\n            }\n\n            const id = shortid.generate();\n            let fields: FieldInfoByCardCollection = {};\n            for (const cardId of state.cardsAllIds) {\n                fields[cardId] = {\n                    ...state.fields[cardId],\n                    [id]: {\n                        type: 'image',\n                        id,\n                        x: 5,\n                        y: 5,\n                        width: 20,\n                        height: 20,\n                        angle: 0,\n                        isOnBack: state.isBackActive,\n                        crop: true,\n                    },\n                };\n            }\n\n            return {\n                ...state,\n                fieldsAllIds: [...state.fieldsAllIds, id],\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_ACTIVE_FIELD_NAME: {\n            if (state.activeFieldId !== undefined) {\n                let fields: FieldInfoByCardCollection = {};\n                let id = state.activeFieldId;\n\n                for (const cardId of state.cardsAllIds) {\n                    fields[cardId] = {\n                        ...state.fields[cardId],\n                        [id]: {\n                            ...state.fields[cardId][id],\n                            name: action.name,\n                        },\n                    };\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n\n        case CARDSET_REMOVE_ACTIVE_FIELD: {\n            const fieldId = state.activeFieldId;\n            if (fieldId !== undefined) {\n                let fieldsAllIds = [...state.fieldsAllIds];\n                let fieldIndex = fieldsAllIds.indexOf(fieldId);\n                if (fieldIndex !== -1) {\n                    fieldsAllIds.splice(fieldIndex, 1);\n                }\n\n                let fields = { ...state.fields };\n                for (const cardId in fields) {\n                    if (fieldId in fields[cardId] && !fields[cardId][fieldId].locked) {\n                        let cardFields = { ...fields[cardId] };\n                        delete cardFields[fieldId];\n                        fields[cardId] = cardFields;\n                    }\n                }\n\n                return {\n                    ...state,\n                    fieldsAllIds,\n                    fields,\n                    activeFieldId: undefined,\n                };\n            }\n            return state;\n        }\n        case CARDSET_RAISE_ACTIVE_FIELD: {\n            let fieldsAllIds = [...state.fieldsAllIds];\n\n            if (state.activeFieldId !== undefined) {\n                let index = fieldsAllIds.indexOf(state.activeFieldId);\n                if (index !== -1 && index < fieldsAllIds.length - 1) {\n                    fieldsAllIds.splice(index + 1, 0, fieldsAllIds.splice(index, 1)[0]);\n                }\n            }\n\n            return {\n                ...state,\n                fieldsAllIds,\n            };\n        }\n        case CARDSET_RAISE_ACTIVE_FIELD_TO_TOP: {\n            let fieldsAllIds = [...state.fieldsAllIds];\n\n            if (state.activeFieldId !== undefined) {\n                let index = fieldsAllIds.indexOf(state.activeFieldId);\n                if (index !== -1) {\n                    fieldsAllIds.push(fieldsAllIds.splice(index, 1)[0]);\n                }\n            }\n\n            return {\n                ...state,\n                fieldsAllIds,\n            };\n        }\n        case CARDSET_LOWER_ACTIVE_FIELD: {\n            let fieldsAllIds = [...state.fieldsAllIds];\n\n            if (state.activeFieldId !== undefined) {\n                let index = fieldsAllIds.indexOf(state.activeFieldId);\n                if (index > 0) {\n                    fieldsAllIds.splice(index - 1, 0, fieldsAllIds.splice(index, 1)[0]);\n                }\n            }\n\n            return {\n                ...state,\n                fieldsAllIds,\n            };\n        }\n        case CARDSET_LOWER_ACTIVE_FIELD_TO_BOTTOM: {\n            let fieldsAllIds = [...state.fieldsAllIds];\n\n            if (state.activeFieldId !== undefined) {\n                let index = fieldsAllIds.indexOf(state.activeFieldId);\n                if (index !== -1) {\n                    fieldsAllIds.unshift(fieldsAllIds.splice(index, 1)[0]);\n                }\n            }\n\n            return {\n                ...state,\n                fieldsAllIds,\n            };\n        }\n        case CARDSET_LOCK_ACTIVE_FIELD: {\n            if (state.activeFieldId) {\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        cardFields[fieldId] = {\n                            ...cardFields[fieldId],\n                            locked: true,\n                        };\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n        case CARDSET_UNLOCK_ACTIVE_FIELD: {\n            if (state.activeFieldId) {\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        cardFields[fieldId] = {\n                            ...cardFields[fieldId],\n                            locked: false,\n                        };\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n        case CARDSET_CHANGE_FIT_FOR_ACTIVE_FIELD: {\n            if (state.activeFieldId) {\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = { ...cardFields[fieldId] };\n                        if (fieldInfo.type === 'image') {\n                            fieldInfo.fit = action.fit;\n                        }\n                        cardFields[fieldId] = fieldInfo;\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n        case CARDSET_CHANGE_CROP_FOR_ACTIVE_FIELD: {\n            if (state.activeFieldId) {\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = { ...cardFields[fieldId] };\n                        if (fieldInfo.type === 'image') {\n                            fieldInfo.crop = action.crop;\n                        }\n                        cardFields[fieldId] = fieldInfo;\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n        case CARDSET_CHANGE_UNCLICKABLE_FOR_ACTIVE_FIELD: {\n            if (state.activeFieldId) {\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = { ...cardFields[fieldId] };\n                        fieldInfo.unclickable = action.unclickable;\n                        cardFields[fieldId] = fieldInfo;\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                };\n            }\n\n            return state;\n        }\n        case CARDSET_CHANGE_WIDTH: {\n            if (!action.width || action.width <= 0) {\n                return state;\n            }\n\n            let height = state.height;\n            if (action.maintainAspectRatio) {\n                height = action.width * (state.height / state.width);\n            }\n\n            let fields = state.fields;\n            if (action.resizeContent) {\n                fields = resizeFields(fields, action.width / state.width, height / state.height);\n            }\n\n            return {\n                ...state,\n                width: action.width,\n                height,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_HEIGHT: {\n            if (!action.height || action.height <= 0) {\n                return state;\n            }\n\n            let width = state.width;\n            if (action.maintainAspectRatio) {\n                width = action.height * (state.width / state.height);\n            }\n\n            let fields = state.fields;\n            if (action.resizeContent) {\n                fields = resizeFields(fields, width / state.width, action.height / state.height);\n            }\n\n            return {\n                ...state,\n                height: action.height,\n                width,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_IS_TWO_SIDED: {\n            return {\n                ...state,\n                isTwoSided: action.isTwoSided,\n            };\n        }\n        case CARDSET_CHANGE_SNAPPING_DISTANCE: {\n            return {\n                ...state,\n                snappingDistance: action.snappingDistance,\n            };\n        }\n        case CARDSET_CHANGE_FIELD_POSITION: {\n            let x = action.x;\n            let y = action.y;\n            let snappingDistance = state.snappingDistance;\n\n            if (snappingDistance !== 0) {\n                x = Math.round(x / snappingDistance) * snappingDistance;\n                y = Math.round(y / snappingDistance) * snappingDistance;\n            }\n\n            let fields = { ...state.fields };\n            let fieldId = action.fieldId;\n            let cardsToFix = action.cardId ? [action.cardId] : state.cardsAllIds;\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...fields[cardId] };\n                if (fieldId in cardFields) {\n                    cardFields[fieldId] = {\n                        ...cardFields[fieldId],\n                        x,\n                        y,\n                    };\n                }\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_FIELD_PAN: {\n            let { cx, cy } = action;\n\n            let fields = { ...state.fields };\n            let fieldId = action.fieldId;\n            let cardsToFix = state.applyToAllCards || action.cardId === undefined ? state.cardsAllIds : [action.cardId];\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...fields[cardId] };\n                if (fieldId in cardFields) {\n                    let fieldInfo = cardFields[fieldId];\n                    if (fieldInfo.type === 'image') {\n                        let { width, height, zoom, fit, imageWidth, imageHeight } = fieldInfo;\n                        zoom = zoom || 1;\n                        imageHeight = imageHeight || 1;\n                        imageWidth = imageWidth || 1;\n\n                        let fitImageWidth = width;\n                        let fitImageHeight = height;\n                        if (fit === 'width' || fit === undefined) {\n                            fitImageHeight = width * (imageHeight / imageWidth);\n                        } else if (fit === 'height') {\n                            fitImageWidth = height * (imageWidth / imageHeight);\n                        }\n                        cx = Math.min(Math.max(width - zoom * fitImageWidth, cx), 0);\n                        cy = Math.min(Math.max(height - zoom * fitImageHeight, cy), 0);\n\n                        cardFields[fieldId] = {\n                            ...fieldInfo,\n                            cx,\n                            cy,\n                        };\n                    }\n                }\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_FIELD_ZOOM: {\n            let zoom = action.zoom;\n\n            let fields = { ...state.fields };\n            let fieldId = action.fieldId;\n\n            let cardsToFix = state.applyToAllCards || action.cardId === undefined ? state.cardsAllIds : [action.cardId];\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...fields[cardId] };\n                if (fieldId in cardFields) {\n                    let fieldInfo = cardFields[fieldId];\n                    if (fieldInfo.type === 'image') {\n                        let { fit, width, height, imageWidth, imageHeight } = fieldInfo;\n\n                        imageHeight = imageHeight || 1;\n                        imageWidth = imageWidth || 1;\n\n                        let fitImageWidth = width;\n                        let fitImageHeight = height;\n                        if (fit === 'width' || fit === undefined) {\n                            fitImageHeight = width * (imageHeight / imageWidth);\n                        } else if (fit === 'height') {\n                            fitImageWidth = height * (imageWidth / imageHeight);\n                        }\n\n                        let cx = fieldInfo.cx || 0;\n                        let cy = fieldInfo.cy || 0;\n                        let oldZoom = fieldInfo.zoom || 1;\n                        cx = cx + ((oldZoom - zoom) * fitImageWidth) / 2;\n                        cy = cy + ((oldZoom - zoom) * fitImageHeight) / 2;\n\n                        cx = Math.min(Math.max(width - zoom * fitImageWidth, cx), 0);\n                        cy = Math.min(Math.max(height - zoom * fitImageHeight, cy), 0);\n\n                        cardFields[fieldId] = {\n                            ...fieldInfo,\n                            zoom,\n                            cx,\n                            cy,\n                        };\n                    }\n                }\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_FIELD_SIZE: {\n            let width = action.width;\n            let height = action.height;\n            let snappingDistance = state.snappingDistance;\n\n            if (snappingDistance !== 0) {\n                width = Math.round(width / snappingDistance) * snappingDistance;\n                height = Math.round(height / snappingDistance) * snappingDistance;\n            }\n\n            let fields = { ...state.fields };\n            let fieldId = action.fieldId;\n            let cardsToFix = action.cardId ? [action.cardId] : state.cardsAllIds;\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...fields[cardId] };\n                if (fieldId in cardFields) {\n                    let fieldInfo = { ...cardFields[fieldId] };\n\n                    let nx = fieldInfo.x + fieldInfo.width / 2;\n                    let ny = fieldInfo.y + fieldInfo.height / 2;\n                    let { rx, ry } = rotateVec(\n                        (width - fieldInfo.width) / 2,\n                        (height - fieldInfo.height) / 2,\n                        fieldInfo.angle,\n                    );\n\n                    nx = nx + rx - width / 2;\n                    ny = ny + ry - height / 2;\n\n                    if (fieldInfo.type === 'image' && fieldInfo.cx && fieldInfo.cy) {\n                        if (fieldInfo.fit === 'width' || fieldInfo.fit === undefined) {\n                            let ratio = width / fieldInfo.width;\n                            fieldInfo.cx *= ratio;\n                            fieldInfo.cy *= ratio;\n                        } else if (fieldInfo.fit === 'height') {\n                            let ratio = height / fieldInfo.height;\n                            fieldInfo.cx *= ratio;\n                            fieldInfo.cy *= ratio;\n                        } else {\n                            fieldInfo.cx *= width / fieldInfo.width;\n                            fieldInfo.cy *= height / fieldInfo.height;\n                        }\n                    }\n\n                    fieldInfo.x = nx;\n                    fieldInfo.y = ny;\n                    fieldInfo.width = width;\n                    fieldInfo.height = height;\n                    cardFields[fieldId] = fieldInfo;\n                }\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_FIELD_ANGLE: {\n            let angle = action.angle;\n\n            let fields = { ...state.fields };\n            let fieldId = action.fieldId;\n\n            let cardsToFix = action.cardId ? [action.cardId] : state.cardsAllIds;\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...fields[cardId] };\n                if (fieldId in cardFields) {\n                    cardFields[fieldId] = {\n                        ...cardFields[fieldId],\n                        angle,\n                    };\n                }\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_ALIGN: {\n            let textSettings = {\n                ...state.textSettings,\n                align: action.align,\n            };\n\n            if (state.activeFieldId) {\n                let align = action.align;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                align,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_COLOR: {\n            let textSettings = {\n                ...state.textSettings,\n                color: action.color,\n            };\n\n            if (state.activeFieldId) {\n                let color = action.color;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                color,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY: {\n            let textSettings = {\n                ...state.textSettings,\n                color: action.fontFamily,\n            };\n\n            if (state.activeFieldId) {\n                let fontFamily = action.fontFamily;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                fontFamily,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_VARIANT: {\n            let textSettings = {\n                ...state.textSettings,\n                color: action.fontVariant,\n            };\n\n            if (state.activeFieldId) {\n                let fontVariant = action.fontVariant;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                fontVariant,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_FAMILY_AND_VARIANT: {\n            let textSettings = {\n                ...state.textSettings,\n                fontFamily: action.fontFamily,\n                fontVariant: action.fontVariant,\n            };\n\n            if (state.activeFieldId) {\n                let fontFamily = action.fontFamily;\n                let fontVariant = action.fontVariant;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                fontFamily,\n                                fontVariant,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_FONT_SIZE: {\n            let textSettings = {\n                ...state.textSettings,\n                fontSize: action.fontSize,\n            };\n\n            if (state.activeFieldId) {\n                let fontSize = action.fontSize;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                fontSize,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_ACTIVE_TEXT_FIELD_LINE_HEIGHT: {\n            let textSettings = {\n                ...state.textSettings,\n                lineHeight: action.lineHeight,\n            };\n\n            if (state.activeFieldId) {\n                let lineHeight = action.lineHeight;\n\n                let fields = { ...state.fields };\n                let fieldId = state.activeFieldId;\n                for (const cardId in fields) {\n                    let cardFields = { ...fields[cardId] };\n                    if (fieldId in cardFields) {\n                        let fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'text') {\n                            cardFields[fieldId] = {\n                                ...fieldInfo,\n                                lineHeight,\n                            };\n                        }\n                    }\n                    fields[cardId] = cardFields;\n                }\n\n                return {\n                    ...state,\n                    fields,\n                    textSettings,\n                };\n            } else {\n                return {\n                    ...state,\n                    textSettings,\n                };\n            }\n        }\n        case CARDSET_CHANGE_TEXT: {\n            let cardFields = { ...state.fields[action.cardId] };\n\n            const fieldInfo = cardFields[action.fieldId];\n            const name = fieldInfo.name || fieldInfo.id;\n\n            for (const fieldId in cardFields) {\n                const testFieldInfo = cardFields[fieldId];\n\n                if ((testFieldInfo.name === name || testFieldInfo.id === name) && testFieldInfo.type === 'text') {\n                    cardFields[fieldId] = {\n                        ...testFieldInfo,\n                        value: action.textInfo.value,\n                    };\n                }\n            }\n\n            return {\n                ...state,\n                fields: {\n                    ...state.fields,\n                    [action.cardId]: cardFields,\n                },\n            };\n        }\n        case CARDSET_CHANGE_IMAGE: {\n            let cardsToFix = state.applyToAllCards || action.cardId === undefined ? state.cardsAllIds : [action.cardId];\n\n            let fields = { ...state.fields };\n\n            for (const cardId of cardsToFix) {\n                let cardFields = { ...state.fields[cardId] };\n\n                const fieldInfo = cardFields[action.fieldId];\n                const name = fieldInfo.name || fieldInfo.id;\n\n                for (const fieldId in cardFields) {\n                    const testFieldInfo = cardFields[fieldId];\n\n                    if ((testFieldInfo.name === name || testFieldInfo.id === name) && testFieldInfo.type === 'image') {\n                        cardFields[fieldId] = {\n                            ...testFieldInfo,\n                            url: 'url' in action.imageInfo ? action.imageInfo.url : testFieldInfo.url,\n                            base64: 'base64' in action.imageInfo ? action.imageInfo.base64 : testFieldInfo.base64,\n                            color: 'color' in action.imageInfo ? action.imageInfo.color : testFieldInfo.color,\n                            imageWidth: 'width' in action.imageInfo ? action.imageInfo.width : testFieldInfo.imageWidth,\n                            imageHeight:\n                                'height' in action.imageInfo ? action.imageInfo.height : testFieldInfo.imageHeight,\n                            cx: 0,\n                            cy: 0,\n                            zoom: 0,\n                        };\n                    }\n                }\n\n                fields[cardId] = cardFields;\n            }\n\n            return {\n                ...state,\n                fields,\n            };\n        }\n        case CARDSET_CHANGE_IMAGE_BASE64: {\n            let cardFields = { ...state.fields[action.cardId] };\n\n            const fieldInfo = cardFields[action.fieldId];\n            const name = fieldInfo.name || fieldInfo.id;\n\n            for (const fieldId in cardFields) {\n                const testFieldInfo = cardFields[fieldId];\n\n                if ((testFieldInfo.name === name || testFieldInfo.id === name) && testFieldInfo.type === 'image') {\n                    cardFields[fieldId] = {\n                        ...testFieldInfo,\n                        base64: action.base64,\n                        cx: 0,\n                        cy: 0,\n                        zoom: 0,\n                    };\n                }\n            }\n\n            return {\n                ...state,\n                fields: {\n                    ...state.fields,\n                    [action.cardId]: cardFields,\n                },\n            };\n        }\n        case CARDSET_SET_ACTIVE_CARD_AND_FIELD: {\n            let textSettings = { ...state.textSettings };\n            let activeSidebar = state.activeSidebar;\n\n            if (activeSidebar !== SidebarState.Measurements && action.cardId !== undefined) {\n                activeSidebar = SidebarState.Details;\n            }\n\n            if (action.cardId !== undefined && action.fieldId !== undefined) {\n                const fieldInfo = state.fields[action.cardId][action.fieldId];\n\n                if (fieldInfo.type === 'text') {\n                    textSettings.align = fieldInfo.align;\n                    textSettings.color = fieldInfo.color;\n                    textSettings.fontFamily = fieldInfo.fontFamily;\n                    textSettings.fontVariant = fieldInfo.fontVariant;\n                    textSettings.fontSize = fieldInfo.fontSize;\n                    textSettings.lineHeight = fieldInfo.lineHeight;\n\n                    if (activeSidebar !== SidebarState.Measurements) {\n                        activeSidebar = SidebarState.Text;\n                    }\n                } else {\n                    if (activeSidebar !== SidebarState.Measurements) {\n                        activeSidebar = SidebarState.Image;\n                    }\n                }\n            }\n\n            return {\n                ...state,\n                activeCardId: action.cardId,\n                isBackActive: action.isBackActive,\n                activeFieldId: action.fieldId,\n                textSettings,\n                activeSidebar,\n            };\n        }\n\n        case CARDSET_CHANGE_APPLY_TO_ALLCARDS: {\n            return {\n                ...state,\n                applyToAllCards: action.applyToAllCards,\n            };\n        }\n\n        case CARDSET_SET_SIDEBAR_STATE: {\n            return {\n                ...state,\n                activeSidebar: action.sidebarState,\n            };\n        }\n        case CARDSET_SET_ZOOM: {\n            return {\n                ...state,\n                zoom: action.zoom,\n            };\n        }\n        case CARDSET_IMPORT_DATA: {\n            return {\n                ...state,\n                ...action.data,\n            };\n        }\n        default:\n            return state;\n    }\n}\n\nexport function images(state: ImageState = DefaultImageState, action: ImageListAction): ImageState {\n    switch (action.type) {\n        case IMAGE_LIST_REQUEST:\n            return Object.assign({}, state, {\n                filter: action.filter,\n            });\n        case IMAGE_LIST_SUCCESS:\n            return Object.assign({}, state, {\n                images: action.images,\n            });\n        default:\n            return state;\n    }\n}\n\nconst undoableCardset = undoable(cardset, {\n    ignoreInitialState: true,\n    undoType: CARDSET_UNDO,\n    redoType: CARDSET_REDO,\n    groupBy: (action: Action) => {\n        if (\n            action.type === 'CARDSET_CHANGE_FIELD_SIZE' ||\n            action.type === 'CARDSET_CHANGE_FIELD_POSITION' ||\n            action.type === 'CARDSET_CHANGE_FIELD_ANGLE' ||\n            action.type === 'CARDSET_CHANGE_FIELD_ZOOM' ||\n            action.type === 'CARDSET_CHANGE_FIELD_PAN'\n        ) {\n            return action.group;\n        }\n        return null;\n    },\n    filter: (action: Action) => {\n        if (!action.type.startsWith('CARDSET_')) {\n            return false;\n        }\n\n        if (\n            action.type === CARDSET_SELECT_REQUEST ||\n            action.type === CARDSET_SET_ACTIVE_CARD_AND_FIELD ||\n            action.type === CARDSET_SET_SIDEBAR_STATE\n        ) {\n            return false;\n        }\n        return true;\n    },\n});\n\nconst reducers = combineReducers({\n    message,\n    auth,\n    signup,\n    games,\n    cardsets,\n    cardset: undoableCardset,\n    images,\n});\n\nexport default reducers;\n","import { applyMiddleware, compose, createStore, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootSaga } from './sagas';\nimport reducers from './reducers';\n\nexport let store: Store | undefined;\n\nexport function createAppStore() {\n    const sagaMiddleware = createSagaMiddleware();\n    store = createStore(\n        reducers,\n        // @ts-ignore: __REDUX_DEVTOOLS_EXTENSION__ does not exists on window\n        window.__REDUX_DEVTOOLS_EXTENSION__\n            ? compose(\n                  applyMiddleware(sagaMiddleware),\n                  // @ts-ignore: __REDUX_DEVTOOLS_EXTENSION__ does not exists on window\n                  window.__REDUX_DEVTOOLS_EXTENSION__(),\n              )\n            : applyMiddleware(sagaMiddleware),\n    );\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n","import React, { Component } from 'react';\n\nexport default class AboutPage extends Component {\n    render() {\n        return (\n            <div>\n                <h2>About</h2>\n                <p>\n                    \"Card-a-mon\" is card game development tool. At the moment it is project of single person (me) with a\n                    vision. My aim is to create affordable and practical tool to develop card games from A (prototyping)\n                    to Z (printing). If you have ideas, suggestions, proposals, comments and etc. then you can contact\n                    me by e-mail <a href=\"mailto:dalius@ffff.lt\">dalius@ffff.lt</a>.\n                </p>\n                <h2>Credits</h2>\n                This project is available because of number amazing open source projects. Some of them:\n                <ul>\n                    <li>\n                        <a href=\"https://reactjs.org/\">React</a> and all the ecosystem around it.\n                    </li>\n                    <li>\n                        <a href=\"https://fonts.google.com/\">Google Fonts</a>\n                    </li>\n                    <li>\n                        <a href=\"https://github.com/game-icons/icons\">Game icons</a>\n                    </li>\n                    <li>\n                        <a href=\"http://pdfkit.org/\">PDFKit</a>\n                    </li>\n                </ul>\n                <p>... and many more.</p>\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport shortid from 'shortid';\n\nimport { Dispatch } from '../actions';\nimport { State } from '../reducers';\nimport panIcon from './pan.svg';\nimport zoomIcon from './zoom.svg';\nimport resizeIcon from './resize.svg';\nimport rotateIcon from './rotate.svg';\nimport style from './FieldController.module.css';\nimport { rotateVec } from '../utils';\n\ninterface OwnProps {\n    cardId: string;\n    fieldId: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    angle: number;\n    zoom?: number;\n    cx?: number;\n    cy?: number;\n    children: React.ReactNode;\n    onDrag: (x: number, y: number, cardOnly: boolean, group: string) => void;\n    onResize: (width: number, height: number, cardOnly: boolean, group: string) => void;\n    onRotate: (angle: number, cardOnly: boolean, group: string) => void;\n    onZoom?: (zoom: number, cardOnly: boolean, group: string) => void;\n    onPan?: (cx: number, cy: number, cardOnly: boolean, group: string) => void;\n    cardWidth: number;\n    cardHeight: number;\n    ppmm: number;\n}\n\ninterface StateProps {\n    isActive: boolean;\n    isActiveField: boolean;\n    isLocked: boolean;\n    isUnclickable: boolean;\n    snappingDistance: number;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nexport interface LocalState {\n    startX: number;\n    startY: number;\n    originalAngle: number;\n    activatedUsingTouch: boolean;\n    group: string;\n}\n\nclass FieldController extends React.Component<Props, LocalState> {\n    cDiv: React.RefObject<HTMLDivElement>;\n    panDiv: React.RefObject<HTMLImageElement>;\n    zoomDiv: React.RefObject<HTMLImageElement>;\n    resizeDiv: React.RefObject<HTMLImageElement>;\n    rotateDiv: React.RefObject<HTMLImageElement>;\n    originalBodyCursor: string | null;\n\n    constructor(props: Props) {\n        super(props);\n        this.cDiv = React.createRef();\n        this.panDiv = React.createRef();\n        this.zoomDiv = React.createRef();\n        this.resizeDiv = React.createRef();\n        this.rotateDiv = React.createRef();\n        this.originalBodyCursor = null;\n        this.state = {\n            activatedUsingTouch: false,\n            startX: 0,\n            startY: 0,\n            originalAngle: 0,\n            group: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.cDiv.current === null) return;\n        if (this.panDiv.current === null) return;\n        if (this.zoomDiv.current === null) return;\n        if (this.resizeDiv.current === null) return;\n        if (this.rotateDiv.current === null) return;\n\n        this.originalBodyCursor = document.body.style.cursor;\n\n        this.cDiv.current.addEventListener('mousedown', this.handleMouseDown);\n        this.cDiv.current.addEventListener('touchstart', this.handleTouchStart);\n        this.panDiv.current.addEventListener('mousedown', this.handlePanMouseDown);\n        this.panDiv.current.addEventListener('touchstart', this.handlePanTouchStart);\n        this.zoomDiv.current.addEventListener('mousedown', this.handleZoomMouseDown);\n        this.zoomDiv.current.addEventListener('touchstart', this.handleZoomTouchStart);\n        this.resizeDiv.current.addEventListener('mousedown', this.handleResizeMouseDown);\n        this.resizeDiv.current.addEventListener('touchstart', this.handleResizeTouchStart);\n        this.rotateDiv.current.addEventListener('mousedown', this.handleRotateMouseDown);\n        this.rotateDiv.current.addEventListener('touchstart', this.handleRotateTouchStart);\n    }\n\n    handleBrowserDragStart = (event: React.DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    // Dragging handling\n\n    handleMouseDown = (event: MouseEvent) => {\n        this.handleDragStart(event);\n\n        document.addEventListener('mousemove', this.handleMouseMove);\n        document.addEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleDragStart(event.changedTouches[0]);\n\n        document.addEventListener('touchmove', this.handleTouchMove, { passive: false });\n        document.addEventListener('touchend', this.handleTouchEnd, { passive: false });\n    };\n\n    handleDragStart = (co: MouseEvent | Touch) => {\n        if (this.cDiv.current === null) return;\n\n        this.cDiv.current.style.cursor = 'grabbing';\n\n        this.setState({ startX: co.clientX, startY: co.clientY, group: shortid.generate() });\n    };\n\n    handleMouseMove = (event: MouseEvent) => {\n        this.handleDragMove(event, event.ctrlKey);\n    };\n\n    handleTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        event.preventDefault();\n        this.handleDragMove(event.changedTouches[0], event.ctrlKey);\n    };\n\n    handleDragMove = (co: MouseEvent | Touch, disableSnapping: boolean) => {\n        const { isLocked, x, y } = this.props;\n\n        if (isLocked) return;\n\n        const { ppmm, snappingDistance } = this.props;\n\n        let nx = x + co.clientX - this.state.startX;\n        let ny = y + co.clientY - this.state.startY;\n\n        if (!disableSnapping && snappingDistance !== 0) {\n            nx = Math.round(nx / ppmm / snappingDistance) * snappingDistance * ppmm;\n            ny = Math.round(ny / ppmm / snappingDistance) * snappingDistance * ppmm;\n        }\n\n        this.setState({ startX: co.clientX, startY: co.clientY });\n        this.props.onDrag(nx, ny, true, this.state.group);\n    };\n\n    handleMouseUp = (event: MouseEvent) => {\n        this.handleComplete(event, false);\n\n        document.removeEventListener('mousemove', this.handleMouseMove);\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleComplete(event, true);\n\n        document.removeEventListener('touchmove', this.handleTouchMove);\n        document.removeEventListener('touchend', this.handleTouchEnd);\n    };\n\n    handleComplete = (event: MouseEvent | TouchEvent, isTouchEvent: boolean) => {\n        const { isLocked, x, y } = this.props;\n\n        if (this.cDiv.current === null) return;\n\n        if (!isLocked) {\n            this.props.onDrag(x, y, false, this.state.group);\n        }\n        this.setState({ activatedUsingTouch: isTouchEvent });\n\n        this.cDiv.current.style.cursor = 'grab';\n    };\n\n    // Pan handling\n\n    handlePanMouseDown = (event: MouseEvent) => {\n        this.handlePanStart(event);\n\n        document.addEventListener('mousemove', this.handlePanMouseMove);\n        document.addEventListener('mouseup', this.handlePanMouseUp);\n        event.stopPropagation();\n    };\n\n    handlePanTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handlePanStart(event.changedTouches[0]);\n\n        document.addEventListener('touchmove', this.handlePanTouchMove, { passive: false });\n        document.addEventListener('touchend', this.handlePanTouchEnd, { passive: false });\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    handlePanStart = (co: MouseEvent | Touch) => {\n        document.body.style.cursor = `url(${panIcon}), auto`;\n\n        this.setState({ startX: co.clientX, startY: co.clientY, group: shortid.generate() });\n    };\n\n    handlePanMouseMove = (event: MouseEvent) => {\n        this.handlePanMove(event);\n        event.preventDefault();\n    };\n\n    handlePanTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handlePanMove(event.changedTouches[0]);\n        event.preventDefault();\n    };\n\n    handlePanMove = (co: MouseEvent | Touch) => {\n        const { cx, cy, angle, onPan } = this.props;\n        if (!onPan || cx === undefined || cy === undefined) return;\n\n        const dx = co.clientX - this.state.startX;\n        const dy = co.clientY - this.state.startY;\n        const { rx, ry } = rotateVec(dx, dy, -angle);\n\n        const newCx = cx + rx;\n        const newCy = cy + ry;\n\n        this.setState({ startX: co.clientX, startY: co.clientY });\n\n        onPan(newCx, newCy, true, this.state.group);\n    };\n\n    handlePanMouseUp = (event: MouseEvent) => {\n        this.handlePanComplete(event);\n\n        document.removeEventListener('mousemove', this.handlePanMouseMove);\n        document.removeEventListener('mouseup', this.handlePanMouseUp);\n    };\n\n    handlePanTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handlePanComplete(event);\n\n        document.removeEventListener('touchmove', this.handlePanTouchMove);\n        document.removeEventListener('touchend', this.handlePanTouchEnd);\n    };\n\n    handlePanComplete = (event: MouseEvent | TouchEvent) => {\n        const { cx, cy, onPan } = this.props;\n        if (onPan && cx !== undefined && cy !== undefined) {\n            onPan(cx, cy, true, this.state.group);\n        }\n\n        document.body.style.cursor = this.originalBodyCursor || '';\n        event.preventDefault();\n    };\n\n    // Zoom handling\n\n    handleZoomMouseDown = (event: MouseEvent) => {\n        this.handleZoomStart(event);\n\n        document.addEventListener('mousemove', this.handleZoomMouseMove);\n        document.addEventListener('mouseup', this.handleZoomMouseUp);\n        event.stopPropagation();\n    };\n\n    handleZoomTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleZoomStart(event.changedTouches[0]);\n\n        document.addEventListener('touchmove', this.handleZoomTouchMove, { passive: false });\n        document.addEventListener('touchend', this.handleZoomTouchEnd, { passive: false });\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    handleZoomStart = (co: { clientX: number; clientY: number }) => {\n        document.body.style.cursor = `url(${zoomIcon}), auto`;\n\n        this.setState({ startX: co.clientX, startY: co.clientY, group: shortid.generate() });\n    };\n\n    handleZoomMouseMove = (event: MouseEvent) => {\n        this.handleZoomMove(event);\n        event.preventDefault();\n    };\n\n    handleZoomTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleZoomMove(event.changedTouches[0]);\n        event.preventDefault();\n    };\n\n    handleZoomMove = (co: MouseEvent | Touch) => {\n        const { zoom, onZoom } = this.props;\n        if (!onZoom || zoom === undefined) return;\n\n        const dx = co.clientX - this.state.startX;\n        const dy = co.clientY - this.state.startY;\n\n        const z = Math.abs(dx) > Math.abs(dy) ? dx : dy;\n\n        const newZoom = Math.max(zoom + z / 30, 1);\n        this.setState({ startX: co.clientX, startY: co.clientY });\n\n        onZoom(newZoom, true, this.state.group);\n    };\n\n    handleZoomMouseUp = (event: MouseEvent) => {\n        this.handleZoomComplete(event);\n\n        document.removeEventListener('mousemove', this.handleZoomMouseMove);\n        document.removeEventListener('mouseup', this.handleZoomMouseUp);\n    };\n\n    handleZoomTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleZoomComplete(event);\n\n        document.removeEventListener('touchmove', this.handleZoomTouchMove);\n        document.removeEventListener('touchend', this.handleZoomTouchEnd);\n    };\n\n    handleZoomComplete = (event: Event) => {\n        document.body.style.cursor = this.originalBodyCursor || '';\n        event.preventDefault();\n    };\n\n    // Resize handling\n\n    handleResizeMouseDown = (event: MouseEvent) => {\n        this.handleResizeStart(event);\n\n        document.addEventListener('mousemove', this.handleResizeMouseMove);\n        document.addEventListener('mouseup', this.handleResizeMouseUp);\n        event.stopPropagation();\n    };\n\n    handleResizeTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleResizeStart(event.changedTouches[0]);\n\n        document.addEventListener('touchmove', this.handleResizeTouchMove, { passive: false });\n        document.addEventListener('touchend', this.handleResizeTouchEnd, { passive: false });\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    handleResizeStart = (co: MouseEvent | Touch) => {\n        const { isLocked } = this.props;\n\n        if (isLocked) return;\n\n        document.body.style.cursor = `url(${resizeIcon}), auto`;\n\n        this.setState({ startX: co.clientX, startY: co.clientY, group: shortid.generate() });\n    };\n\n    handleResizeMouseMove = (event: MouseEvent) => {\n        this.handleResizeMove(event, event.ctrlKey);\n        event.preventDefault();\n    };\n\n    handleResizeTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleResizeMove(event.changedTouches[0], event.ctrlKey);\n        event.preventDefault();\n    };\n\n    handleResizeMove = (co: { clientX: number; clientY: number }, disableSnapping: boolean) => {\n        const { isLocked, ppmm, width, height, angle, snappingDistance, onResize } = this.props;\n\n        if (isLocked) return;\n\n        const dx = co.clientX - this.state.startX;\n        const dy = co.clientY - this.state.startY;\n\n        const { rx, ry } = rotateVec(dx, dy, -angle);\n\n        let newWidth = width + rx;\n        let newHeight = height + ry;\n\n        if (!disableSnapping && snappingDistance !== 0) {\n            newWidth = Math.round(newWidth / ppmm / snappingDistance) * snappingDistance * ppmm;\n            newHeight = Math.round(newHeight / ppmm / snappingDistance) * snappingDistance * ppmm;\n        }\n\n        this.setState({ startX: co.clientX, startY: co.clientY });\n\n        onResize(newWidth, newHeight, true, this.state.group);\n    };\n\n    handleResizeMouseUp = (event: MouseEvent) => {\n        this.handleResizeComplete(event);\n\n        document.removeEventListener('mousemove', this.handleResizeMouseMove);\n        document.removeEventListener('mouseup', this.handleResizeMouseUp);\n    };\n\n    handleResizeTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleResizeComplete(event);\n\n        document.removeEventListener('touchmove', this.handleResizeTouchMove);\n        document.removeEventListener('touchend', this.handleResizeTouchEnd);\n    };\n\n    handleResizeComplete = (event: Event) => {\n        const { isLocked } = this.props;\n\n        if (!isLocked) {\n            const { width, height, onResize } = this.props;\n            onResize(width, height, false, this.state.group);\n        }\n\n        document.body.style.cursor = this.originalBodyCursor || '';\n\n        event.preventDefault();\n    };\n\n    // Rotation handling\n\n    handleRotateMouseDown = (event: MouseEvent) => {\n        this.handleRotateStart(event);\n\n        document.addEventListener('mousemove', this.handleRotateMouseMove);\n        document.addEventListener('mouseup', this.handleRotateMouseUp);\n        event.stopPropagation();\n    };\n\n    handleRotateTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleRotateStart(event.changedTouches[0]);\n\n        document.addEventListener('touchmove', this.handleRotateTouchMove, { passive: false });\n        document.addEventListener('touchend', this.handleRotateTouchEnd, { passive: false });\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    handleRotateStart = (co: { clientX: number; clientY: number }) => {\n        const { isLocked, angle } = this.props;\n\n        if (isLocked || this.cDiv.current === null) return;\n\n        document.body.style.cursor = `url(${rotateIcon}), auto`;\n\n        const rect = this.cDiv.current.getBoundingClientRect();\n        const startX = rect.left + this.cDiv.current.clientWidth / 2;\n        const startY = rect.top + this.cDiv.current.clientHeight / 2;\n\n        const originalAngle = angle + Math.atan2(startX - co.clientX, startY - co.clientY);\n\n        this.setState({ startX, startY, originalAngle, group: shortid.generate() });\n    };\n\n    handleRotateMouseMove = (event: MouseEvent) => {\n        this.handleRotateMove(event, event.ctrlKey);\n        event.preventDefault();\n    };\n\n    handleRotateTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleRotateMove(event.changedTouches[0], event.ctrlKey);\n        event.preventDefault();\n    };\n\n    handleRotateMove = (co: MouseEvent | Touch, disableSnapping: boolean) => {\n        const { isLocked, onRotate } = this.props;\n\n        if (isLocked) return;\n\n        const { originalAngle, startX, startY } = this.state;\n\n        const curAngle = Math.atan2(startX - co.clientX, startY - co.clientY);\n        let newAngle = originalAngle - curAngle;\n\n        if (!disableSnapping) {\n            newAngle = ((Math.round(((newAngle / Math.PI) * 180) / 5) * 5) / 180) * Math.PI;\n        }\n\n        onRotate(newAngle, true, this.state.group);\n    };\n\n    handleRotateMouseUp = (event: MouseEvent) => {\n        this.handleRotateComplete(event);\n\n        document.removeEventListener('mousemove', this.handleRotateMouseMove);\n        document.removeEventListener('mouseup', this.handleRotateMouseUp);\n    };\n\n    handleRotateTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleRotateComplete(event);\n\n        document.removeEventListener('touchmove', this.handleRotateTouchMove);\n        document.removeEventListener('touchend', this.handleRotateTouchEnd);\n    };\n\n    handleRotateComplete = (event: Event) => {\n        const { isLocked } = this.props;\n\n        if (!isLocked) {\n            const { angle } = this.props;\n            this.props.onRotate(angle, false, this.state.group);\n        }\n\n        document.body.style.cursor = this.originalBodyCursor || '';\n\n        event.preventDefault();\n    };\n\n    // Rendering\n\n    render() {\n        const {\n            x,\n            y,\n            width,\n            height,\n            angle,\n            zoom,\n            cx,\n            children,\n            isActive,\n            isActiveField,\n            isLocked,\n            isUnclickable,\n        } = this.props;\n\n        return (\n            <div\n                ref={this.cDiv}\n                onDragStart={this.handleBrowserDragStart}\n                className={`${style.fieldcontroller} ${isActiveField ? style.fieldcontrolleractivefield : ''} ${\n                    isActive ? style.fieldcontrolleractive : ''\n                } ${isActive && this.state.activatedUsingTouch ? style.touchactivated : ''} `}\n                style={{\n                    position: 'absolute',\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height,\n                    cursor: 'grab',\n                    transform: `rotate(${angle}rad)`,\n                    pointerEvents: isUnclickable ? 'none' : 'initial',\n                }}\n            >\n                {children}\n                <img\n                    src={panIcon}\n                    alt=\"pan\"\n                    ref={this.panDiv}\n                    className={style.controller}\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        cursor: `url(${panIcon}), auto`,\n                        display: cx !== undefined && zoom !== undefined ? 'initial' : 'none',\n                    }}\n                />\n\n                <img\n                    src={zoomIcon}\n                    alt=\"zoom\"\n                    ref={this.zoomDiv}\n                    className={style.controller}\n                    style={{\n                        position: 'absolute',\n                        right: 0,\n                        top: 0,\n                        cursor: `url(${zoomIcon}), auto`,\n                        display: zoom !== undefined ? 'initial' : 'none',\n                    }}\n                />\n\n                <img\n                    src={resizeIcon}\n                    alt=\"resize\"\n                    ref={this.resizeDiv}\n                    className={style.controller}\n                    style={{\n                        position: 'absolute',\n                        right: 0,\n                        bottom: 0,\n                        cursor: `url(${resizeIcon}), auto`,\n                        display: isLocked ? 'none' : 'initial',\n                    }}\n                />\n                <img\n                    src={rotateIcon}\n                    alt=\"rotate\"\n                    ref={this.rotateDiv}\n                    className={style.controller}\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        bottom: 0,\n                        cursor: `url(${rotateIcon}), auto`,\n                        display: isLocked ? 'none' : 'initial',\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, props: OwnProps): StateProps => {\n    const isActiveField = props.fieldId === state.cardset.present.activeFieldId;\n    const isActive =\n        props.cardId === state.cardset.present.activeCardId && props.fieldId === state.cardset.present.activeFieldId;\n    const fieldInfo = state.cardset.present.fields[props.cardId][props.fieldId];\n    const isLocked = fieldInfo.locked === true;\n    const isUnclickable = fieldInfo.unclickable === true;\n\n    return {\n        isActive,\n        isActiveField,\n        isLocked,\n        isUnclickable,\n        snappingDistance: state.cardset.present.snappingDistance,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(FieldController);\n","import { connect } from 'react-redux';\nimport React, { PureComponent } from 'react';\n\nimport {\n    Dispatch,\n    cardSetActiveCardAndField,\n    cardSetChangeImage,\n    cardSetChangeFieldPosition,\n    cardSetChangeFieldAngle,\n    cardSetChangeFieldPan,\n    cardSetChangeFieldZoom,\n    cardSetChangeFieldSize,\n} from '../actions';\nimport { ImageInfo, ImageFieldInfo } from '../types';\nimport { State } from '../reducers';\nimport FieldController from './FieldController';\nimport emptyImageImage from './image.svg';\nimport style from './ImageField.module.css';\nimport { calculateImageDimensions } from '../utils';\n\ninterface OwnProps {\n    cardId: string;\n    isOnBack: boolean;\n    ppmm: number;\n    imageFieldInfo: ImageFieldInfo;\n    cardWidth: number;\n    cardHeight: number;\n}\n\ninterface StateProps {\n    imageUrl?: string;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface LocalState {\n    dragIsOver: boolean;\n    wasMoved: boolean;\n    x: number;\n    y: number;\n}\n\nclass ImageField extends PureComponent<Props, LocalState> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dragIsOver: false,\n            wasMoved: false,\n            x: 0,\n            y: 0,\n        };\n    }\n\n    handleDrag = (x: number, y: number, cardOnly: boolean, group: string) => {\n        const { dispatch, cardId, imageFieldInfo, ppmm } = this.props;\n        dispatch(\n            cardSetChangeFieldPosition(cardOnly ? cardId : undefined, imageFieldInfo.id, x / ppmm, y / ppmm, group),\n        );\n    };\n\n    handlePan = (cx: number, cy: number, cardOnly: boolean, group: string) => {\n        const { dispatch, cardId, imageFieldInfo, ppmm } = this.props;\n        dispatch(cardSetChangeFieldPan(cardOnly ? cardId : undefined, imageFieldInfo.id, cx / ppmm, cy / ppmm, group));\n    };\n\n    handleZoom = (zoom: number, cardOnly: boolean, group: string) => {\n        const { dispatch, cardId, imageFieldInfo } = this.props;\n        dispatch(cardSetChangeFieldZoom(cardOnly ? cardId : undefined, imageFieldInfo.id, zoom, group));\n    };\n\n    handleResize = (width: number, height: number, cardOnly: boolean, group: string) => {\n        const { dispatch, imageFieldInfo, cardId, ppmm } = this.props;\n        dispatch(\n            cardSetChangeFieldSize(\n                cardOnly ? cardId : undefined,\n                imageFieldInfo.id,\n                width / ppmm,\n                height / ppmm,\n                group,\n            ),\n        );\n    };\n\n    handleRotate = (angle: number, cardOnly: boolean, group: string) => {\n        const { dispatch, cardId, imageFieldInfo } = this.props;\n        dispatch(cardSetChangeFieldAngle(cardOnly ? cardId : undefined, imageFieldInfo.id, angle, group));\n    };\n\n    handleMouseDown = () => {\n        this.setState({ wasMoved: false });\n    };\n\n    handleTouchStart = (event: React.TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.setState({ wasMoved: false, x: event.changedTouches[0].clientX, y: event.changedTouches[0].clientY });\n    };\n\n    handleMouseMove = () => {\n        this.setState({ wasMoved: true });\n    };\n\n    handleTouchMove = (event: React.TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        const { x, y } = this.state;\n        if (Math.abs(event.changedTouches[0].clientX - x) > 3 || Math.abs(event.changedTouches[0].clientY - y) > 3) {\n            this.setState({ wasMoved: true });\n        }\n    };\n\n    handleMouseUp = () => {\n        this.handleComplete();\n    };\n\n    handleTouchEnd = (event: React.TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleComplete();\n    };\n\n    handleComplete = () => {\n        const { dispatch, cardId, isOnBack, imageFieldInfo } = this.props;\n        if (!this.state.wasMoved) {\n            dispatch(cardSetActiveCardAndField(cardId, isOnBack, imageFieldInfo.id));\n        }\n    };\n\n    handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n        this.setState({ dragIsOver: true });\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {\n        this.setState({ dragIsOver: false });\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n        this.setState({ dragIsOver: false });\n        event.preventDefault();\n        event.stopPropagation();\n\n        const url = event.dataTransfer.getData('URL');\n        const imagefilesPos = url.indexOf('/api/imagefiles/');\n\n        if (imagefilesPos !== -1) {\n            const { cardId, imageFieldInfo, dispatch } = this.props;\n            let img = new Image();\n\n            img.addEventListener('load', function() {\n                const ii: ImageInfo = {\n                    url: url.substr(imagefilesPos),\n                    width: this.naturalWidth,\n                    height: this.naturalHeight,\n                };\n                dispatch(cardSetChangeImage(cardId, imageFieldInfo.id, ii));\n            });\n            img.src = url;\n        }\n    };\n\n    render() {\n        const { imageFieldInfo, imageUrl, ppmm, cardWidth, cardHeight } = this.props;\n\n        let dim = calculateImageDimensions(imageFieldInfo);\n        let calculatedImageWidth = dim.width * ppmm;\n        let calculatedImageHeight = dim.height * ppmm;\n\n        return (\n            <FieldController\n                cardId={this.props.cardId}\n                fieldId={imageFieldInfo.id}\n                x={imageFieldInfo.x * ppmm}\n                y={imageFieldInfo.y * ppmm}\n                width={imageFieldInfo.width * ppmm}\n                height={imageFieldInfo.height * ppmm}\n                cx={(imageFieldInfo.cx || 0) * ppmm}\n                cy={(imageFieldInfo.cy || 0) * ppmm}\n                zoom={imageFieldInfo.zoom || 1}\n                angle={imageFieldInfo.angle}\n                onDrag={this.handleDrag}\n                onPan={this.handlePan}\n                onZoom={this.handleZoom}\n                onResize={this.handleResize}\n                onRotate={this.handleRotate}\n                cardWidth={cardWidth}\n                cardHeight={cardHeight}\n                ppmm={ppmm}\n            >\n                <div\n                    style={{\n                        width: '100%',\n                        height: '100%',\n                        position: 'relative',\n                        overflow: imageFieldInfo.crop ? 'hidden' : 'visible',\n                    }}\n                    className={this.state.dragIsOver ? style.over : ''}\n                    onMouseDown={this.handleMouseDown}\n                    onTouchStart={this.handleTouchStart}\n                    onMouseMove={this.handleMouseMove}\n                    onTouchMove={this.handleTouchMove}\n                    onMouseUp={this.handleMouseUp}\n                    onTouchEnd={this.handleTouchEnd}\n                    onDragOver={this.handleDragOver}\n                    onDragLeave={this.handleDragLeave}\n                    onDrop={this.handleDrop}\n                >\n                    <img\n                        style={{\n                            position: 'absolute',\n                            opacity: imageUrl && imageUrl.length > 0 ? 1 : 0.5,\n                            left: (imageFieldInfo.cx || 0) * ppmm,\n                            top: (imageFieldInfo.cy || 0) * ppmm,\n                            width: calculatedImageWidth,\n                            height: calculatedImageHeight,\n                        }}\n                        src={imageUrl || emptyImageImage}\n                        alt=\"\"\n                    />\n                </div>\n            </FieldController>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, props: OwnProps): StateProps => {\n    let imageUrl: string | undefined = '';\n    if (props.imageFieldInfo && props.imageFieldInfo.type === 'image') {\n        if (props.imageFieldInfo.base64) {\n            imageUrl = 'data:image/svg+xml;base64,' + props.imageFieldInfo.base64;\n        } else {\n            imageUrl = props.imageFieldInfo && props.imageFieldInfo.url;\n        }\n    }\n\n    return {\n        imageUrl,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(ImageField);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DEFAULT_FONT, DEFAULT_FONT_SIZE, DEFAULT_LINE_HEIGHT } from '../constants';\nimport { Dispatch, cardSetActiveCardAndField, cardSetChangeText } from '../actions';\nimport { State } from '../reducers';\nimport { TextInfo } from '../types';\nimport style from './ContentEditable.module.css';\n\ninterface OwnProps {\n    cardId: string;\n    isOnBack: boolean;\n    fieldId: string;\n    align: string;\n    color: string;\n    fontFamily: string;\n    fontVariant: string;\n    fontSize: number;\n    lineHeight: number;\n}\n\ninterface StateProps {\n    isActive: boolean;\n    textValue: string;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass ContentEditable extends Component<Props> {\n    editDiv: React.RefObject<HTMLDivElement>;\n    currentText: string;\n    currentAlign: string;\n    currentColor: string;\n    currentFontFamily: string;\n    currentFontVariant: string;\n    currentFontSize: number;\n    currentLineHeight: number;\n    timeout: NodeJS.Timeout | null;\n    wasMoved: boolean;\n    x: number;\n    y: number;\n\n    constructor(props: Props) {\n        super(props);\n        this.editDiv = React.createRef();\n        this.currentText = '';\n        this.currentAlign = '';\n        this.currentColor = '';\n        this.currentFontFamily = '';\n        this.currentFontVariant = '';\n        this.currentFontSize = DEFAULT_FONT_SIZE;\n        this.currentLineHeight = DEFAULT_LINE_HEIGHT;\n        this.timeout = null;\n        this.wasMoved = false;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    componentDidMount() {\n        const { isActive } = this.props;\n\n        if (!this.editDiv.current) return;\n\n        this.editDiv.current.addEventListener('mousedown', this.handleMouseDown);\n        this.editDiv.current.addEventListener('touchstart', this.handleTouchStart);\n        this.editDiv.current.addEventListener('mousemove', this.handleMouseMove);\n        this.editDiv.current.addEventListener('touchmove', this.handleTouchMove, { passive: false });\n        this.editDiv.current.addEventListener('mouseup', this.handleMouseUp);\n        this.editDiv.current.addEventListener('touchend', this.handleTouchEnd, { passive: false });\n\n        if (isActive) {\n            this.editDiv.current.focus();\n        }\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n        const shouldUpdate =\n            nextProps.textValue !== this.currentText ||\n            nextProps.align !== this.currentAlign ||\n            nextProps.color !== this.currentColor ||\n            nextProps.fontFamily !== this.currentFontFamily ||\n            nextProps.fontVariant !== this.currentFontVariant ||\n            nextProps.fontSize !== this.currentFontSize ||\n            nextProps.lineHeight !== this.currentLineHeight ||\n            this.props.isActive !== nextProps.isActive;\n\n        return shouldUpdate;\n    }\n\n    componentDidUpdate() {\n        const { textValue, align, color, fontFamily, fontVariant, fontSize, lineHeight } = this.props;\n        this.currentText = textValue;\n        this.currentAlign = align;\n        this.currentColor = color;\n        this.currentFontFamily = fontFamily;\n        this.currentFontVariant = fontVariant;\n        this.currentFontSize = fontSize;\n        this.currentLineHeight = lineHeight;\n    }\n\n    handleMouseDown = (event: MouseEvent) => {\n        this.handleStart(event);\n    };\n\n    handleTouchStart = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.x = event.changedTouches[0].clientX;\n        this.y = event.changedTouches[0].clientY;\n        this.handleStart(event);\n    };\n\n    handleStart = (event: Event) => {\n        const { isActive } = this.props;\n        if (isActive) {\n            event.stopPropagation();\n        } else {\n            this.wasMoved = false;\n            event.preventDefault();\n        }\n    };\n\n    handleMouseMove = (event: MouseEvent) => {\n        this.handleMove(event);\n    };\n\n    handleTouchMove = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        if (\n            Math.abs(event.changedTouches[0].clientX - this.x) > 3 ||\n            Math.abs(event.changedTouches[0].clientY - this.y) > 3\n        ) {\n            this.handleMove(event);\n        }\n    };\n\n    handleMove = (event: Event) => {\n        const { isActive } = this.props;\n        if (!isActive) {\n            this.wasMoved = true;\n            event.preventDefault();\n        }\n    };\n\n    handleMouseUp = (event: MouseEvent) => {\n        this.handleComplete(event);\n    };\n\n    handleTouchEnd = (event: TouchEvent) => {\n        if (event.touches.length > 1) {\n            return; // Let's ignore zooms\n        }\n\n        this.handleComplete(event);\n    };\n\n    handleComplete = (event: Event) => {\n        const { dispatch, cardId, isOnBack, fieldId, isActive } = this.props;\n        if (!isActive && !this.wasMoved) {\n            event.preventDefault();\n            dispatch(cardSetActiveCardAndField(cardId, isOnBack, fieldId));\n\n            if (!this.editDiv.current) return;\n            this.editDiv.current.focus();\n        }\n    };\n\n    onFocus = () => {\n        if (!this.editDiv.current) return;\n\n        const { textValue, align, color, fontFamily, fontVariant, fontSize } = this.props;\n        this.currentText = textValue;\n        this.currentAlign = align;\n        this.currentColor = color;\n        this.currentFontFamily = fontFamily;\n        this.currentFontVariant = fontVariant;\n        this.currentFontSize = fontSize;\n\n        const range = document.createRange();\n        range.selectNodeContents(this.editDiv.current);\n        range.collapse(false);\n        const selection = window.getSelection();\n        if (selection !== null) {\n            selection.removeAllRanges();\n            selection.addRange(range);\n        }\n    };\n\n    updateContent = (timeoutInMiliseconds: number) => {\n        if (!this.editDiv.current) return;\n        let value = this.editDiv.current.innerHTML;\n\n        let imgUrlIdx = -1;\n        while ((imgUrlIdx = value.indexOf('<img src=\"http')) !== -1) {\n            value = value.slice(0, imgUrlIdx + 10) + value.slice(value.indexOf('/', imgUrlIdx + 18));\n        }\n\n        if (value !== this.currentText) {\n            this.currentText = value;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout(() => {\n                const { dispatch, cardId, fieldId } = this.props;\n                const textInfo: TextInfo = { value };\n\n                dispatch(cardSetChangeText(cardId, fieldId, textInfo));\n            }, timeoutInMiliseconds);\n        }\n    };\n\n    handleBlur = () => {\n        this.updateContent(0);\n    };\n\n    handleInput = () => {\n        this.updateContent(500);\n    };\n\n    handlePaste = (event: React.ClipboardEvent) => {\n        function escapeHtml(unsafe: string) {\n            return unsafe\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#039;');\n        }\n\n        event.preventDefault();\n\n        let text = '';\n        text = event.clipboardData.getData('text/plain');\n\n        text = text\n            .split('\\n')\n            .map((s: string) => `<div>${escapeHtml(s)}</div>`)\n            .join('');\n        document.execCommand('insertHTML', false, text);\n    };\n\n    render() {\n        const { color, align, fontFamily, fontVariant, fontSize, lineHeight } = this.props;\n        const isItalic = fontVariant && fontVariant.indexOf('italic') !== -1;\n        const fontWeight = isItalic\n            ? fontVariant === 'italic'\n                ? 400\n                : parseInt(fontVariant.slice(0, 3))\n            : fontVariant === 'regular'\n            ? 400\n            : parseInt(fontVariant);\n\n        return (\n            <div\n                ref={this.editDiv}\n                className={style.content}\n                contentEditable={true}\n                onFocus={this.onFocus}\n                onBlur={this.handleBlur}\n                onInput={this.handleInput}\n                onPaste={this.handlePaste}\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    textAlign: align === 'left' ? 'left' : align === 'right' ? 'right' : 'center',\n                    color: color,\n                    fontFamily: `'${fontFamily}'` || DEFAULT_FONT,\n                    fontStyle: isItalic ? 'italic' : 'normal',\n                    fontWeight,\n                    fontSize: `${fontSize}px`,\n                    outline: 'none',\n                    overflowWrap: 'break-word',\n                    lineHeight,\n                }}\n                dangerouslySetInnerHTML={{ __html: this.props.textValue }}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, props: OwnProps): StateProps => {\n    const fieldInfo = state.cardset.present.fields[props.cardId][props.fieldId];\n    const textValue = fieldInfo.type === 'text' ? fieldInfo.value : '';\n    return {\n        textValue,\n        isActive:\n            props.cardId === state.cardset.present.activeCardId &&\n            props.fieldId === state.cardset.present.activeFieldId,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(ContentEditable);\n","import { connect } from 'react-redux';\nimport React, { PureComponent } from 'react';\n\nimport { DEFAULT_LINE_HEIGHT } from '../constants';\nimport { Dispatch, cardSetChangeFieldAngle, cardSetChangeFieldPosition, cardSetChangeFieldSize } from '../actions';\nimport { State } from '../reducers';\nimport { TextFieldInfo } from '../types';\nimport ContentEditable from './ContentEditable';\nimport FieldController from './FieldController';\nimport emptyTextImage from './text.svg';\n\ninterface OwnProps {\n    cardId: string;\n    isOnBack: boolean;\n    ppmm: number;\n    textFieldInfo: TextFieldInfo;\n    cardWidth: number;\n    cardHeight: number;\n}\n\ninterface StateProps {\n    text: string;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass TextField extends PureComponent<Props> {\n    handleDrag = (x: number, y: number, cardOnly: boolean, group: string) => {\n        const { dispatch, cardId, textFieldInfo, ppmm } = this.props;\n        dispatch(\n            cardSetChangeFieldPosition(cardOnly ? cardId : undefined, textFieldInfo.id, x / ppmm, y / ppmm, group),\n        );\n    };\n\n    handleResize = (width: number, height: number, cardOnly: boolean, group: string) => {\n        const { dispatch, textFieldInfo, cardId, ppmm } = this.props;\n        dispatch(\n            cardSetChangeFieldSize(cardOnly ? cardId : undefined, textFieldInfo.id, width / ppmm, height / ppmm, group),\n        );\n    };\n\n    handleRotate = (angle: number, cardOnly: boolean, group: string) => {\n        const { dispatch, textFieldInfo, cardId } = this.props;\n        dispatch(cardSetChangeFieldAngle(cardOnly ? cardId : undefined, textFieldInfo.id, angle, group));\n    };\n\n    render() {\n        const { textFieldInfo, text, ppmm, cardWidth, cardHeight } = this.props;\n\n        return (\n            <FieldController\n                cardId={this.props.cardId}\n                fieldId={textFieldInfo.id}\n                x={textFieldInfo.x * ppmm}\n                y={textFieldInfo.y * ppmm}\n                width={textFieldInfo.width * ppmm}\n                height={textFieldInfo.height * ppmm}\n                angle={textFieldInfo.angle}\n                onDrag={this.handleDrag}\n                onResize={this.handleResize}\n                onRotate={this.handleRotate}\n                cardWidth={cardWidth}\n                cardHeight={cardHeight}\n                ppmm={ppmm}\n            >\n                {text === '' && (\n                    <div\n                        style={{\n                            width: '100%',\n                            height: '100%',\n                            position: 'fixed',\n                            left: 0,\n                            top: 0,\n                            zIndex: -1,\n                            textAlign:\n                                textFieldInfo.align === 'left'\n                                    ? 'left'\n                                    : textFieldInfo.align === 'right'\n                                    ? 'right'\n                                    : 'center',\n                        }}\n                    >\n                        <img style={{ opacity: 0.5, width: 'auto', height: '100%' }} src={emptyTextImage} alt=\"\" />\n                    </div>\n                )}\n\n                <ContentEditable\n                    cardId={this.props.cardId}\n                    isOnBack={this.props.isOnBack}\n                    fieldId={textFieldInfo.id}\n                    align={textFieldInfo.align}\n                    color={textFieldInfo.color}\n                    fontFamily={textFieldInfo.fontFamily}\n                    fontVariant={textFieldInfo.fontVariant}\n                    fontSize={textFieldInfo.fontSize * ppmm}\n                    lineHeight={textFieldInfo.lineHeight || DEFAULT_LINE_HEIGHT}\n                />\n            </FieldController>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, props: OwnProps): StateProps => {\n    let fieldInfo = state.cardset.present.fields[props.cardId][props.textFieldInfo.id];\n    let text = fieldInfo.type === 'text' ? fieldInfo.value : '';\n    return {\n        text,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(TextField);\n","import { connect } from 'react-redux';\nimport Measure from 'react-measure';\nimport React, { Component } from 'react';\n\nimport { BLEED_WIDTH } from '../constants';\nimport { CardType, IdsArray, FieldInfoCollection } from '../types';\nimport { Dispatch, cardSetActiveCardAndField } from '../actions';\nimport { State } from '../reducers';\nimport ImageField from './ImageField';\nimport TextField from './TextField';\nimport style from './Card.module.css';\n\ninterface OwnProps {\n    card: CardType;\n    isBack: boolean;\n}\n\ninterface StateProps {\n    cardFields: FieldInfoCollection;\n    fieldsIds: IdsArray;\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    isActiveCard: boolean;\n    zoom: number;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface LocalState {\n    dimensions: {\n        width: number;\n        height: number;\n    };\n}\n\nclass Card extends Component<Props, LocalState> {\n    state = {\n        dimensions: {\n            width: -1,\n            height: -1,\n        },\n    };\n\n    handleFieldDeselect = (event: React.MouseEvent | React.TouchEvent) => {\n        const { dispatch, card, isBack } = this.props;\n        const el = event.target as HTMLElement;\n        if (el.getAttribute('id') === `card_${card.id}`) {\n            dispatch(cardSetActiveCardAndField(card.id, isBack, undefined));\n            event.stopPropagation();\n        }\n    };\n\n    render() {\n        const { cardFields, fieldsIds, card, isBack, width, height, isActiveCard, zoom, isTwoSided } = this.props;\n        const widthWithBleeds = width + BLEED_WIDTH * 2;\n        const heightWithBleeds = height + BLEED_WIDTH * 2;\n\n        const ppmm = this.state.dimensions.width / widthWithBleeds;\n\n        return (\n            <div>\n                <Measure\n                    client\n                    onResize={contentRect => {\n                        if (!contentRect.client) {\n                            return;\n                        }\n                        this.setState({ dimensions: contentRect.client });\n                    }}\n                >\n                    {({ measureRef }) => (\n                        <div\n                            className={`${style.card} ${isActiveCard ? style.active : ''}`}\n                            id={`card_${card.id}`}\n                            ref={measureRef}\n                            style={{\n                                width: `${widthWithBleeds * zoom}mm`,\n                                height: `${heightWithBleeds * zoom}mm`,\n                                position: 'relative',\n                                overflow: 'hidden',\n                            }}\n                            onMouseDown={this.handleFieldDeselect}\n                            onTouchStart={this.handleFieldDeselect}\n                        >\n                            {fieldsIds.map(id => {\n                                if (!(id in cardFields)) {\n                                    return null;\n                                }\n                                const p = cardFields[id];\n                                if (p.type === 'image') {\n                                    return (\n                                        <ImageField\n                                            key={p.id}\n                                            cardId={card.id}\n                                            isOnBack={isBack}\n                                            imageFieldInfo={p}\n                                            ppmm={ppmm}\n                                            cardWidth={this.state.dimensions.width}\n                                            cardHeight={this.state.dimensions.height}\n                                        />\n                                    );\n                                } else if (p.type === 'text') {\n                                    return (\n                                        <TextField\n                                            key={p.id}\n                                            cardId={card.id}\n                                            isOnBack={isBack}\n                                            textFieldInfo={p}\n                                            ppmm={ppmm}\n                                            cardWidth={this.state.dimensions.width}\n                                            cardHeight={this.state.dimensions.height}\n                                        />\n                                    );\n                                }\n                                return null;\n                            })}\n\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    width: `${width * zoom}mm`,\n                                    height: `${height * zoom}mm`,\n                                    left: `${BLEED_WIDTH * zoom}mm`,\n                                    top: `${BLEED_WIDTH * zoom}mm`,\n                                    border: '1px dashed black',\n                                    borderRadius: '5mm',\n                                    pointerEvents: 'none',\n                                }}\n                            />\n\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    width: `${(width - BLEED_WIDTH * 2) * zoom}mm`,\n                                    height: `${(height - BLEED_WIDTH * 2) * zoom}mm`,\n                                    left: `${BLEED_WIDTH * 2 * zoom}mm`,\n                                    top: `${BLEED_WIDTH * 2 * zoom}mm`,\n                                    border: '1px dashed red',\n                                    borderRadius: '5mm',\n                                    pointerEvents: 'none',\n                                }}\n                            />\n                        </div>\n                    )}\n                </Measure>\n                {isTwoSided && (\n                    <div\n                        className={style.title}\n                        style={{\n                            width: `${widthWithBleeds * zoom}mm`,\n                            position: 'relative',\n                        }}\n                    >\n                        {isBack ? 'Back' : 'Front'}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State, props: OwnProps): StateProps => {\n    let cardFields = state.cardset.present.fields[props.card.id] || {};\n\n    return {\n        cardFields,\n        fieldsIds: state.cardset.present.fieldsAllIds.filter(\n            id => ((id in cardFields && cardFields[id].isOnBack) || false) === props.isBack,\n        ),\n        width: state.cardset.present.width,\n        height: state.cardset.present.height,\n        isTwoSided: state.cardset.present.isTwoSided,\n        isActiveCard:\n            state.cardset.present.activeCardId === props.card.id && state.cardset.present.isBackActive === props.isBack,\n        zoom: state.cardset.present.zoom,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(Card);\n","import React, { Component } from 'react';\nimport style from './EditableTitle.module.css';\n\ninterface Props {\n    title: string;\n    onChange: (newName: string) => void;\n}\n\nexport default class EditableTitle extends Component<Props> {\n    state = {\n        titleIsEdited: false,\n    };\n\n    handleClick = () => {\n        this.setState({ titleIsEdited: true });\n    };\n\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(event.target.value);\n    };\n\n    handleBlur = () => {\n        this.setState({ titleIsEdited: false });\n    };\n\n    render() {\n        const { titleIsEdited } = this.state;\n        const { title } = this.props;\n\n        return (\n            <>\n                {!titleIsEdited && (\n                    <h1 className={style.input} onClick={this.handleClick}>\n                        {title}\n                    </h1>\n                )}\n                {titleIsEdited && (\n                    <input\n                        autoFocus\n                        type=\"text\"\n                        className={style.input}\n                        value={title}\n                        onChange={this.handleChange}\n                        onBlur={this.handleBlur}\n                    />\n                )}\n            </>\n        );\n    }\n}\n","import { Ghost, Browser } from 'react-kawaii';\nimport React, { Component } from 'react';\n\nexport enum Character {\n    Ghost,\n    Browser,\n}\ninterface Props {\n    character: Character;\n    mood?: string;\n}\n\nexport default class KawaiiMessage extends Component<Props> {\n    render() {\n        const { character, mood } = this.props;\n\n        return (\n            <div\n                style={{\n                    marginTop: '1em',\n                    marginBottom: '1em',\n                    padding: '1em',\n                    borderRadius: '1em',\n                    backgroundColor: 'var(--color-2)',\n                    display: 'grid',\n                    grid: 'auto-flow / minmax(120px, auto) 1fr',\n                }}\n            >\n                {character === Character.Ghost && <Ghost size={120} mood={mood || 'blissful'} color=\"#faebef\" />}\n                {character === Character.Browser && <Browser size={120} mood={mood || 'blissful'} color=\"#faebef\" />}\n                <div style={{ marginLeft: '1em' }}>{this.props.children}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport style from './Loader.module.css';\n\ninterface Props {\n    fixed?: boolean;\n    small?: boolean;\n}\n\nexport default class Loader extends Component<Props> {\n    render() {\n        const { fixed, small } = this.props;\n\n        return (\n            <div className={`${style.loader} ${fixed ? style.fixed : style.relative} ${small ? style.small : ''}`}>\n                <div />\n                <div />\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { CardType, DispatchProps, SidebarOwnProps } from '../types';\nimport { State } from '../reducers';\nimport {\n    cardSetCloneCard,\n    cardSetRemoveCard,\n    cardSetUpdateCardCount,\n    cardSetRotateCardsRight,\n    cardSetRotateCardsLeft,\n    cardSetRedo,\n    cardSetUndo,\n} from '../actions';\nimport style from './SidebarDetails.module.css';\n\ninterface StateProps {\n    activeCard: CardType | null;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarDetails extends Component<Props> {\n    handleRotateRightClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetRotateCardsRight());\n    };\n\n    handleRotateLeftClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetRotateCardsLeft());\n    };\n\n    handleCloneCardClick = () => {\n        const { activeCard, dispatch } = this.props;\n        if (activeCard !== null) {\n            dispatch(cardSetCloneCard(activeCard));\n        }\n    };\n\n    handleRemoveCardClick = () => {\n        const { activeCard, dispatch } = this.props;\n        if (activeCard !== null) {\n            dispatch(cardSetRemoveCard(activeCard));\n        }\n    };\n\n    handleCountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeCard, dispatch } = this.props;\n        if (activeCard !== null) {\n            dispatch(cardSetUpdateCardCount(activeCard, parseInt(event.target.value)));\n        }\n    };\n\n    handleUndoClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetUndo());\n    };\n\n    handleRedoClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetRedo());\n    };\n\n    render() {\n        const { activeCard, visible } = this.props;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'initial' : 'none' }}>\n                <div>\n                    <button\n                        onClick={this.handleCloneCardClick}\n                        title=\"Clone card\"\n                        className={activeCard === null ? style.disabled : ''}\n                    >\n                        <i className=\"material-icons\">file_copy</i>\n                    </button>\n\n                    <input\n                        type=\"number\"\n                        value={activeCard !== null ? activeCard.count.toString() : 0}\n                        onChange={this.handleCountChange}\n                        title=\"Number of card's copies\"\n                        className={activeCard === null ? style.disabled : ''}\n                    />\n                    <button\n                        onClick={this.handleRemoveCardClick}\n                        title=\"Remove card\"\n                        className={activeCard === null ? style.disabled : ''}\n                    >\n                        <i className=\"material-icons\">delete</i>\n                    </button>\n                </div>\n\n                <div>\n                    <button onClick={this.handleUndoClick} title=\"Undo (Ctrl+Z)\">\n                        <i className=\"material-icons\">undo</i>\n                    </button>\n\n                    <button onClick={this.handleRedoClick} title=\"Redo (Ctrl+Shift+Z or Ctrl+Y)\">\n                        <i className=\"material-icons\">redo</i>\n                    </button>\n                </div>\n\n                <div>\n                    <button onClick={this.handleRotateRightClick} title=\"Rotate cards right\">\n                        <i className=\"material-icons\">rotate_right</i>\n                    </button>\n\n                    <button onClick={this.handleRotateLeftClick} title=\"Rotate cards left\">\n                        <i className=\"material-icons\">rotate_left</i>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activeCard:\n            state.cardset.present.activeCardId !== undefined\n                ? state.cardset.present.cardsById[state.cardset.present.activeCardId]\n                : null,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarDetails);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { ACTIVITY_CREATING_PNG, State } from '../reducers';\nimport { DispatchProps, SidebarOwnProps } from '../types';\nimport { gameCreatePngRequest } from '../actions';\nimport style from './SidebarGeneratePng.module.css';\n\ninterface StateProps {\n    width: number;\n    height: number;\n    isCreatingPng: boolean;\n    activeCardset: string | null;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\ninterface LocalState {\n    dpi: number;\n}\n\nexport class SidebarGeneratePng extends Component<Props, LocalState> {\n    state: LocalState = {\n        dpi: 300,\n    };\n\n    handleDpiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ dpi: parseInt(event.target.value) });\n    };\n\n    handleGenerate = () => {\n        const { dispatch, activeCardset } = this.props;\n        const { dpi } = this.state;\n\n        if (activeCardset !== null) {\n            dispatch(gameCreatePngRequest(dpi, 'cardsets', activeCardset));\n        }\n    };\n\n    render() {\n        const { visible, width, height, isCreatingPng } = this.props;\n        const { dpi } = this.state;\n\n        const calculatedWidth = Math.round(dpi * (width / 25.4 + 1 / 4));\n        const calculatedHeight = Math.round(dpi * (height / 25.4 + 1 / 4));\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'grid' : 'none' }}>\n                <div>Here you can generate your cards as PNG images.</div>\n                <label htmlFor=\"dpi\">DPI:</label>\n                <input\n                    id=\"dpi\"\n                    type=\"number\"\n                    min=\"1\"\n                    step=\"1\"\n                    onChange={this.handleDpiChange}\n                    className=\"form-control\"\n                    placeholder=\"DPI\"\n                    value={dpi}\n                />\n\n                <div>Width in pixels: {calculatedWidth}</div>\n                <div>Height in pixels: {calculatedHeight}</div>\n\n                <button disabled={isCreatingPng} onClick={this.handleGenerate}>\n                    Generate\n                </button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        width: state.cardset.present.width,\n        height: state.cardset.present.height,\n        isCreatingPng: (state.games.activity & ACTIVITY_CREATING_PNG) === ACTIVITY_CREATING_PNG,\n        activeCardset: state.cardsets.active,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarGeneratePng);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { ACTIVITY_CREATING_PDF, State } from '../reducers';\nimport { Dispatch, gameCreatePdfRequest } from '../actions';\nimport KawaiiMessage, { Character } from './KawaiiMessage';\n\ninterface OwnProps {\n    type: string;\n    id: string;\n    withHelp?: boolean;\n}\n\ninterface StateProps {\n    isCreatingPdf: boolean;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\ninterface LocalState {\n    pageWidth: number;\n    pageHeight: number;\n    topBottomMargin: number;\n    leftRightMargin: number;\n    verticalSpace: number;\n    horizontalSpace: number;\n    includeBleedingArea: boolean;\n    cutMarksForScissors: boolean;\n    cutMarksForGuillotine: boolean;\n    cutMarksInMarginArea: boolean;\n    cutMarksOnFrontSideOnly: boolean;\n}\n\nexport class PDFGenerator extends Component<Props, LocalState> {\n    state = {\n        pageWidth: 210,\n        pageHeight: 297,\n        topBottomMargin: 15,\n        leftRightMargin: 9,\n        verticalSpace: 0,\n        horizontalSpace: 0,\n        includeBleedingArea: false,\n        cutMarksForScissors: true,\n        cutMarksForGuillotine: false,\n        cutMarksInMarginArea: false,\n        cutMarksOnFrontSideOnly: false,\n    };\n\n    handleGeneratePdfClick = () => {\n        const { dispatch } = this.props;\n        const {\n            pageWidth,\n            pageHeight,\n            topBottomMargin,\n            leftRightMargin,\n            verticalSpace,\n            horizontalSpace,\n            includeBleedingArea,\n            cutMarksForScissors,\n            cutMarksForGuillotine,\n            cutMarksInMarginArea,\n            cutMarksOnFrontSideOnly,\n        } = this.state;\n\n        dispatch(\n            gameCreatePdfRequest(\n                this.props.type,\n                this.props.id,\n                pageWidth,\n                pageHeight,\n                topBottomMargin,\n                leftRightMargin,\n                verticalSpace,\n                horizontalSpace,\n                includeBleedingArea,\n                cutMarksForScissors,\n                cutMarksForGuillotine,\n                cutMarksInMarginArea,\n                cutMarksOnFrontSideOnly,\n            ),\n        );\n    };\n\n    handlePageWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ pageWidth: parseFloat(event.target.value) });\n    };\n\n    handlePageHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ pageHeight: parseFloat(event.target.value) });\n    };\n\n    handleTopBottomMarginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ topBottomMargin: parseFloat(event.target.value) });\n    };\n\n    handleLeftRightMarginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ leftRightMargin: parseFloat(event.target.value) });\n    };\n\n    handleVerticalSpaceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ verticalSpace: parseFloat(event.target.value) });\n    };\n\n    handleHorizontalSpaceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ horizontalSpace: parseFloat(event.target.value) });\n    };\n\n    handleIncludeBleedingAreaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ includeBleedingArea: event.target.checked });\n    };\n\n    handleCutMarksForScissors = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ cutMarksForScissors: event.target.checked });\n    };\n\n    handleCutMarksForGuillotine = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ cutMarksForGuillotine: event.target.checked });\n    };\n\n    handleCutMarksInMarginArea = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ cutMarksInMarginArea: event.target.checked });\n    };\n\n    handleCutMarksOnFrontSideOnly = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ cutMarksOnFrontSideOnly: event.target.checked });\n    };\n\n    render() {\n        const { isCreatingPdf, withHelp } = this.props;\n\n        return (\n            <>\n                {withHelp && (\n                    <KawaiiMessage character={Character.Ghost} mood=\"excited\">\n                        <p>Here you can generate PDF.</p>\n                        <p>Hint 1: A4 page size is 210 mm x 297 mm. Letter page size is 215.9 x 279.4 mm.</p>\n                        <p>Hint 2: 1 inch is equal to 25.4 mm.</p>\n                    </KawaiiMessage>\n                )}\n\n                <div className=\"form\">\n                    <label htmlFor=\"page_width\">Page width (mm):</label>\n                    <input\n                        id=\"page_width\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handlePageWidthChange}\n                        placeholder=\"Page width\"\n                        value={this.state.pageWidth}\n                    />\n                    <label htmlFor=\"page_height\">Page height (mm):</label>\n                    <input\n                        id=\"page_height\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handlePageHeightChange}\n                        placeholder=\"Page Height\"\n                        value={this.state.pageHeight}\n                    />\n                    <label htmlFor=\"page_topbottom_margin\">Margin from top/bottom (mm):</label>\n                    <input\n                        id=\"page_topbottom_margin\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handleTopBottomMarginChange}\n                        placeholder=\"Top/Bottom margin\"\n                        value={this.state.topBottomMargin}\n                    />\n                    <label htmlFor=\"page_leftright_margin\">Margin from left/right (mm):</label>\n                    <input\n                        id=\"page_leftright_margin\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handleLeftRightMarginChange}\n                        placeholder=\"Left/Right margin\"\n                        value={this.state.leftRightMargin}\n                    />\n\n                    <label htmlFor=\"card_vertical_space\">Vertical space between cards (mm):</label>\n                    <input\n                        id=\"card_vertical_space\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handleVerticalSpaceChange}\n                        placeholder=\"Vertical space\"\n                        value={this.state.verticalSpace}\n                    />\n\n                    <label htmlFor=\"card_horizontal_space\">Horizontal space between cards (mm):</label>\n                    <input\n                        id=\"card_horizontal_space\"\n                        type=\"number\"\n                        step=\"0.1\"\n                        onChange={this.handleHorizontalSpaceChange}\n                        placeholder=\"Horizontal space\"\n                        value={this.state.horizontalSpace}\n                    />\n\n                    <label\n                        title=\"You might need this for Cardmogrifier or professional printing. Do\n                        not check this if all you are interested in is card (area inside black dashed rectangle).\"\n                    >\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.includeBleedingArea}\n                            onChange={this.handleIncludeBleedingAreaChange}\n                        />\n                        Generate with bleeding area.\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.cutMarksForScissors}\n                            onChange={this.handleCutMarksForScissors}\n                        />\n                        Generate with cut marks for paper scissors.\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.cutMarksForGuillotine}\n                            onChange={this.handleCutMarksForGuillotine}\n                        />\n                        Generate with cut marks for paper guillotine.\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.cutMarksInMarginArea}\n                            onChange={this.handleCutMarksInMarginArea}\n                        />\n                        Generate with cut marks for paper guillotine in margin area.\n                    </label>\n\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={this.state.cutMarksOnFrontSideOnly}\n                            onChange={this.handleCutMarksOnFrontSideOnly}\n                        />\n                        Generate cut marks on front side only (useful for printing on both sides).\n                    </label>\n\n                    <button disabled={isCreatingPdf} onClick={this.handleGeneratePdfClick}>\n                        Generate PDF\n                    </button>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        isCreatingPdf: (state.games.activity & ACTIVITY_CREATING_PDF) === ACTIVITY_CREATING_PDF,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(PDFGenerator);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, SidebarOwnProps } from '../types';\nimport { State } from '../reducers';\nimport PDFGenerator from './PDFGenerator';\nimport style from './SidebarGeneratePdf.module.css';\n\ninterface StateProps {\n    activeCardSetId: string | null;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarGeneratePdf extends Component<Props> {\n    render() {\n        const { activeCardSetId, visible } = this.props;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'grid' : 'none' }}>\n                {activeCardSetId !== null && <PDFGenerator type=\"cardsets\" id={activeCardSetId} />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activeCardSetId: state.cardsets.active,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarGeneratePdf);\n","import { ChromePicker, ColorResult } from 'react-color';\nimport React, { Component } from 'react';\n\ninterface Props {\n    onChange: (color: ColorResult) => void;\n    color: string;\n}\n\ninterface State {\n    displayColorPicker: boolean;\n}\n\nexport default class ColorButton extends Component<Props, State> {\n    state = {\n        displayColorPicker: false,\n    };\n\n    handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker });\n    };\n\n    handleClose = () => {\n        this.setState({ displayColorPicker: false });\n    };\n\n    handleChange = (color: ColorResult) => {\n        this.props.onChange(color);\n    };\n\n    render() {\n        const popover: React.CSSProperties = {\n            position: 'absolute',\n            zIndex: 2,\n        };\n        const cover: React.CSSProperties = {\n            position: 'fixed',\n            top: '0px',\n            right: '0px',\n            bottom: '0px',\n            left: '0px',\n        };\n        return (\n            <>\n                <button onClick={this.handleClick} title=\"Change color\">\n                    <i className=\"material-icons\">color_lens</i>\n                </button>\n                {this.state.displayColorPicker ? (\n                    <div style={popover}>\n                        <div style={cover} onClick={this.handleClose} />\n                        <ChromePicker color={this.props.color} disableAlpha={true} onChange={this.handleChange} />\n                    </div>\n                ) : null}\n            </>\n        );\n    }\n}\n","import { ColorResult } from 'react-color';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, IdsArray, ImageArray, SidebarOwnProps, FieldInfo, ImageInfo } from '../types';\nimport { State } from '../reducers';\nimport {\n    cardSetAddImageField,\n    cardSetChangeActiveFieldName,\n    cardSetChangeFitForActiveField,\n    cardSetChangeCropForActiveField,\n    cardSetChangeImage,\n    cardSetLockActiveField,\n    cardSetLowerActiveFieldToBottom,\n    cardSetRaiseActiveFieldToTop,\n    cardSetRemoveActiveField,\n    cardSetUnlockActiveField,\n    imageListRequest,\n    cardSetChangeApplyToAllCards,\n    cardSetRaiseActiveField,\n    cardSetLowerActiveField,\n} from '../actions';\nimport ColorButton from './ColorButton';\nimport style from './SidebarImage.module.css';\n\ninterface StateProps {\n    activeFieldInfo?: FieldInfo;\n    crop: boolean;\n    activeCardId?: string;\n    filter: string;\n    images: ImageArray;\n    cardsAllIds: IdsArray;\n    applyToAllCards: boolean;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\ninterface LocalState {\n    location: string;\n}\n\nexport class SidebarImage extends Component<Props, LocalState> {\n    state = {\n        location: 'all',\n    };\n\n    handleAddImageClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetAddImageField());\n    };\n\n    changeImage = (ii: ImageInfo) => {\n        const { activeCardId, activeFieldInfo, dispatch } = this.props;\n\n        if (activeFieldInfo) {\n            dispatch(cardSetChangeImage(activeCardId ? activeCardId : undefined, activeFieldInfo.id, ii));\n        }\n    };\n\n    handleRemoveImageFromFieldClick = () => {\n        const ii: ImageInfo = { url: undefined, base64: undefined };\n        this.changeImage(ii);\n    };\n\n    handleRemoveClick = () => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            dispatch(cardSetRemoveActiveField());\n        }\n    };\n\n    handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeFieldInfo, dispatch } = this.props;\n        const name = event.target.value.trim();\n        if (activeFieldInfo !== undefined) {\n            dispatch(cardSetChangeActiveFieldName(name));\n        }\n    };\n\n    handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { location } = this.state;\n        const filter = event.target.value;\n        dispatch(imageListRequest(filter, location));\n    };\n\n    handleImageSelect = (imageName: string, width: number, height: number) => {\n        const { activeFieldInfo } = this.props;\n\n        if (activeFieldInfo !== undefined) {\n            const color = activeFieldInfo && activeFieldInfo.color;\n\n            const ii: ImageInfo = { url: `/api/imagefiles/${imageName}`, color, width, height, base64: undefined };\n            this.changeImage(ii);\n        }\n    };\n\n    handleRaise = (event: React.MouseEvent) => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetRaiseActiveFieldToTop());\n            } else {\n                dispatch(cardSetRaiseActiveField());\n            }\n        }\n    };\n\n    handleLower = (event: React.MouseEvent) => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetLowerActiveFieldToBottom());\n            } else {\n                dispatch(cardSetLowerActiveField());\n            }\n        }\n    };\n\n    handleLockField = () => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            dispatch(cardSetLockActiveField());\n        }\n    };\n\n    handleUnlockField = () => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            dispatch(cardSetUnlockActiveField());\n        }\n    };\n\n    handleFitOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const fit = event.target.value;\n\n        dispatch(cardSetChangeFitForActiveField(fit));\n    };\n\n    handleOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { filter, dispatch } = this.props;\n        const location = event.target.value;\n\n        this.setState({ location });\n        dispatch(imageListRequest(filter, location));\n    };\n\n    handleColorChange = (color: ColorResult) => {\n        const ii: ImageInfo = { color: color.hex };\n        this.changeImage(ii);\n    };\n\n    handleRemoveColorClick = () => {\n        const ii: ImageInfo = { color: undefined };\n        this.changeImage(ii);\n    };\n\n    handleApplyToAllCardChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetChangeApplyToAllCards(event.target.checked));\n    };\n\n    handleChangeCrop = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeFieldInfo, dispatch } = this.props;\n        if (activeFieldInfo !== undefined) {\n            dispatch(cardSetChangeCropForActiveField(event.target.checked));\n        }\n    };\n\n    render() {\n        const { activeFieldInfo, crop, filter, visible, applyToAllCards } = this.props;\n        const { location } = this.state;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'grid' : 'none' }}>\n                <div>\n                    <button onClick={this.handleAddImageClick} title=\"Add image field\">\n                        <i className=\"material-icons\">add_photo_alternate</i>\n                    </button>\n\n                    {activeFieldInfo !== undefined && (\n                        <>\n                            <button onClick={this.handleRaise} title=\"Raise image (with Ctrl - raise to top)\">\n                                <i className=\"material-icons\">arrow_upward</i>\n                            </button>\n                            <button onClick={this.handleLower} title=\"Lower image (with Ctrl - lower to bottom)\">\n                                <i className=\"material-icons\">arrow_downward</i>\n                            </button>\n                        </>\n                    )}\n\n                    {activeFieldInfo &&\n                        activeFieldInfo.type === 'image' &&\n                        (activeFieldInfo.url || activeFieldInfo.base64) && (\n                            <button onClick={this.handleRemoveImageFromFieldClick} title=\"Remove image from field\">\n                                <i className=\"material-icons\">remove_circle_outline</i>\n                            </button>\n                        )}\n\n                    {activeFieldInfo !== undefined && !activeFieldInfo.locked && (\n                        <button\n                            onClick={this.handleLockField}\n                            title=\"Lock image field. Locked field can't be dragged, rotated, resized and removed.\"\n                        >\n                            <i className=\"material-icons\">lock_open</i>\n                        </button>\n                    )}\n\n                    {activeFieldInfo !== undefined && activeFieldInfo.locked && (\n                        <button\n                            onClick={this.handleUnlockField}\n                            title=\"Unlock image field. Unlocked text field can be dragged, rotated, resized and removed.\"\n                        >\n                            <i className=\"material-icons\">lock</i>\n                        </button>\n                    )}\n\n                    <button\n                        className={activeFieldInfo === undefined || activeFieldInfo.locked ? style.disabled : ''}\n                        onClick={this.handleRemoveClick}\n                        title=\"Remove field\"\n                    >\n                        <i className=\"material-icons\">remove</i>\n                    </button>\n\n                    {activeFieldInfo !== undefined && (\n                        <input\n                            type=\"text\"\n                            value={activeFieldInfo.name || ''}\n                            placeholder={activeFieldInfo.id}\n                            onChange={this.handleNameChange}\n                            title=\"Change name of image field.\"\n                        />\n                    )}\n\n                    {activeFieldInfo && activeFieldInfo.type === 'image' && (\n                        <form>\n                            <div>\n                                Fit:\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"width\"\n                                        checked={!activeFieldInfo.fit || activeFieldInfo.fit === 'width'}\n                                        onChange={this.handleFitOptionChange}\n                                    />\n                                    width\n                                </label>\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"height\"\n                                        checked={activeFieldInfo.fit === 'height'}\n                                        onChange={this.handleFitOptionChange}\n                                    />\n                                    height\n                                </label>\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"stretch\"\n                                        checked={activeFieldInfo.fit === 'stretch'}\n                                        onChange={this.handleFitOptionChange}\n                                    />\n                                    stretch\n                                </label>\n                            </div>\n                        </form>\n                    )}\n                </div>\n\n                {activeFieldInfo && activeFieldInfo.type === 'image' && (\n                    <>\n                        <div>\n                            <label>\n                                <input type=\"checkbox\" checked={crop} onChange={this.handleChangeCrop} />\n                                Crop\n                            </label>\n                            <ColorButton\n                                color={(activeFieldInfo && activeFieldInfo.color) || '#FFFFFF'}\n                                onChange={this.handleColorChange}\n                            />\n                            {activeFieldInfo && activeFieldInfo.color && (\n                                <button onClick={this.handleRemoveColorClick} title=\"Remove color\">\n                                    <i className=\"material-icons\">remove_circle</i>\n                                </button>\n                            )}\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={applyToAllCards}\n                                    onChange={this.handleApplyToAllCardChange}\n                                />\n                                Apply to all cards\n                            </label>\n                        </div>\n                    </>\n                )}\n                <div>\n                    <form>\n                        Source:\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"all\"\n                                checked={location === 'all'}\n                                onChange={this.handleOptionChange}\n                            />\n                            All\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"user\"\n                                checked={location === 'user'}\n                                onChange={this.handleOptionChange}\n                            />\n                            User\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"game\"\n                                checked={location === 'game'}\n                                onChange={this.handleOptionChange}\n                            />\n                            Game\n                        </label>\n                    </form>\n                </div>\n\n                <div>\n                    <input type=\"text\" placeholder=\"Search...\" value={filter} onChange={this.handleFilterChange} />\n                </div>\n                <div className={style.images}>\n                    {this.props.images.map(im => {\n                        return (\n                            <img\n                                key={im.id}\n                                src={`/api/imagefiles/${im.name}`}\n                                data-width={im.width}\n                                data-height={im.height}\n                                onClick={() => this.handleImageSelect(im.name, im.width, im.height)}\n                                alt={im.name}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    const activeFieldInfo =\n        state.cardset.present.activeCardId !== undefined && state.cardset.present.activeFieldId !== undefined\n            ? state.cardset.present.fields[state.cardset.present.activeCardId][state.cardset.present.activeFieldId]\n            : undefined;\n\n    const activeCardId = state.cardset.present.activeCardId;\n\n    return {\n        activeFieldInfo,\n        crop: activeFieldInfo && activeFieldInfo.type === 'image' ? activeFieldInfo.crop || false : false,\n        activeCardId,\n        images: state.images.images,\n        filter: state.images.filter,\n        cardsAllIds: state.cardset.present.cardsAllIds,\n        applyToAllCards: state.cardset.present.applyToAllCards,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarImage);\n","import 'filepond/dist/filepond.min.css';\n\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport { connect } from 'react-redux';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport Papa from 'papaparse';\nimport React, { Component } from 'react';\nimport md5 from 'md5';\nimport shortid from 'shortid';\n\nimport {\n    CardType,\n    CardsCollection,\n    DispatchProps,\n    IdsArray,\n    SidebarOwnProps,\n    FieldInfoByCardCollection,\n    FieldInfoCollection,\n} from '../types';\nimport { FPLoadCallback, FPRevertLoadCallback, cardSetImportData, messageDisplay } from '../actions';\nimport { State } from '../reducers';\nimport { downloadBlob } from '../utils';\nimport style from './SidebarImportExport.module.css';\n\nregisterPlugin(FilePondPluginFileValidateType);\n\ninterface StateProps {\n    activeGame: string | null;\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    cardsAllIds: IdsArray;\n    cardsById: CardsCollection;\n    fieldsAllIds: IdsArray;\n    fields: FieldInfoByCardCollection;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarImportExport extends Component<Props> {\n    prepareImagePaths = (fields: FieldInfoByCardCollection) => {\n        const { activeGame } = this.props;\n        if (activeGame === null) return fields;\n\n        const ending = '_' + md5(activeGame);\n\n        const preparedImages: FieldInfoByCardCollection = {};\n\n        for (const cardId in fields) {\n            const fieldsByCard = { ...fields[cardId] };\n            for (const fieldId in fieldsByCard) {\n                const imageInfo = { ...fieldsByCard[fieldId] };\n                if (imageInfo.type === 'image') {\n                    let url = imageInfo.url || '';\n                    if (url.endsWith(ending)) {\n                        url = url.replace(ending, '');\n                    } else {\n                        imageInfo.global = true;\n                    }\n\n                    imageInfo.url = url.replace('/api/imagefiles/', '');\n                }\n                fieldsByCard[fieldId] = imageInfo;\n            }\n            preparedImages[cardId] = fieldsByCard;\n        }\n\n        return preparedImages;\n    };\n\n    handleExportJson = () => {\n        const { width, height, isTwoSided, cardsAllIds, cardsById, fields, fieldsAllIds } = this.props;\n\n        const preparedFields = this.prepareImagePaths(fields);\n\n        const data = {\n            width,\n            height,\n            isTwoSided,\n            cardsAllIds,\n            cardsById,\n            fields: preparedFields,\n            fieldsAllIds,\n        };\n\n        const json = JSON.stringify(data, null, 4);\n        const blob = new Blob([json], { type: 'octet/stream' });\n        const url = window.URL.createObjectURL(blob);\n        downloadBlob(url, 'cardset.json');\n    };\n\n    handleExportCsv = () => {\n        const { cardsAllIds, cardsById, fields, fieldsAllIds } = this.props;\n\n        const preparedFields = this.prepareImagePaths(fields);\n\n        const csvData: (string | number)[][] = [];\n        const header = ['card_id', 'card_count'];\n        const usedNames: { [key: string]: boolean } = {};\n        for (const plId of fieldsAllIds) {\n            const fieldInfo = fields[cardsAllIds[0]][plId];\n            const name = fieldInfo.name || fieldInfo.id;\n            if (!(name in usedNames)) {\n                header.push(name);\n                if (fieldInfo.type === 'image') {\n                    header.push(`${name}_global`);\n                }\n                usedNames[name] = false;\n            }\n        }\n        csvData.push(header);\n\n        for (const cardId of cardsAllIds) {\n            const card = cardsById[cardId];\n\n            const dataRow: (string | number)[] = [cardId, card.count];\n\n            const written = { ...usedNames };\n            for (const fieldId of fieldsAllIds) {\n                const fieldIndo = fields[cardId][fieldId];\n                const name = fieldIndo.name || fieldIndo.id;\n\n                if (!written[name]) {\n                    const fieldInfo = preparedFields[cardId][fieldId];\n                    if (fieldInfo.type === 'text') {\n                        dataRow.push(fieldInfo.value);\n                    } else if (fieldInfo.type === 'image') {\n                        dataRow.push(fieldInfo.url || '');\n                        dataRow.push(fieldInfo.global ? 'y' : 'n');\n                    }\n                    written[name] = true;\n                }\n            }\n            csvData.push(dataRow);\n        }\n\n        const csv = Papa.unparse(csvData);\n        const blob = new Blob([csv], { type: 'octet/stream' });\n        const url = window.URL.createObjectURL(blob);\n        downloadBlob(url, 'cardset.csv');\n    };\n\n    handleProcess = (fieldName: string, file: File, metadata: { [propName: string]: string }, load: FPLoadCallback) => {\n        const { dispatch, activeGame, fields, fieldsAllIds, cardsById, cardsAllIds } = this.props;\n        if (activeGame === null) return;\n\n        const reader = new FileReader();\n        reader.readAsText(file, 'UTF-8');\n        reader.onload = function (e) {\n            if (e.target === null) return;\n\n            let data = null;\n            const ending = '_' + md5(activeGame);\n\n            if (file.type === 'application/json') {\n                // eslint-disable-next-line\n                data = JSON.parse((e.target as any).result);\n\n                for (const cardId in data.fields) {\n                    const cardFields: FieldInfoCollection = data.fields[cardId];\n                    for (const fieldId in cardFields) {\n                        const fieldInfo = cardFields[fieldId];\n                        if (fieldInfo.type === 'image') {\n                            const isGlobal = fieldInfo.global || false;\n\n                            fieldInfo.url = `/api/imagefiles/${fieldInfo.url}${isGlobal ? '' : ending}`;\n                            delete fieldInfo.global;\n                        }\n                    }\n                }\n            } else if (file.type === 'text/csv') {\n                // eslint-disable-next-line\n                const csvData = Papa.parse((e.target as any).result, { header: true });\n\n                const newCardsAllIds: IdsArray = [];\n                const newCardsById: CardsCollection = {};\n                const newFields: FieldInfoByCardCollection = {};\n\n                for (const rowParsed of csvData.data) {\n                    const row = rowParsed as Record<string, string>;\n                    if (Object.keys(row).length === 0) {\n                        continue;\n                    }\n                    const card: CardType = {\n                        id: row['card_id'] || shortid.generate(),\n                        count: parseInt(row['card_count'], 10) || 1,\n                    };\n\n                    newFields[card.id] = {\n                        ...fields[card.id in cardsById ? card.id : cardsAllIds[0]],\n                    };\n\n                    newCardsAllIds.push(card.id);\n                    newCardsById[card.id] = card;\n\n                    for (const fieldId of fieldsAllIds) {\n                        const fieldInfo = newFields[card.id][fieldId];\n                        const name = fieldInfo.name || fieldInfo.id;\n\n                        if (row[name]) {\n                            if (fieldInfo.type === 'image') {\n                                const isGlobal = row[`${name}_global`] === 'y';\n                                const url = row[name];\n\n                                newFields[card.id][fieldId] = {\n                                    ...fieldInfo,\n                                    url: `/api/imagefiles/${url}${isGlobal ? '' : ending}`,\n                                };\n                            } else if (fieldInfo.type === 'text') {\n                                newFields[card.id][fieldId] = {\n                                    ...fieldInfo,\n                                    value: row[name],\n                                };\n                            }\n                        }\n                    }\n                }\n\n                data = {\n                    cardsAllIds: newCardsAllIds,\n                    cardsById: newCardsById,\n                    fields: newFields,\n                    activeCardId: undefined,\n                    activeFieldId: undefined,\n                };\n            }\n\n            if (data !== null) {\n                dispatch(cardSetImportData(data));\n            }\n        };\n        reader.onerror = function () {\n            dispatch(messageDisplay('error', 'Problem during import.'));\n        };\n\n        load(file.name);\n    };\n\n    handleRevert = (uniqueFileId: string, load: FPRevertLoadCallback) => {\n        load();\n    };\n\n    render() {\n        const { visible } = this.props;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'grid' : 'none' }}>\n                <div>\n                    Here you can export and import your card set data. JSON file contains templates of cards, text and\n                    image data by card, CSV file contains only text and image data by card.\n                </div>\n                <button onClick={this.handleExportJson}>\n                    <i className=\"material-icons\">cloud_download</i> Get JSON\n                </button>\n                <button onClick={this.handleExportCsv}>\n                    <i className=\"material-icons\">cloud_download</i> Get CSV\n                </button>\n\n                <div>Drag & Drop or browser for JSON or CSV file here:</div>\n\n                <FilePond\n                    server={{\n                        process: this.handleProcess,\n                        revert: this.handleRevert,\n                    }}\n                    acceptedFileTypes={['text/csv', 'application/json']}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activeGame: state.games.active,\n        width: state.cardset.present.width,\n        height: state.cardset.present.height,\n        isTwoSided: state.cardset.present.isTwoSided,\n        cardsAllIds: state.cardset.present.cardsAllIds,\n        cardsById: state.cardset.present.cardsById,\n        fieldsAllIds: state.cardset.present.fieldsAllIds,\n        fields: state.cardset.present.fields,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarImportExport);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, IdsArray, SidebarOwnProps, FieldInfo, FieldInfoByCardCollection } from '../types';\nimport { State } from '../reducers';\nimport {\n    cardSetActiveCardAndField,\n    cardSetChangeActiveFieldName,\n    cardSetChangeFieldAngle,\n    cardSetChangeFieldSize,\n    cardSetLockActiveField,\n    cardSetChangeFieldPosition,\n    cardSetLowerActiveField,\n    cardSetLowerActiveFieldToBottom,\n    cardSetRaiseActiveField,\n    cardSetRaiseActiveFieldToTop,\n    cardSetUnlockActiveField,\n    cardSetChangeUnclickableForActiveField,\n} from '../actions';\nimport style from './SidebarMeasurements.module.css';\nimport shortid from 'shortid';\n\ninterface StateProps {\n    activeField?: FieldInfo;\n    activeCardId?: string;\n    fields: FieldInfoByCardCollection;\n    fieldsAllIds: IdsArray;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarMeasurements extends Component<Props> {\n    handlePrevField = () => {\n        const { activeCardId, activeField, fieldsAllIds, dispatch } = this.props;\n        if (fieldsAllIds.length === 0 || activeCardId === null) return;\n\n        let prevField = fieldsAllIds[fieldsAllIds.length - 1];\n        if (activeField !== undefined) {\n            let idx = fieldsAllIds.indexOf(activeField.id);\n            if (idx > 0) prevField = fieldsAllIds[idx - 1];\n        }\n\n        dispatch(cardSetActiveCardAndField(activeCardId, (activeField && activeField.isOnBack) || false, prevField));\n    };\n\n    handleNextField = () => {\n        const { activeCardId, activeField, fieldsAllIds, dispatch } = this.props;\n        if (fieldsAllIds.length === 0 || activeCardId === null) return;\n\n        let nextField = fieldsAllIds[0];\n        if (activeField !== undefined) {\n            let idx = fieldsAllIds.indexOf(activeField.id);\n            if (idx !== -1 && idx !== fieldsAllIds.length - 1) nextField = fieldsAllIds[idx + 1];\n        }\n\n        dispatch(cardSetActiveCardAndField(activeCardId, (activeField && activeField.isOnBack) || false, nextField));\n    };\n\n    handleRaise = (event: React.MouseEvent) => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetRaiseActiveFieldToTop());\n            } else {\n                dispatch(cardSetRaiseActiveField());\n            }\n        }\n    };\n\n    handleLower = (event: React.MouseEvent) => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetLowerActiveFieldToBottom());\n            } else {\n                dispatch(cardSetLowerActiveField());\n            }\n        }\n    };\n\n    handleLockField = () => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetLockActiveField());\n        }\n    };\n\n    handleUnlockField = () => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetUnlockActiveField());\n        }\n    };\n\n    handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const name = event.target.value.trim();\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeActiveFieldName(name));\n        }\n    };\n\n    handleWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const width = parseFloat(event.target.value);\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeFieldSize(undefined, activeField.id, width, activeField.height, shortid.generate()));\n        }\n    };\n\n    handleHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const height = parseFloat(event.target.value);\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeFieldSize(undefined, activeField.id, activeField.width, height, shortid.generate()));\n        }\n    };\n\n    handleXChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const x = parseFloat(event.target.value);\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeFieldPosition(undefined, activeField.id, x, activeField.y, shortid.generate()));\n        }\n    };\n\n    handleYChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const y = parseFloat(event.target.value);\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeFieldPosition(undefined, activeField.id, activeField.x, y, shortid.generate()));\n        }\n    };\n\n    handleAngleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const angle = (parseFloat(event.target.value) * Math.PI) / 180;\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeFieldAngle(undefined, activeField.id, angle, shortid.generate()));\n        }\n    };\n\n    handleChangeUnclickable = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeUnclickableForActiveField(event.target.checked));\n        }\n    };\n\n    render() {\n        const { activeCardId, activeField, visible } = this.props;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'initial' : 'none' }}>\n                {activeCardId !== undefined && (\n                    <>\n                        <button onClick={this.handlePrevField} title=\"Previous field\">\n                            <i className=\"material-icons\">arrow_back</i>\n                        </button>\n                        <button onClick={this.handleNextField} title=\"Next field\">\n                            <i className=\"material-icons\">arrow_forward</i>\n                        </button>\n                    </>\n                )}\n\n                {activeField !== undefined && (\n                    <>\n                        <button onClick={this.handleRaise} title=\"Raise text (with Ctrl - raise to top)\">\n                            <i className=\"material-icons\">arrow_upward</i>\n                        </button>\n                        <button onClick={this.handleLower} title=\"Lower text (with Ctrl - lower to bottom)\">\n                            <i className=\"material-icons\">arrow_downward</i>\n                        </button>\n                    </>\n                )}\n\n                {activeField !== undefined && !activeField.locked && (\n                    <button\n                        onClick={this.handleLockField}\n                        title=\"Lock field. Locked field can't be dragged, rotated, resized and removed.\"\n                    >\n                        <i className=\"material-icons\">lock_open</i>\n                    </button>\n                )}\n\n                {activeField !== undefined && activeField.locked && (\n                    <button\n                        onClick={this.handleUnlockField}\n                        title=\"Unlock field. Unlocked field can be dragged, rotated, resized and removed.\"\n                    >\n                        <i className=\"material-icons\">lock</i>\n                    </button>\n                )}\n\n                {activeField !== undefined && (\n                    <div>\n                        <label>\n                            Unclickable field:{' '}\n                            <input\n                                type=\"checkbox\"\n                                onChange={this.handleChangeUnclickable}\n                                className=\"form-control\"\n                                checked={activeField.unclickable ? true : false}\n                            />\n                        </label>\n                    </div>\n                )}\n\n                {activeField !== undefined && (\n                    <div>\n                        <label>\n                            Field name:\n                            <input\n                                type=\"text\"\n                                value={activeField.name || ''}\n                                placeholder={activeField.id}\n                                onChange={this.handleNameChange}\n                                title=\"Change name of field.\"\n                            />\n                        </label>\n\n                        <label>\n                            Width:\n                            <input\n                                type=\"number\"\n                                step=\"any\"\n                                value={activeField.width}\n                                placeholder=\"Width\"\n                                onChange={this.handleWidthChange}\n                                title=\"Change width of field.\"\n                            />\n                        </label>\n\n                        <label>\n                            Height:\n                            <input\n                                type=\"number\"\n                                step=\"any\"\n                                value={activeField.height}\n                                placeholder=\"Height\"\n                                onChange={this.handleHeightChange}\n                                title=\"Change width of field.\"\n                            />\n                        </label>\n\n                        <label>\n                            X:\n                            <input\n                                type=\"number\"\n                                step=\"any\"\n                                value={activeField.x}\n                                placeholder=\"Width\"\n                                onChange={this.handleXChange}\n                                title=\"Change x coordinate of field.\"\n                            />\n                        </label>\n\n                        <label>\n                            Y:\n                            <input\n                                type=\"number\"\n                                step=\"any\"\n                                value={activeField.y}\n                                placeholder=\"Height\"\n                                onChange={this.handleYChange}\n                                title=\"Change y coordinate of field.\"\n                            />\n                        </label>\n\n                        <label>\n                            Angle:\n                            <input\n                                type=\"number\"\n                                step=\"any\"\n                                value={(activeField.angle * 180) / Math.PI}\n                                placeholder=\"Angle\"\n                                onChange={this.handleAngleChange}\n                                title=\"Change rotation angle of field.\"\n                            />\n                        </label>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    const activeField =\n        state.cardset.present.activeCardId !== undefined && state.cardset.present.activeFieldId !== undefined\n            ? state.cardset.present.fields[state.cardset.present.activeCardId][state.cardset.present.activeFieldId]\n            : undefined;\n\n    return {\n        activeField,\n        activeCardId: state.cardset.present.activeCardId,\n        fields: state.cardset.present.fields,\n        fieldsAllIds: state.cardset.present.fieldsAllIds,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarMeasurements);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, SidebarOwnProps } from '../types';\nimport { State } from '../reducers';\nimport {\n    cardSetChangeHeight,\n    cardSetChangeIsTwoSided,\n    cardSetChangeSnappingDistance,\n    cardSetChangeWidth,\n    cardSetSetZoom,\n} from '../actions';\nimport style from './SidebarSettings.module.css';\n\ninterface StateProps {\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    snappingDistance: number;\n    zoom: number;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\ninterface LocalState {\n    maintainAspectRatio: boolean;\n    resizeContent: boolean;\n}\n\nexport class SidebarSettings extends Component<Props, LocalState> {\n    state: LocalState = {\n        maintainAspectRatio: true,\n        resizeContent: false,\n    };\n\n    handleWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { maintainAspectRatio, resizeContent } = this.state;\n        dispatch(cardSetChangeWidth(parseFloat(event.target.value), maintainAspectRatio, resizeContent));\n    };\n\n    handleHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { maintainAspectRatio, resizeContent } = this.state;\n        dispatch(cardSetChangeHeight(parseFloat(event.target.value), maintainAspectRatio, resizeContent));\n    };\n\n    handleIsTwoSidedChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetChangeIsTwoSided(event.target.checked));\n    };\n\n    handleZoom = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetSetZoom(parseFloat(event.target.value)));\n    };\n\n    handleSnappingDistance = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetChangeSnappingDistance(parseFloat(event.target.value)));\n    };\n\n    render() {\n        const { width, height, isTwoSided, snappingDistance, visible, zoom } = this.props;\n        const { maintainAspectRatio, resizeContent } = this.state;\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'initial' : 'none' }}>\n                <label htmlFor=\"card_width\">Card width (mm):</label>\n                <input\n                    id=\"card_width\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.1\"\n                    onChange={this.handleWidthChange}\n                    className=\"form-control\"\n                    placeholder=\"width\"\n                    value={width}\n                />\n                <label htmlFor=\"card_height\">Card height (mm):</label>\n                <input\n                    id=\"card_height\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.1\"\n                    onChange={this.handleHeightChange}\n                    className=\"form-control\"\n                    placeholder=\"height\"\n                    value={height}\n                />\n                <div>\n                    <label>\n                        Maintain aspect ratio:{' '}\n                        <input\n                            type=\"checkbox\"\n                            onChange={() => {\n                                this.setState({ maintainAspectRatio: !maintainAspectRatio });\n                            }}\n                            className=\"form-control\"\n                            checked={maintainAspectRatio}\n                        />\n                    </label>\n                </div>\n\n                <div>\n                    <label>\n                        Resize content:{' '}\n                        <input\n                            type=\"checkbox\"\n                            onChange={() => {\n                                this.setState({ resizeContent: !resizeContent });\n                            }}\n                            className=\"form-control\"\n                            checked={resizeContent}\n                        />\n                    </label>\n                </div>\n\n                <label>\n                    Cards have two sides:{' '}\n                    <input\n                        type=\"checkbox\"\n                        onChange={this.handleIsTwoSidedChange}\n                        className=\"form-control\"\n                        checked={isTwoSided}\n                    />\n                </label>\n                <div>\n                    <label htmlFor=\"zoom\">Zoom (if you want to see details or big picture)</label>\n                    <input\n                        id=\"zoom\"\n                        type=\"number\"\n                        min=\"0.1\"\n                        step=\"0.1\"\n                        onChange={this.handleZoom}\n                        className=\"form-control\"\n                        placeholder=\"zoom\"\n                        value={zoom}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"zoom\">Snapping distance in mm. 0 to disable.</label>\n                    <input\n                        id=\"zoom\"\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.1\"\n                        onChange={this.handleSnappingDistance}\n                        className=\"form-control\"\n                        placeholder=\"Snapping distance\"\n                        value={snappingDistance}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        width: state.cardset.present.width,\n        height: state.cardset.present.height,\n        isTwoSided: state.cardset.present.isTwoSided,\n        snappingDistance: state.cardset.present.snappingDistance,\n        zoom: state.cardset.present.zoom,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarSettings);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport Select, { components, ValueType } from 'react-select';\nimport WebFont from 'webfontloader';\n\nimport { DEFAULT_LINE_HEIGHT } from '../constants';\nimport {\n    Dispatch,\n    cardSetChangeActiveTextFieldFontFamilyAndVariant,\n    cardSetChangeActiveTextFieldFontSize,\n    cardSetChangeActiveTextFieldFontVariant,\n    cardSetChangeActiveTextFieldLineHeight,\n} from '../actions';\nimport { State } from '../reducers';\nimport style from './FontSelector.module.css';\nimport webfonts from './webfonts.json';\nimport webfontsThumbs from './webfonts_thumbs.json';\nimport { OptionProps } from 'react-select';\n\ninterface WebFontsInfo {\n    [propName: string]: {\n        [propName: string]: string;\n    };\n}\n\ninterface FontOption {\n    value: string;\n    label: string;\n}\n\nconst FontOptionComponent = (props: OptionProps<FontOption>) => {\n    const value = (props.data as FontOption).value;\n    return !props.isDisabled && value ? (\n        <components.Option {...props}>\n            <img src={`data:image/png;base64, ${(webfontsThumbs as Record<string, string>)[value]}`} alt={value} />\n        </components.Option>\n    ) : null;\n};\n\nconst options: FontOption[] = Object.keys(webfonts)\n    .sort()\n    .map(fi => ({ value: fi, label: fi }));\n\ninterface StateProps {\n    activeFont: string;\n    activeFontVariant: string;\n    activeFontSize: number;\n    activeLineHeight: number;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass FontSelector extends Component<Props> {\n    getFontStringForLoad = (family: string, variant: string) => {\n        let stringForLoad = family;\n        if (variant !== 'regular') {\n            stringForLoad += ':' + variant;\n        }\n        return stringForLoad;\n    };\n\n    handleChange = (value: ValueType<FontOption>) => {\n        if (!value) return;\n\n        const fontFamily = (value as FontOption).value;\n\n        let fontVariant = this.props.activeFontVariant;\n        const wf: WebFontsInfo = webfonts;\n        if (!(fontVariant in wf[fontFamily])) {\n            fontVariant = Object.keys(wf[fontFamily]).sort()[0];\n        }\n\n        WebFont.load({\n            google: {\n                families: [this.getFontStringForLoad(fontFamily, fontVariant)],\n            },\n            active: () => {\n                const { dispatch } = this.props;\n                dispatch(cardSetChangeActiveTextFieldFontFamilyAndVariant(fontFamily, fontVariant));\n            },\n        });\n    };\n\n    handleFontVariantChange = (selectedOption: ValueType<FontOption>) => {\n        if (!selectedOption) return;\n\n        const value = (selectedOption as FontOption).value;\n        WebFont.load({\n            google: {\n                families: [this.getFontStringForLoad(this.props.activeFont, value)],\n            },\n            active: () => {\n                const { dispatch } = this.props;\n                dispatch(cardSetChangeActiveTextFieldFontVariant(value));\n            },\n        });\n    };\n\n    handleFontSizeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetChangeActiveTextFieldFontSize(parseFloat(event.target.value)));\n    };\n\n    handleLineHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetChangeActiveTextFieldLineHeight(parseFloat(event.target.value)));\n    };\n\n    render() {\n        const selectedFontFamily = options.find(f => f.value === this.props.activeFont);\n\n        const fontVariantOptions: FontOption[] = Object.keys((webfonts as WebFontsInfo)[this.props.activeFont])\n            .sort()\n            .map(fv => ({ value: fv, label: fv }));\n\n        const selectedFontVariant = fontVariantOptions.find(f => f.value === this.props.activeFontVariant);\n\n        return (\n            <>\n                <input\n                    type=\"number\"\n                    value={this.props.activeFontSize}\n                    onChange={this.handleFontSizeChange}\n                    title=\"Font size\"\n                />\n                <Select\n                    className={style.fontFamily}\n                    value={selectedFontFamily}\n                    onChange={this.handleChange}\n                    options={options}\n                    components={{\n                        Option: FontOptionComponent,\n                    }}\n                />\n                <Select\n                    className={style.fontVariant}\n                    value={selectedFontVariant}\n                    onChange={this.handleFontVariantChange}\n                    options={fontVariantOptions}\n                />\n                <input\n                    type=\"number\"\n                    value={this.props.activeLineHeight}\n                    onChange={this.handleLineHeightChange}\n                    title=\"Line height\"\n                    step=\"0.01\"\n                />\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    const activeFont = state.cardset.present.textSettings.fontFamily;\n    const activeFontVariant = state.cardset.present.textSettings.fontVariant;\n    const activeFontSize = state.cardset.present.textSettings.fontSize;\n    const activeLineHeight = state.cardset.present.textSettings.lineHeight || DEFAULT_LINE_HEIGHT;\n\n    return {\n        activeFont,\n        activeFontVariant,\n        activeFontSize,\n        activeLineHeight,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, {}, State>(mapStateToProps)(FontSelector);\n","import { ColorResult } from 'react-color';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, SidebarOwnProps, FieldInfo } from '../types';\nimport { State } from '../reducers';\nimport {\n    cardSetAddTextField,\n    cardSetChangeActiveFieldName,\n    cardSetChangeActiveTextFieldAlign,\n    cardSetLockActiveField,\n    cardSetLowerActiveFieldToBottom,\n    cardSetRaiseActiveFieldToTop,\n    cardSetRemoveActiveField,\n    cardSetUnlockActiveField,\n    cardSetChangeActiveTextFieldColor,\n    cardSetRaiseActiveField,\n    cardSetLowerActiveField,\n} from '../actions';\nimport ColorButton from './ColorButton';\nimport FontSelector from './FontSelector';\nimport style from './SidebarText.module.css';\n\ninterface StateProps {\n    activeField?: FieldInfo;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarText extends Component<Props> {\n    handleAddTextClick = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetAddTextField());\n    };\n\n    handleSetTextAlignLeft = () => {\n        const selection = window.getSelection();\n        if (!selection) return;\n        const range = selection.getRangeAt(0);\n        if (selection.rangeCount === 1 && range.collapsed) {\n            const { dispatch } = this.props;\n            dispatch(cardSetChangeActiveTextFieldAlign('left'));\n        } else {\n            document.execCommand('justifyleft');\n        }\n    };\n\n    handleSetTextAlignCenter = () => {\n        const selection = window.getSelection();\n        if (!selection) return;\n        const range = selection.getRangeAt(0);\n        if (selection.rangeCount === 1 && range.collapsed) {\n            const { dispatch } = this.props;\n            dispatch(cardSetChangeActiveTextFieldAlign('center'));\n        } else {\n            document.execCommand('justifycenter');\n        }\n    };\n\n    handleSetTextAlignRight = () => {\n        const selection = window.getSelection();\n        if (!selection) return;\n        const range = selection.getRangeAt(0);\n        if (selection.rangeCount === 1 && range.collapsed) {\n            const { dispatch } = this.props;\n            dispatch(cardSetChangeActiveTextFieldAlign('right'));\n        } else {\n            document.execCommand('justifyright');\n        }\n    };\n\n    handleSetTextBold = () => {\n        document.execCommand('bold');\n    };\n\n    handleSetTextItalic = () => {\n        document.execCommand('italic');\n    };\n\n    handleRemoveClick = () => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetRemoveActiveField());\n        }\n    };\n\n    handleRaise = (event: React.MouseEvent) => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetRaiseActiveFieldToTop());\n            } else {\n                dispatch(cardSetRaiseActiveField());\n            }\n        }\n    };\n\n    handleLower = (event: React.MouseEvent) => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            if (event.ctrlKey) {\n                dispatch(cardSetLowerActiveFieldToBottom());\n            } else {\n                dispatch(cardSetLowerActiveField());\n            }\n        }\n    };\n\n    handleLockField = () => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetLockActiveField());\n        }\n    };\n\n    handleUnlockField = () => {\n        const { activeField, dispatch } = this.props;\n        if (activeField !== undefined) {\n            dispatch(cardSetUnlockActiveField());\n        }\n    };\n\n    handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { activeField, dispatch } = this.props;\n        const name = event.target.value.trim();\n        if (activeField !== undefined) {\n            dispatch(cardSetChangeActiveFieldName(name));\n        }\n    };\n\n    handleColorChange = (color: ColorResult) => {\n        const selection = window.getSelection();\n        if (!selection) return;\n        const range = selection.getRangeAt(0);\n        if (selection.rangeCount === 1 && range.collapsed) {\n            const { dispatch } = this.props;\n            dispatch(cardSetChangeActiveTextFieldColor(color.hex));\n        } else {\n            document.execCommand('forecolor', false, color.hex);\n        }\n    };\n\n    render() {\n        const { activeField, visible } = this.props;\n\n        let color = '#000000';\n        if (activeField && activeField.type === 'text' && activeField.color) {\n            color = activeField.color;\n        }\n\n        return (\n            <div className={style.view} style={{ display: visible ? 'initial' : 'none' }}>\n                <button onClick={this.handleAddTextClick} title=\"Add text field\">\n                    <i className=\"material-icons\">text_fields</i>\n                </button>\n                {activeField !== undefined && (\n                    <>\n                        <button onClick={this.handleRaise} title=\"Raise text (with Ctrl - raise to top)\">\n                            <i className=\"material-icons\">arrow_upward</i>\n                        </button>\n                        <button onClick={this.handleLower} title=\"Lower text (with Ctrl - lower to bottom)\">\n                            <i className=\"material-icons\">arrow_downward</i>\n                        </button>\n                    </>\n                )}\n\n                {activeField !== undefined && !activeField.locked && (\n                    <button\n                        onClick={this.handleLockField}\n                        title=\"Lock text field. Locked field can't be dragged, rotated, resized and removed.\"\n                    >\n                        <i className=\"material-icons\">lock_open</i>\n                    </button>\n                )}\n\n                {activeField !== undefined && activeField.locked && (\n                    <button\n                        onClick={this.handleUnlockField}\n                        title=\"Unlock text field. Unlocked text field can be dragged, rotated, resized and removed.\"\n                    >\n                        <i className=\"material-icons\">lock</i>\n                    </button>\n                )}\n\n                <button\n                    className={activeField === undefined || activeField.locked ? style.disabled : ''}\n                    onClick={this.handleRemoveClick}\n                    title=\"Remove field\"\n                >\n                    <i className=\"material-icons\">remove</i>\n                </button>\n\n                {activeField !== undefined && (\n                    <input\n                        type=\"text\"\n                        value={activeField.name || ''}\n                        placeholder={activeField.id}\n                        onChange={this.handleNameChange}\n                        title=\"Change name of text field.\"\n                    />\n                )}\n\n                <div>\n                    <button onClick={this.handleSetTextAlignLeft} title=\"Align text left\">\n                        <i className=\"material-icons\">format_align_left</i>\n                    </button>\n                    <button onClick={this.handleSetTextAlignCenter} title=\"Align text center\">\n                        <i className=\"material-icons\">format_align_center</i>\n                    </button>\n                    <button onClick={this.handleSetTextAlignRight} title=\"Align text right\">\n                        <i className=\"material-icons\">format_align_right</i>\n                    </button>\n                    <button onClick={this.handleSetTextBold} title=\"Makes selected text bold\">\n                        <i className=\"material-icons\">format_bold</i>\n                    </button>\n                    <button onClick={this.handleSetTextItalic} title=\"Makes selected text italic\">\n                        <i className=\"material-icons\">format_italic</i>\n                    </button>\n                    <ColorButton color={color} onChange={this.handleColorChange} />\n                    <FontSelector />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    const activeField =\n        state.cardset.present.activeCardId !== undefined && state.cardset.present.activeFieldId !== undefined\n            ? state.cardset.present.fields[state.cardset.present.activeCardId][state.cardset.present.activeFieldId]\n            : undefined;\n\n    return {\n        activeField,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarText);\n","import 'filepond/dist/filepond.min.css';\n\nimport './SidebarUpload.css';\n\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport { connect } from 'react-redux';\nimport FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { DispatchProps, SidebarOwnProps } from '../types';\nimport {\n    FPAbortCallback,\n    FPErrorCallback,\n    FPLoadCallback,\n    FPProgressCallback,\n    FPRevertLoadCallback,\n    cardSetDeleteImage,\n    cardSetUploadImage,\n} from '../actions';\nimport { State } from '../reducers';\nimport style from './SidebarUpload.module.css';\n\nregisterPlugin(FilePondPluginFileValidateSize);\nregisterPlugin(FilePondPluginFileValidateType);\n\ninterface StateProps {\n    activeGame: string | null;\n}\n\ntype Props = StateProps & DispatchProps & SidebarOwnProps;\n\nexport class SidebarUpload extends Component<Props> {\n    handleProcess = (\n        fieldName: string,\n        file: File,\n        metadata: { [propName: string]: string },\n        load: FPLoadCallback,\n        error: FPErrorCallback,\n        progress: FPProgressCallback,\n        abort: FPAbortCallback,\n    ) => {\n        const { dispatch, activeGame } = this.props;\n\n        if (activeGame === null) {\n            abort();\n            return;\n        }\n\n        let source = axios.CancelToken.source();\n\n        dispatch(cardSetUploadImage(activeGame, file, load, error, progress, abort, source.token));\n\n        return { abort: source.cancel };\n    };\n\n    handleRevert = (uniqueFileId: string, load: FPRevertLoadCallback, error: FPErrorCallback) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetDeleteImage(uniqueFileId, load, error));\n    };\n\n    render() {\n        const { visible } = this.props;\n\n        return (\n            <div\n                className={style.view}\n                style={{ display: 'grid', visibility: visible ? 'visible' : 'hidden', height: visible ? 'auto' : 0 }}\n            >\n                <div>\n                    Uploaded imaged are kept for limited time. If they are deleted then simply re-upload them again.\n                </div>\n                <FilePond\n                    allowMultiple={true}\n                    server={{\n                        process: this.handleProcess,\n                        revert: this.handleRevert,\n                    }}\n                    acceptedFileTypes={[\n                        'image/png',\n                        'image/jpeg',\n                        'image/svg+xml',\n                        'image/webp',\n                        'image/tiff',\n                        'image/gif',\n                    ]}\n                    allowFileSizeValidation={true}\n                    maxFileSize=\"500KB\"\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activeGame: state.games.active,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, SidebarOwnProps, State>(mapStateToProps)(SidebarUpload);\n","import { connect, ConnectedComponent } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { DispatchProps, SidebarOwnProps } from '../types';\nimport { SidebarState, cardSetSetSidebarState } from '../actions';\nimport { State } from '../reducers';\nimport SidebarDetails from './SidebarDetails';\nimport SidebarGeneratePng from './SidebarGeneratePng';\nimport SidebarGeneratePdf from './SidebarGeneratePdf';\nimport SidebarImage from './SidebarImage';\nimport SidebarImportExport from './SidebarImportExport';\nimport SidebarMeasurements from './SidebarMeasurements';\nimport SidebarSettings from './SidebarSettings';\nimport SidebarText from './SidebarText';\nimport SidebarUpload from './SidebarUpload';\nimport style from './Sidebar.module.css';\n\ninterface StateProps {\n    activeSidebar: SidebarState | null;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface SidebarInfo {\n    state: SidebarState;\n    title: string;\n    icon: string;\n    component: ConnectedComponent<typeof Component, SidebarOwnProps>;\n}\n\nconst SIDEBARS: SidebarInfo[] = [\n    {\n        state: SidebarState.Settings,\n        title: 'Settings',\n        icon: 'settings',\n        component: SidebarSettings,\n    },\n    {\n        state: SidebarState.Details,\n        title: 'Details',\n        icon: 'details',\n        component: SidebarDetails,\n    },\n    {\n        state: SidebarState.Measurements,\n        title: 'Measurements',\n        icon: 'format_shapes',\n        component: SidebarMeasurements,\n    },\n    {\n        state: SidebarState.Image,\n        title: 'Images',\n        icon: 'photo',\n        component: SidebarImage,\n    },\n    {\n        state: SidebarState.Text,\n        title: 'Texts',\n        icon: 'text_fields',\n        component: SidebarText,\n    },\n    {\n        state: SidebarState.Upload,\n        title: 'Upload',\n        icon: 'cloud_upload',\n        component: SidebarUpload,\n    },\n    {\n        state: SidebarState.ImportExport,\n        title: 'Import/Export',\n        icon: 'import_export',\n        component: SidebarImportExport,\n    },\n    {\n        state: SidebarState.Png,\n        title: 'Generate as PNG',\n        icon: 'photo_library',\n        component: SidebarGeneratePng,\n    },\n    {\n        state: SidebarState.Pdf,\n        title: 'Generate as PDF',\n        icon: 'picture_as_pdf',\n        component: SidebarGeneratePdf,\n    },\n];\n\nexport class Sidebar extends Component<Props> {\n    handleSidebar = (state: SidebarState) => {\n        const { activeSidebar, dispatch } = this.props;\n        if (activeSidebar === state) {\n            dispatch(cardSetSetSidebarState(null));\n        } else {\n            dispatch(cardSetSetSidebarState(state));\n        }\n    };\n\n    render() {\n        const { activeSidebar } = this.props;\n        return (\n            <div className={style.sidebar}>\n                <div className={style.controls}>\n                    {SIDEBARS.map(sb => (\n                        <i\n                            key={sb.state}\n                            title={sb.title}\n                            className={`material-icons ${activeSidebar === sb.state ? style.active : ''}`}\n                            onClick={() => this.handleSidebar(sb.state)}\n                        >\n                            {sb.icon}\n                        </i>\n                    ))}\n                </div>\n                <div className={`${style.view} ${activeSidebar === null ? style.hidden : ''}`}>\n                    {SIDEBARS.map(sb => (\n                        <sb.component key={sb.state} visible={activeSidebar === sb.state} />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activeSidebar: state.cardset.present.activeSidebar,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, {}, State>(mapStateToProps)(Sidebar);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport shortid from 'shortid';\n\nimport { ACTIVITY_SELECTING, State } from '../reducers';\nimport { BLEED_WIDTH } from '../constants';\nimport { CardSetType, CardType, CardsCollection } from '../types';\nimport {\n    Dispatch,\n    cardSetActiveCardAndField,\n    cardSetCreateCard,\n    cardSetRenameRequest,\n    cardSetUndo,\n    cardSetRedo,\n} from '../actions';\nimport Card from './Card';\nimport EditableTitle from './EditableTitle';\nimport KawaiiMessage, { Character } from './KawaiiMessage';\nimport Loader from './Loader';\nimport Sidebar from './Sidebar';\nimport style from './CardSet.module.css';\n\ninterface StateProps {\n    width: number;\n    height: number;\n    isTwoSided: boolean;\n    isAuthenticated?: boolean;\n    cardsAllIds: string[];\n    cardsById: CardsCollection;\n    activity: number;\n    zoom: number;\n    activeCardSet: CardSetType | null;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface LocalState {\n    pageWidth: number;\n    pageHeight: number;\n    topBottomMargin: number;\n    leftRightMargin: number;\n}\n\nexport class CardSet extends Component<Props, LocalState> {\n    state = {\n        pageWidth: 210,\n        pageHeight: 297,\n        topBottomMargin: 15,\n        leftRightMargin: 9,\n    };\n\n    componentDidMount() {\n        window.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.keyDown);\n    }\n\n    keyDown = (event: KeyboardEvent) => {\n        const { dispatch } = this.props;\n\n        switch (event.key) {\n            case 'z':\n            case 'Z': {\n                if (event.ctrlKey && event.shiftKey) {\n                    dispatch(cardSetRedo());\n                } else if (event.ctrlKey) {\n                    dispatch(cardSetUndo());\n                }\n                break;\n            }\n            case 'y':\n            case 'Y': {\n                if (event.ctrlKey) {\n                    dispatch(cardSetRedo());\n                }\n                break;\n            }\n            // no default\n        }\n    };\n\n    handleCreateCardClick = () => {\n        const { dispatch } = this.props;\n\n        const newCard: CardType = { id: shortid.generate(), count: 1 };\n\n        dispatch(cardSetCreateCard(newCard));\n    };\n\n    handleClickOutsideOfCard = () => {\n        const { dispatch } = this.props;\n        dispatch(cardSetActiveCardAndField(undefined, false, undefined));\n    };\n\n    handleCardSetNameChange = (newName: string) => {\n        const { dispatch, activeCardSet } = this.props;\n        if (activeCardSet !== null) {\n            dispatch(cardSetRenameRequest(activeCardSet.id, newName));\n        }\n    };\n\n    render() {\n        const {\n            isAuthenticated,\n            cardsAllIds,\n            cardsById,\n            width,\n            height,\n            isTwoSided,\n            activity,\n            zoom,\n            activeCardSet,\n        } = this.props;\n\n        const widthWithBleeds = width + BLEED_WIDTH * 2;\n        const heightWithBleeds = height + BLEED_WIDTH * 2;\n\n        return (\n            isAuthenticated && (\n                <div>\n                    <KawaiiMessage character={Character.Ghost}>\n                        <p>Here you can design your cards.</p>\n                    </KawaiiMessage>\n\n                    {activeCardSet !== null && (\n                        <EditableTitle title={activeCardSet.name} onChange={this.handleCardSetNameChange} />\n                    )}\n\n                    <div className={style.cardsetview}>\n                        <div className={style.sidebar}>\n                            <Sidebar />\n                        </div>\n                        <div onMouseDown={this.handleClickOutsideOfCard} onTouchStart={this.handleClickOutsideOfCard}>\n                            {(activity & ACTIVITY_SELECTING) === ACTIVITY_SELECTING && <Loader />}\n                            <div className={style.cardset}>\n                                <ul\n                                    style={{\n                                        gridTemplateColumns: `repeat(auto-fill, minmax(${widthWithBleeds *\n                                            zoom}mm, 1fr))`,\n                                    }}\n                                >\n                                    {cardsAllIds &&\n                                        cardsAllIds.map(cardId => [\n                                            <li key={cardId}>\n                                                <Card card={cardsById[cardId]} isBack={false} />\n                                            </li>,\n                                            isTwoSided && (\n                                                <li key={`${cardId}back`}>\n                                                    <Card card={cardsById[cardId]} isBack={true} />\n                                                </li>\n                                            ),\n                                        ])}\n                                    <li key=\"newCard\">\n                                        <div\n                                            id=\"newCard\"\n                                            className={style.createCard}\n                                            style={{\n                                                width: `${widthWithBleeds * zoom}mm`,\n                                                height: `${heightWithBleeds * zoom}mm`,\n                                                position: 'relative',\n                                                overflow: 'hidden',\n                                            }}\n                                            onClick={this.handleCreateCardClick}\n                                        >\n                                            <div>\n                                                <i className=\"material-icons\">add</i>\n                                                <div>Add Card</div>\n                                            </div>\n                                        </div>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        );\n    }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n    return {\n        activity: state.cardset.present.activity,\n        width: state.cardset.present.width,\n        height: state.cardset.present.height,\n        isTwoSided: state.cardset.present.isTwoSided,\n        zoom: state.cardset.present.zoom,\n        isAuthenticated: state.auth.isAuthenticated,\n        cardsAllIds: state.cardset.present.cardsAllIds,\n        cardsById: state.cardset.present.cardsById,\n        activeCardSet:\n            state.cardsets.active && state.cardsets.byId[state.cardsets.active]\n                ? state.cardsets.byId[state.cardsets.active]\n                : null,\n    };\n};\n\nexport default connect<StateProps, DispatchProps, {}, State>(mapStateToProps)(CardSet);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { Dispatch, cardSetSelectRequest } from './actions';\nimport { State } from './reducers';\nimport CardSet from './components/CardSet';\n\ninterface Props {\n    dispatch: Dispatch;\n    match: { params: { id: string } };\n    isAuthenticated?: boolean;\n}\n\nexport class CardSetPage extends Component<Props> {\n    componentDidMount() {\n        const { dispatch, match } = this.props;\n        dispatch(cardSetSelectRequest(match.params.id));\n    }\n\n    render() {\n        const { isAuthenticated } = this.props;\n        if (isAuthenticated) {\n            return <CardSet />;\n        } else if (isAuthenticated === false) {\n            return <Redirect to=\"/login\" />;\n        } else {\n            return null;\n        }\n    }\n}\n\nconst mapStateToProps = (state: State) => ({ isAuthenticated: state.auth.isAuthenticated });\n\nexport default connect(mapStateToProps)(CardSetPage);\n","import React, { Component } from 'react';\n\nexport default class ChangelogPage extends Component {\n    render() {\n        return (\n            <div>\n                <p>Here you can find list of future plans and what was implemented recently.</p>\n                <h2>2019-09-28</h2>\n                <ul>\n                    <li>CSV import improved.</li>\n                </ul>\n                <h2>2019-09-10</h2>\n                <ul>\n                    <li>Bug fix release.</li>\n                </ul>\n                <h2>2019-07-01</h2>\n                <ul>\n                    <li>Bug fix release.</li>\n                </ul>\n                <h2>2019-06-28</h2>\n                <ul>\n                    <li>Show font name using itself in font selection dropdown.</li>\n                    <li>Bug fixes.</li>\n                </ul>\n                <h2>2019-06-23</h2>\n                <ul>\n                    <li>Security improved.</li>\n                    <li>Help page added.</li>\n                    <li>Option to rotate cards added.</li>\n                    <li>Possibility to get a list of game's attributions added.</li>\n                    <li>Undo/Redo exposed in UI (while I suggest using Ctrl+Z and Ctrl+Shift+Z/Ctrl+Y instead).</li>\n                </ul>\n                <h2>2019-06-22</h2>\n                <ul>\n                    <li>TIFF, WEBP and GIF support added.</li>\n                    <li>No need to keep upload sidebar open to upload images.</li>\n                </ul>\n                <h2>2019-06-20</h2>\n                <ul>\n                    <li>Bug fix release: PDF generation, import/export fixes.</li>\n                </ul>\n                <h2>2019-06-16</h2>\n                <ul>\n                    <li>Bug fix release.</li>\n                </ul>\n                <h2>2019-06-08</h2>\n                <ul>\n                    <li>\"Apply to all cards\" work on pan and zoom as well.</li>\n                    <li>UX on mobile devices (e.g. phones) improved.</li>\n                    <li>Other minor fixes.</li>\n                </ul>\n                <h2>2019-06-04</h2>\n                <ul>\n                    <li>Possibility to zoom in and pan imaged added.</li>\n                    <li>Undo/Redo using Ctrl+Z and Ctrl+Y (or Ctrl+Shift+Z).</li>\n                    <li>More small improvements and bug fixes.</li>\n                </ul>\n                <h2>2019-05-26</h2>\n                <ul>\n                    <li>Text rendering fixes.</li>\n                    <li>Card Sets and Games list are sorted alphabetically now.</li>\n                    <li>Image handling improvements.</li>\n                </ul>\n                <h2>2019-05-18</h2>\n                <ul>\n                    <li>PDF and PNG generation improvements.</li>\n                </ul>\n                <h2>2019-05-17</h2>\n                <ul>\n                    <li>\n                        PNG generation for card set or the whole game. This will benefit if you want to publish game via{' '}\n                        <a href=\"https://www.thegamecrafter.com/\">The Game Crafter</a>,{' '}\n                        <a href=\"makeplayingcards.com\">Make Playing Cards</a> or any other place.\n                    </li>\n                </ul>\n                <h2>2019-04-13</h2>\n                <ul>\n                    <li>Option to generate cutting marks on front side only.</li>\n                    <li>Guillotine cuttings marks on card edges.</li>\n                    <li>\n                        Field move limitation is removed because if drag field outside of view you can return it using\n                        custom positions and size controls.\n                    </li>\n                    <li>Drag and drop improvement.</li>\n                </ul>\n                <h2>2019-04-07</h2>\n                <ul>\n                    <li>Snapping implemented for move, rotation and resize operations.</li>\n                    <li>Image search changes and improvements.</li>\n                    <li>\n                        Drag&Drop support for images. Images can be dropped to text field as well but it is assumed that\n                        dropped images are square when generating PDF.\n                    </li>\n                    <li>Bold and Italic support in text added.</li>\n                    <li>Other minor fixes.</li>\n                </ul>\n                <h2>2019-03-22</h2>\n                <ul>\n                    <li>Two-sided cards.</li>\n                    <li>PDF generation for all the game.</li>\n                    <li>More PDF generation options added</li>\n                    <li>Change color of images (for SVG images only, e.g. try using with \"forms\" images).</li>\n                    <li>Game rename and delete</li>\n                    <li>Card Set rename and delete</li>\n                    <li>Text: line height support</li>\n                    <li>UI/UX improvements</li>\n                </ul>\n                <h2>2019-03-03</h2>\n                <ul>\n                    <li>Data import/export in JSON and CSV formats.</li>\n                    <li>\n                        Named fields. If multiple fields have the same name then by editing one you change value in all\n                        of them. As well named fields look better in data export/import.\n                    </li>\n                </ul>\n\n                <h2>2019-03-02</h2>\n                <ul>\n                    <li>You can upload your own images now. Images are limited.</li>\n                    <li>\n                        Image order support added. E.g.: now you can upload background image and lower it to the bottom.\n                    </li>\n                    <li>Progress indicators and user messages improvements.</li>\n                </ul>\n\n                <h2>2019-02-24</h2>\n                <ul>\n                    <li>Sidebar created for lighter, cleaner and faster UI.</li>\n                    <li>Zoom added to card set for more flexibility while viewing or editing.</li>\n                </ul>\n                <h2>2019-02-23</h2>\n                <ul>\n                    <li>Text rendering changed and should be working properly now.</li>\n                    <li>Crash with new card set fixed.</li>\n                    <li>Minor UI improvements.</li>\n                </ul>\n                <h2>2019-02-17</h2>\n                <p>Initial public version.</p>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport KawaiiMessage, { Character } from './components/KawaiiMessage';\nimport { reportError } from './utils';\n\nwindow.addEventListener('error', function(evt: ErrorEvent) {\n    const error = evt.error;\n    reportError(error);\n});\n\nwindow.addEventListener('unhandledrejection', function (event: PromiseRejectionEvent) {\n    reportError(new Error(event.reason));\n});\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface State {\n    hasError: boolean;\n}\n\nexport default class ErrorBoundary extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    componentDidCatch(error: Error | null) {\n        this.setState({ hasError: true });\n        if (error !== null) {\n            reportError(error);\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <KawaiiMessage character={Character.Browser} mood=\"ko\">\n                    Something unexpected has happened. Error report is sent to me by e-mail and I will review it as soon\n                    as possible. Still feel free to contact me by e-mail{' '}\n                    <a href=\"mailto:dalius@ffff.lt\">dalius@ffff.lt</a>.\n                </KawaiiMessage>\n            );\n        }\n        return this.props.children;\n    }\n}\n","import React, { Component } from 'react';\nimport style from './ConfirmedDelete.module.css';\n\ninterface Props {\n    question: string;\n    onDelete: () => void;\n}\n\nexport default class ConfirmedDelete extends Component<Props> {\n    state = {\n        deleteClicked: false,\n    };\n\n    handleRemove = () => {\n        this.setState({ deleteClicked: !this.state.deleteClicked });\n    };\n\n    handleYes = () => {\n        this.setState({ deleteClicked: false });\n        this.props.onDelete();\n    };\n\n    handleNo = () => {\n        this.setState({ deleteClicked: false });\n    };\n\n    render() {\n        const { deleteClicked } = this.state;\n        const { question } = this.props;\n\n        return (\n            <>\n                <i title=\"Remove\" className={`material-icons ${style.button}`} onClick={this.handleRemove}>\n                    remove_circle_outline\n                </i>{' '}\n                {deleteClicked && (\n                    <>\n                        {question}{' '}\n                        <span className={style.answer} onClick={this.handleYes}>\n                            Yes\n                        </span>{' '}\n                        /{' '}\n                        <span className={style.answer} onClick={this.handleNo}>\n                            No\n                        </span>\n                    </>\n                )}\n            </>\n        );\n    }\n}\n","import { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { CardSetsCollection, GameType, IdsArray } from '../types';\nimport {\n    Dispatch,\n    cardSetCreateRequest,\n    cardSetDeleteRequest,\n    gameRenameRequest,\n    messageDisplay,\n    gameCreatePngRequest,\n    gameGetAttributionsRequest,\n} from '../actions';\nimport { State, ACTIVITY_CREATING_PNG } from '../reducers';\nimport ConfirmedDelete from './ConfirmedDelete';\nimport EditableTitle from './EditableTitle';\nimport KawaiiMessage, { Character } from './KawaiiMessage';\nimport PDFGenerator from './PDFGenerator';\nimport style from './CardSets.module.css';\n\ninterface Props {\n    dispatch: Dispatch;\n    isAuthenticated?: boolean;\n    activeGame: GameType | null;\n    allIds: IdsArray;\n    byId: CardSetsCollection;\n    isCreatingPng: boolean;\n    attributions: string[];\n}\n\ninterface LocalState {\n    cardSetName: string;\n    width: number;\n    height: number;\n    dpi: number;\n}\n\nexport class CardSets extends Component<Props, LocalState> {\n    state: LocalState = {\n        cardSetName: '',\n        width: 63.5,\n        height: 88.9,\n        dpi: 300,\n    };\n\n    handleGameNameChange = (newName: string) => {\n        const { dispatch, activeGame } = this.props;\n        if (activeGame !== null) {\n            dispatch(gameRenameRequest(activeGame.id, newName));\n        }\n    };\n\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ cardSetName: event.target.value });\n    };\n\n    handleWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ width: parseFloat(event.target.value) });\n    };\n\n    handleHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ height: parseFloat(event.target.value) });\n    };\n\n    handleCreateCardSetClick = () => {\n        const { dispatch, activeGame } = this.props;\n\n        if (activeGame === null) {\n            return;\n        }\n\n        const cardSetName = this.state.cardSetName.trim();\n\n        if (cardSetName) {\n            dispatch(cardSetCreateRequest(cardSetName, this.state.width, this.state.height, activeGame.id));\n        } else {\n            dispatch(messageDisplay('error', 'Card Set name should be non empty.'));\n        }\n    };\n\n    handleCardSetDelete = (cardSetId: string) => {\n        const { dispatch } = this.props;\n        dispatch(cardSetDeleteRequest(cardSetId));\n    };\n\n    handleDpiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ dpi: parseInt(event.target.value) });\n    };\n\n    handleGenerate = () => {\n        const { dispatch, activeGame } = this.props;\n        const { dpi } = this.state;\n\n        if (activeGame !== null) {\n            dispatch(gameCreatePngRequest(dpi, 'games', activeGame.id));\n        }\n    };\n\n    handleGetAttributions = () => {\n        const { dispatch, activeGame } = this.props;\n\n        if (activeGame !== null) {\n            dispatch(gameGetAttributionsRequest());\n        }\n    };\n\n    render() {\n        const { isAuthenticated, activeGame, allIds, byId, isCreatingPng, attributions } = this.props;\n        const { dpi } = this.state;\n\n        let cardsets = allIds.map(cardsetId => byId[cardsetId]);\n        cardsets.sort((a, b) => (a.name < b.name ? -1 : 1));\n\n        const cardsetItems = cardsets.map(cardset => (\n            <li key={cardset.id}>\n                <Link to={`/cardset/${cardset.id}`}>{cardset.name}</Link>{' '}\n                <ConfirmedDelete\n                    question=\"Do you really want to delete this card set?\"\n                    onDelete={() => this.handleCardSetDelete(cardset.id)}\n                />\n            </li>\n        ));\n\n        return (\n            isAuthenticated &&\n            activeGame !== null && (\n                <div className={style.cardsets}>\n                    <KawaiiMessage character={Character.Ghost}>\n                        Each game is made from card sets. Card set is collection of cards that share the same properties\n                        but have different text and images.\n                    </KawaiiMessage>\n\n                    <EditableTitle title={activeGame.name} onChange={this.handleGameNameChange} />\n\n                    <ul>{cardsetItems}</ul>\n\n                    <div className=\"form\">\n                        <label htmlFor=\"cardset_name\">Card Set name:</label>\n                        <input\n                            id=\"cardset_name\"\n                            type=\"text\"\n                            onChange={this.handleChange}\n                            className=\"form-control\"\n                            placeholder=\"Card Set name\"\n                        />\n                        <label htmlFor=\"card_width\">Card width:</label>\n                        <input\n                            id=\"card_width\"\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"0.1\"\n                            onChange={this.handleWidthChange}\n                            className=\"form-control\"\n                            placeholder=\"Card width\"\n                            value={this.state.width}\n                        />\n                        <label htmlFor=\"card_height\">Card height:</label>\n                        <input\n                            id=\"card_height\"\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"0.1\"\n                            onChange={this.handleHeightChange}\n                            className=\"form-control\"\n                            placeholder=\"Card height\"\n                            value={this.state.height}\n                        />\n                        <button onClick={this.handleCreateCardSetClick}>Create Card Set</button>\n                    </div>\n\n                    <KawaiiMessage character={Character.Ghost} mood=\"excited\">\n                        Hint: Poker card size 63.5mm x 88.9mm. Bridge card size 57.15mm x 88.9mm. But you can have cards\n                        of any size.\n                    </KawaiiMessage>\n\n                    <PDFGenerator type=\"games\" id={activeGame.id} withHelp={true} />\n\n                    <div className=\"form\">\n                        Or you can generate PNG files for all the game:\n                        <label htmlFor=\"dpi\">DPI:</label>\n                        <input\n                            id=\"dpi\"\n                            type=\"number\"\n                            min=\"1\"\n                            step=\"1\"\n                            onChange={this.handleDpiChange}\n                            className=\"form-control\"\n                            placeholder=\"DPI\"\n                            value={dpi}\n                        />\n                        <button disabled={isCreatingPng} onClick={this.handleGenerate}>\n                            Generate PNG files\n                        </button>\n                    </div>\n\n                    <div className=\"form\">\n                        Get attributions for images you have used. You don't need to do this if you have used your own\n                        images/art.\n                        <button onClick={this.handleGetAttributions}>Get attributions</button>\n                        {attributions && attributions.length > 0 && (\n                            <>\n                                Give attributions to:\n                                <ul>\n                                    {attributions.map(attribution => (\n                                        <li key={attribution}>{attribution}</li>\n                                    ))}\n                                </ul>\n                            </>\n                        )}\n                    </div>\n                </div>\n            )\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        activeGame:\n            state.games.active && state.games.byId[state.games.active] ? state.games.byId[state.games.active] : null,\n        allIds: state.cardsets.allIds,\n        byId: state.cardsets.byId,\n        isCreatingPng: (state.games.activity & ACTIVITY_CREATING_PNG) === ACTIVITY_CREATING_PNG,\n        attributions: state.games.attributions,\n    };\n};\n\nexport default connect(mapStateToProps)(CardSets);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { Dispatch, gameSelectRequest } from './actions';\nimport { State } from './reducers';\nimport CardSets from './components/CardSets';\n\ninterface Props {\n    dispatch: Dispatch;\n    match: { params: { id: string } };\n    isAuthenticated?: boolean;\n}\n\nexport class GamePage extends Component<Props> {\n    componentDidMount() {\n        const { dispatch, match } = this.props;\n        dispatch(gameSelectRequest(match.params.id, true));\n    }\n\n    render() {\n        const { isAuthenticated } = this.props;\n        if (isAuthenticated) {\n            return <CardSets />;\n        } else if (isAuthenticated === false) {\n            return <Redirect to=\"/login\" />;\n        } else {\n            return null;\n        }\n    }\n}\n\nconst mapStateToProps = (state: State) => ({ isAuthenticated: state.auth.isAuthenticated });\n\nexport default connect(mapStateToProps)(GamePage);\n","import React, { Component } from 'react';\n\nexport default class AboutPage extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Help</h2>\n                <p>You can learn how to use Card-a-mon from tutorials:</p>\n                <ul>\n                    <li>\n                        <a href=\"https://blog.ffff.lt/posts/cardamon-tutorial-01/\">Creating first game prototype</a>\n                    </li>\n                    <li>\n                        <a href=\"https://blog.ffff.lt/posts/cardamon-tutorial-02/\">Uploading your own images</a>\n                    </li>\n                    <li>\n                        <a href=\"https://blog.ffff.lt/posts/cardamon-tutorial-03/\">Import and export</a>\n                    </li>\n                    <li>\n                        <a href=\"https://blog.ffff.lt/posts/cardamon-tutorial-04/\">PDF generation options</a>\n                    </li>\n                </ul>\n                <p>\n                    If tutorials do not answer your question then feel free to contact me by e-mail{' '}\n                    <a href=\"mailto:dalius@ffff.lt\">dalius@ffff.lt</a>, on{' '}\n                    <a href=\"https://twitter.com/DaliusD_\">twitter</a> or{' '}\n                    <a href=\"https://www.reddit.com/user/daliusd_/\">reddit</a>.\n                </p>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\ninterface Props {\n    onLogin: (creds: { username: string; password: string }) => void;\n    onLoginFailure: (message: string) => void;\n}\n\ninterface LocalState {\n    username: string;\n    password: string;\n}\n\nexport default class Login extends Component<Props, LocalState> {\n    state = {\n        username: '',\n        password: '',\n    };\n\n    handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ username: event.target.value });\n    };\n\n    handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ password: event.target.value });\n    };\n\n    handleSubmit = (event: React.FormEvent) => {\n        const username = this.state.username.trim();\n        const password = this.state.password.trim();\n        if (username && password) {\n            const creds = { username, password };\n            this.props.onLogin(creds);\n        } else {\n            this.props.onLoginFailure('Missing username and/or password.');\n        }\n        event.preventDefault();\n    };\n\n    render() {\n        return (\n            <div>\n                <form className=\"form\" onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"text\"\n                        onChange={this.handleUsernameChange}\n                        className=\"form-control\"\n                        placeholder=\"Username\"\n                    />\n                    <input\n                        type=\"password\"\n                        onChange={this.handlePasswordChange}\n                        className=\"form-control\"\n                        placeholder=\"Password\"\n                    />\n                    <input type=\"submit\" value=\"Login\" />\n                </form>\n            </div>\n        );\n    }\n}\n","import { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { Dispatch, loginRequest, messageDisplay } from './actions';\nimport { State } from './reducers';\nimport KawaiiMessage, { Character } from './components/KawaiiMessage';\nimport Login from './components/Login';\n\ninterface Props {\n    dispatch: Dispatch;\n    isAuthenticated?: boolean;\n}\n\nexport class LoginPage extends Component<Props> {\n    render() {\n        const { dispatch, isAuthenticated } = this.props;\n\n        return (\n            <div className=\"App\">\n                {!isAuthenticated && (\n                    <>\n                        <KawaiiMessage character={Character.Ghost}>\n                            Please enter your credentials to login. If you don't have account yet then you can create\n                            one here: <a href=\"/signup\">Sign-up</a>.\n                        </KawaiiMessage>\n\n                        <Login\n                            onLogin={creds => dispatch(loginRequest(creds))}\n                            onLoginFailure={msg => dispatch(messageDisplay('error', msg))}\n                        />\n                    </>\n                )}\n                {isAuthenticated && <Redirect to=\"/\" />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => ({ isAuthenticated: state.auth.isAuthenticated });\n\nexport default connect(mapStateToProps)(LoginPage);\n","import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport style from './FeatureList.module.css';\nimport screenshot from './screenshot.png';\n\nexport default class FeatureList extends Component {\n    render() {\n        return (\n            <div className={style.features}>\n                <div>\n                    <img src={screenshot} alt=\"screenshot\" />\n                </div>\n                Card-a-mon has a lot of required functionality to create a card game from prototype to final product:\n                <ul>\n                    <li>\n                        <strong>Multiple card sets</strong> per game. Each with its own card size and other properties.\n                    </li>\n                    <li>\n                        <strong>Works on modern browsers</strong> both desktop and mobile.\n                    </li>\n                    <li>\n                        <strong>WYSIWYG</strong> editing of cards.\n                    </li>\n                    <li>\n                        <strong>Full images control</strong> - resize, rotation, zoom and panning. Use images from\n                        built-in collection of 8000+ images or upload your own.\n                    </li>\n                    <li>\n                        <strong>Powerful text editing</strong> - hundreds of fonts, font size, alignment, variants, line\n                        height, rotation and color control, possibility to embed images into text.\n                    </li>\n                    <li>\n                        <strong>Data export/import</strong> to/from JSON and CSV formats.\n                    </li>\n                    <li>\n                        <strong>PDF generation</strong> of full game (all card sets) with cuttings marks for print and\n                        play.\n                    </li>\n                    <li>\n                        <strong>PNG generation</strong> for printing in services like The Game Crafter, Make Playings\n                        Cards and others.\n                    </li>\n                </ul>\n                <p>\n                    Check out <Link to=\"/help\">Help</Link> for more details.\n                </p>\n            </div>\n        );\n    }\n}\n","import { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { Dispatch, gameCreateRequest, gameDeleteRequest, messageDisplay } from '../actions';\nimport { GamesCollection, IdsArray } from '../types';\nimport { State } from '../reducers';\nimport ConfirmedDelete from './ConfirmedDelete';\nimport KawaiiMessage, { Character } from './KawaiiMessage';\nimport FeatureList from './FeatureList';\n\ninterface Props {\n    dispatch: Dispatch;\n    isAuthenticated?: boolean;\n    allIds: IdsArray;\n    byId: GamesCollection;\n}\n\ninterface LocalState {\n    gameName: string;\n}\n\nexport class Games extends Component<Props, LocalState> {\n    state: LocalState = {\n        gameName: '',\n    };\n\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ gameName: event.target.value });\n    };\n\n    handleCreateGameClick = () => {\n        const { dispatch } = this.props;\n\n        const gamename = this.state.gameName.trim();\n        if (gamename) {\n            dispatch(gameCreateRequest(gamename));\n        } else {\n            dispatch(messageDisplay('error', 'Game name should be non empty.'));\n        }\n    };\n\n    handleGameDelete = (gameId: string) => {\n        const { dispatch } = this.props;\n        dispatch(gameDeleteRequest(gameId));\n    };\n\n    render() {\n        const { isAuthenticated, allIds, byId } = this.props;\n\n        const games = allIds.map(gameId => byId[gameId]);\n        games.sort((a, b) => (a.name < b.name ? -1 : 1));\n\n        const gameItems = games.map(game => (\n            <li key={game.id}>\n                <Link to={`/game/${game.id}`}>{game.name}</Link>{' '}\n                <ConfirmedDelete\n                    question=\"Do you really want to delete this game?\"\n                    onDelete={() => this.handleGameDelete(game.id)}\n                />\n            </li>\n        ));\n\n        return (\n            isAuthenticated && (\n                <div>\n                    <KawaiiMessage character={Character.Ghost}>\n                        <FeatureList />\n                        {allIds.length === 0 && (\n                            <>Below you can create your games and see list of your games when you have some.</>\n                        )}\n                        {allIds.length > 0 && (\n                            <>Below you can see a list of your games or you can create even more games.</>\n                        )}\n                    </KawaiiMessage>\n\n                    <ul>{gameItems}</ul>\n                    <div className=\"form\">\n                        <label htmlFor=\"game_name\">Game name:</label>\n                        <input\n                            id=\"game_name\"\n                            type=\"text\"\n                            onChange={this.handleChange}\n                            className=\"form-control\"\n                            placeholder=\"Game name\"\n                        />\n                        <button onClick={this.handleCreateGameClick}>Create Game</button>\n                    </div>\n                </div>\n            )\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        allIds: state.games.allIds,\n        byId: state.games.byId,\n    };\n};\n\nexport default connect(mapStateToProps)(Games);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { State } from './reducers';\nimport Games from './components/Games';\nimport KawaiiMessage, { Character } from './components/KawaiiMessage';\nimport FeatureList from './components/FeatureList';\n\ninterface Props {\n    isAuthenticated?: boolean;\n}\n\nexport class Main extends Component<Props> {\n    render() {\n        if (this.props.isAuthenticated) {\n            return <Games />;\n        } else {\n            return (\n                <KawaiiMessage character={Character.Ghost}>\n                    <FeatureList />\n                    Here you can create your own card game but you need to <a href=\"/login\">Login</a> or{' '}\n                    <a href=\"/signup\">Sign-up</a> first.\n                </KawaiiMessage>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state: State) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n    };\n};\n\nexport default connect(mapStateToProps)(Main);\n","import { State } from './reducers';\n\nexport const getActiveGame = (state: State) => (state.games.active ? state.games.byId[state.games.active] : null);\n\nexport const getActiveCardSet = (state: State) =>\n    state.cardsets.active ? state.cardsets.byId[state.cardsets.active] : null;\n","import React from 'react';\n\ninterface Props {\n    onLogout: () => void;\n}\n\nfunction Logout(props: Props) {\n    return (\n        <button onClick={() => props.onLogout()} className=\"btn btn-primary\">\n            Logout\n        </button>\n    );\n}\n\nexport default Logout;\n","import { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { CardSetType, GameType, MessageType } from '../types';\nimport { Dispatch, logoutRequest } from '../actions';\nimport { State } from '../reducers';\nimport { getActiveCardSet, getActiveGame } from '../selectors';\nimport Loader from './Loader';\nimport Logout from './Logout';\nimport style from './Navbar.module.css';\n\ninterface OwnProps {\n    isAuthenticated?: boolean;\n}\n\ninterface StateProps {\n    messages: MessageType[];\n    activeGame: GameType | null;\n    activeCardSet: CardSetType | null;\n}\n\ninterface DispatchProps {\n    dispatch: Dispatch;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nexport class Navbar extends Component<Props> {\n    render() {\n        const { dispatch, isAuthenticated, messages, activeGame, activeCardSet } = this.props;\n\n        return (\n            <nav>\n                <div id=\"messages\" className={style.messages}>\n                    <ul>\n                        {messages.map(m => (\n                            <li key={m.id} className={m.type === 'error' ? style.error : style.info}>\n                                {m.type === 'error' && (\n                                    <>\n                                        <i className=\"material-icons\">error</i> {m.text}\n                                    </>\n                                )}\n                                {m.type === 'info' && (\n                                    <>\n                                        <i className=\"material-icons\">info</i> {m.text}\n                                    </>\n                                )}\n                                {m.type === 'progress' && (\n                                    <>\n                                        <Loader small={true} /> {m.text}\n                                    </>\n                                )}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n                <div>\n                    <h1 className={style.header}>\n                        <Link to=\"/\">CARD-A-MON</Link>\n                    </h1>\n                    <div>\n                        <ul className={style.menu}>\n                            <li>\n                                <Link to=\"/\">Main</Link>\n                            </li>\n                            {isAuthenticated && (\n                                <>\n                                    {activeGame && (\n                                        <li>\n                                            <Link to={`/game/${activeGame.id}`}>Game \"{activeGame.name}\"</Link>\n                                        </li>\n                                    )}\n                                    {activeCardSet && (\n                                        <li>\n                                            <Link to={`/cardset/${activeCardSet.id}`}>\n                                                Card Set \"{activeCardSet.name}\"\n                                            </Link>\n                                        </li>\n                                    )}\n                                </>\n                            )}\n                            <li>\n                                <Link to=\"/changelog\">Changelog</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/help\">Help</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/about\">About</Link>\n                            </li>\n                            {isAuthenticated && (\n                                <li>\n                                    <Logout onLogout={() => dispatch(logoutRequest())} />\n                                </li>\n                            )}\n                            {!isAuthenticated && (\n                                <>\n                                    <li>\n                                        <Link to=\"/login\">Login</Link>\n                                    </li>\n                                    <li>\n                                        <Link to=\"/signup\">Sign-up</Link>\n                                    </li>\n                                </>\n                            )}\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        messages: state.message.messages,\n        activeGame: getActiveGame(state),\n        activeCardSet: getActiveCardSet(state),\n    };\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, State>(mapStateToProps)(Navbar);\n","import React, { Component } from 'react';\n\nimport KawaiiMessage, { Character } from './components/KawaiiMessage';\n\nexport default class NotFoundPage extends Component {\n    render() {\n        return (\n            <KawaiiMessage character={Character.Browser} mood=\"sad\">\n                There is nothing here.\n            </KawaiiMessage>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { Credentials } from '../types';\nimport { Dispatch, messageDisplay } from '../actions';\n\ninterface Props {\n    dispatch: Dispatch;\n    onSignUp: (cred: Credentials) => void;\n}\n\nexport class SignUp extends Component<Props> {\n    state = {\n        username: '',\n        password: '',\n        passwordRepeat: '',\n    };\n\n    handleSubmit(event: React.FormEvent) {\n        const { dispatch, onSignUp } = this.props;\n\n        if (this.state.password !== this.state.passwordRepeat) {\n            dispatch(messageDisplay('error', 'Passwords do not match.'));\n        } else {\n            const creds = {\n                username: this.state.username.trim(),\n                password: this.state.password.trim(),\n            };\n            onSignUp(creds);\n        }\n\n        event.preventDefault();\n    }\n\n    handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ username: event.target.value });\n    };\n\n    handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ password: event.target.value });\n    };\n\n    handlePasswordRepeatChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ passwordRepeat: event.target.value });\n    };\n\n    render() {\n        return (\n            <div>\n                <form className=\"form\" onSubmit={event => this.handleSubmit(event)}>\n                    <input\n                        type=\"text\"\n                        onChange={this.handleUsernameChange}\n                        className=\"form-control\"\n                        placeholder=\"Username\"\n                    />\n                    <input\n                        type=\"password\"\n                        onChange={this.handlePasswordChange}\n                        className=\"form-control\"\n                        placeholder=\"Password\"\n                    />\n                    <input\n                        type=\"password\"\n                        onChange={this.handlePasswordRepeatChange}\n                        className=\"form-control\"\n                        placeholder=\"Repeat password here\"\n                    />\n                    <input type=\"submit\" value=\"Sign Up\" />\n                </form>\n            </div>\n        );\n    }\n}\nexport default connect()(SignUp);\n","import { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport { Dispatch, signupRequest } from './actions';\nimport { State } from './reducers';\nimport KawaiiMessage, { Character } from './components/KawaiiMessage';\nimport SignUp from './components/SignUp';\n\ninterface Props {\n    dispatch: Dispatch;\n    isAuthenticated?: boolean;\n}\n\nexport class SignUpPage extends Component<Props> {\n    render() {\n        const { dispatch, isAuthenticated } = this.props;\n\n        return (\n            <div className=\"App\">\n                {!isAuthenticated && (\n                    <>\n                        <KawaiiMessage character={Character.Ghost}>\n                            Create your user here. Instead of user name you can use your e-mail. If you forget your\n                            password then you can send me e-mail (I will not send you any e-mails without your consent).\n                            If you use regular user name and forget your password then you will not be able to access\n                            your account.\n                        </KawaiiMessage>\n\n                        <SignUp onSignUp={creds => dispatch(signupRequest(creds))} />\n                    </>\n                )}\n                {isAuthenticated && <Redirect to=\"/\" />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => ({ isAuthenticated: state.auth.isAuthenticated });\n\nexport default connect(mapStateToProps)(SignUpPage);\n","import './App.css';\n\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { isIE } from 'react-device-detect';\n\nimport { Dispatch, initRequest } from './actions';\nimport { State } from './reducers';\nimport AboutPage from './AboutPage';\nimport CardSetPage from './CardSetPage';\nimport ChangelogPage from './ChangelogPage';\nimport ErrorBoundry from './ErrorBoundry';\nimport GamePage from './GamePage';\nimport HelpPage from './HelpPage';\nimport LoginPage from './LoginPage';\nimport Main from './Main';\nimport Navbar from './components/Navbar';\nimport NotFoundPage from './NotFoundPage';\nimport SignUpPage from './SignUpPage';\n\ninterface Props {\n    dispatch: Dispatch;\n    isAuthenticated?: boolean;\n}\n\nexport class App extends Component<Props> {\n    componentDidMount() {\n        this.props.dispatch(initRequest());\n    }\n\n    render() {\n        if (isIE) return <div> IE is not supported. Download Chrome/Opera/Firefox </div>;\n        const { isAuthenticated } = this.props;\n        return (\n            <Router>\n                <div className=\"App\">\n                    <ErrorBoundry>\n                        <Navbar isAuthenticated={isAuthenticated} />\n                        <Switch>\n                            <Route exact path=\"/\" component={Main} />\n                            <Route exact path=\"/login\" component={LoginPage} />\n                            <Route exact path=\"/signup\" component={SignUpPage} />\n                            <Route exact path=\"/game/:id\" component={GamePage} />\n                            <Route exact path=\"/cardset/:id\" component={CardSetPage} />\n                            <Route exact path=\"/changelog\" component={ChangelogPage} />\n                            <Route exact path=\"/help\" component={HelpPage} />\n                            <Route exact path=\"/about\" component={AboutPage} />\n                            <Route component={NotFoundPage} />\n                        </Switch>\n                        <div className=\"App-footer\">Dalius Dobravolskas &copy; {new Date().getFullYear()}</div>\n                    </ErrorBoundry>\n                </div>\n            </Router>\n        );\n    }\n}\n\nconst mapStateToProps = (state: State) => {\n    const { auth } = state;\n    const { isAuthenticated } = auth;\n\n    return {\n        isAuthenticated,\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import './index.css';\n\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createAppStore } from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createAppStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__2go77\",\"controls\":\"Sidebar_controls__xeGhN\",\"active\":\"Sidebar_active__1IRSY\",\"view\":\"Sidebar_view__1fMrR\",\"hidden\":\"Sidebar_hidden__3b9cS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Navbar_header__ghYTU\",\"menu\":\"Navbar_menu__13qFH\",\"messages\":\"Navbar_messages__mT8lG\",\"error\":\"Navbar_error__1blfT\",\"info\":\"Navbar_info__24sSM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixed\":\"Loader_fixed__2mdYX\",\"relative\":\"Loader_relative__3aVVQ\",\"loader\":\"Loader_loader__TLVE4\",\"small\":\"Loader_small__1bfcV\",\"loader-small\":\"Loader_loader-small__2-HRk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarDetails_view__2JmXX\",\"disabled\":\"SidebarDetails_disabled__YOEYl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardset\":\"CardSet_cardset__1Nw3X\",\"cardsetview\":\"CardSet_cardsetview__1a6D0\",\"sidebar\":\"CardSet_sidebar__1yNjt\",\"createCard\":\"CardSet_createCard__202Gs\"};","module.exports = __webpack_public_path__ + \"static/media/pan.ff303319.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoom.2d0b374b.svg\";","module.exports = __webpack_public_path__ + \"static/media/resize.c1fb8dc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotate.4a37bc7b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3F8np\",\"title\":\"Card_title__1yJ7t\",\"active\":\"Card_active__2518P\",\"disabled\":\"Card_disabled__23t2-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view\":\"SidebarImage_view__2Zpt3\",\"disabled\":\"SidebarImage_disabled__3HnMp\",\"images\":\"SidebarImage_images__3Cf4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ConfirmedDelete_button__2bjb-\",\"answer\":\"ConfirmedDelete_answer__ht4M6\"};"],"sourceRoot":""}